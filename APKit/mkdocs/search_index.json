{
    "docs": [
        {
            "location": "/",
            "text": "APKit\n\n\n\n\nHow to use\n\n\nThe under code block only for OS X:\n\n\nif ( ![NSData dataWithContentsOfURL:[NSBundle mainBundle].appStoreReceiptURL] ) {\n  exit(173);\n}\n\n\n\n\nCan be used in Objective-C or swift:\n\n\npod 'APKit', '~> 0.3.1'\n\n\n\n\nrun command \npod update --no-repo-update\n.\n\n\nIn\nAppDelegate.m\n\uff1a\n\n\n#import <StoreKit/StoreKit.h>\n#import <APKit/APKit.h>\n\n\n\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n#warning Add transaction observer\n    [[SKPaymentQueue defaultQueue] addTransactionObserver:[APStoreObserver sharedInstance]];\n\n    return YES;\n}\n\n\n\n\n- (void)applicationWillTerminate:(UIApplication *)application {\n#warning Remove transaction observer\n    [[SKPaymentQueue defaultQueue] removeTransactionObserver: [APStoreObserver sharedInstance]];\n}\n\n\n\n\nSet result listener\uff1a\n\n\n- (instancetype)init {\n    self = [super init];\n    if ( self ) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleProductRequestNotification:)\n                                                     name:APProductRequestNotification\n                                                   object:[APProductManager sharedInstance]];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handlePurchasesNotification:)\n                                                     name:APPurchaseNotification\n                                                   object:[APStoreObserver sharedInstance]];\n    }\n    return self;\n}\n\n\n\n\nhandleProductRequestNotification\nwill be fired when get response for product.\n\n\nhandlePurchasesNotification\n will be fired when get response for purchase.\n\n\nRequest product with identifier:\n\n\n- (void)viewDidLoad {\n    [super viewDidLoad];\n\n    NSArray *productIdentifiers = @[\n                                    @\"1994101101\",\n                                    @\"1994101102\",\n                                    @\"1994101103\"\n                                    ];\n\n    APProductManager *productManager = [APProductManager sharedInstance];\n    [productManager\n     fetchProductInformationForIds:productIdentifiers];\n}\n\n\n\n\n-(void)handleProductRequestNotification: (NSNotification *)notification {\n    APProductManager *productRequestNotification = (APProductManager*)notification.object;\n    APProductRequestStatus result = (APProductRequestStatus)productRequestNotification.status;\n\n    if (result == APProductRequestSuccess) {\n        NSLog(@\"VALID: %@\", productRequestNotification.availableProducts);\n        NSLog(@\"INVALID: %@\", productRequestNotification.invalidProductIds);\n    }\n}\n\n\n\n\n\n\n1994101103 is an invalid product identifier.\n\n\nPurchase\uff1a\n\n\nNSArray *productArray = productRequestNotification.availableProducts;\nif ( productArray.count > 0 ) {\n    SKProduct *product_1 = productArray.firstObject;\n\n    APStoreObserver *storeObs = [APStoreObserver sharedInstance];\n    [storeObs buy:product_1];\n}\n\n\n\n\n#pragma mark - Handle purchase notification\n\n-(void)handlePurchasesNotification: (NSNotification *)notification {\n    APStoreObserver *purchasesNotification = (APStoreObserver *)notification.object;\n    APPurchaseStatus status = (APPurchaseStatus)purchasesNotification.status;\n\n    switch ( status ) {\n#pragma - Purchase\n        case APPurchaseSucceeded: {\n            NSLog(@\"Purchase-Success: %@\", purchasesNotification.productsPurchased);\n            // Verify receipts step.\n            [self verifyReceipts];\n            break;\n        }\n        case APPurchaseFailed: {\n            NSLog(@\"Purchase-Failed %@\", purchasesNotification.errorMessage);\n            break;\n        }\n        case APPurchaseCancelled: {\n            NSLog(@\"Purchase-Cancelled!\");\n            break;\n        }\n#pragma - Restore\n        case APRestoredSucceeded: {\n            NSLog(@\"Restored-Success: %@\", purchasesNotification.productsRestored);\n            break;\n        }\n        case APRestoredFailed: {\n            NSLog(@\"Restored-Failed %@\", purchasesNotification.errorMessage);\n            break;\n        }\n        case APRestoredCancelled: {\n            NSLog(@\"Restored-Cancelled!\");\n            break;\n        }\n        default:\n            break;\n    }\n}\n\n\n\n\nWatch for line 12, \n[self verifyReceipts];\n it's important.\n\n\nVerify receipt\uff1a\n\n\nIf you get some error, try to use \nSKReceiptRefreshRequest\n\u3002\n\n\nNSURL *localReceiptURL = [[NSBundle mainBundle] appStoreReceiptURL];\nNSData *data = [NSData dataWithContentsOfURL:localReceiptURL];\nNSString *receiptStr = [data base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];\n\n\n\n\nsend \nreceiptStr\nto your server.\n\n\nAbout local receipt verify \nlocal verify your receipt\n.\n\n\nRelease note\n\n\n\n\n0.3.0, 0.3.1: Clean workspace, format code with 2 indent.\n\n\n0.2.0: Download Hosted content.\n\n\n0.1.0: basic features develope, initialized repo.\n\n\n\n\nLicense\n\n\nMIT.",
            "title": "Home"
        },
        {
            "location": "/#apkit",
            "text": "",
            "title": "APKit"
        },
        {
            "location": "/#how-to-use",
            "text": "The under code block only for OS X:  if ( ![NSData dataWithContentsOfURL:[NSBundle mainBundle].appStoreReceiptURL] ) {\n  exit(173);\n}  Can be used in Objective-C or swift:  pod 'APKit', '~> 0.3.1'  run command  pod update --no-repo-update .  In AppDelegate.m \uff1a  #import <StoreKit/StoreKit.h>\n#import <APKit/APKit.h>  - (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n#warning Add transaction observer\n    [[SKPaymentQueue defaultQueue] addTransactionObserver:[APStoreObserver sharedInstance]];\n\n    return YES;\n}  - (void)applicationWillTerminate:(UIApplication *)application {\n#warning Remove transaction observer\n    [[SKPaymentQueue defaultQueue] removeTransactionObserver: [APStoreObserver sharedInstance]];\n}  Set result listener\uff1a  - (instancetype)init {\n    self = [super init];\n    if ( self ) {\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handleProductRequestNotification:)\n                                                     name:APProductRequestNotification\n                                                   object:[APProductManager sharedInstance]];\n\n        [[NSNotificationCenter defaultCenter] addObserver:self\n                                                 selector:@selector(handlePurchasesNotification:)\n                                                     name:APPurchaseNotification\n                                                   object:[APStoreObserver sharedInstance]];\n    }\n    return self;\n}  handleProductRequestNotification will be fired when get response for product.  handlePurchasesNotification  will be fired when get response for purchase.  Request product with identifier:  - (void)viewDidLoad {\n    [super viewDidLoad];\n\n    NSArray *productIdentifiers = @[\n                                    @\"1994101101\",\n                                    @\"1994101102\",\n                                    @\"1994101103\"\n                                    ];\n\n    APProductManager *productManager = [APProductManager sharedInstance];\n    [productManager\n     fetchProductInformationForIds:productIdentifiers];\n}  -(void)handleProductRequestNotification: (NSNotification *)notification {\n    APProductManager *productRequestNotification = (APProductManager*)notification.object;\n    APProductRequestStatus result = (APProductRequestStatus)productRequestNotification.status;\n\n    if (result == APProductRequestSuccess) {\n        NSLog(@\"VALID: %@\", productRequestNotification.availableProducts);\n        NSLog(@\"INVALID: %@\", productRequestNotification.invalidProductIds);\n    }\n}   1994101103 is an invalid product identifier.  Purchase\uff1a  NSArray *productArray = productRequestNotification.availableProducts;\nif ( productArray.count > 0 ) {\n    SKProduct *product_1 = productArray.firstObject;\n\n    APStoreObserver *storeObs = [APStoreObserver sharedInstance];\n    [storeObs buy:product_1];\n}  #pragma mark - Handle purchase notification\n\n-(void)handlePurchasesNotification: (NSNotification *)notification {\n    APStoreObserver *purchasesNotification = (APStoreObserver *)notification.object;\n    APPurchaseStatus status = (APPurchaseStatus)purchasesNotification.status;\n\n    switch ( status ) {\n#pragma - Purchase\n        case APPurchaseSucceeded: {\n            NSLog(@\"Purchase-Success: %@\", purchasesNotification.productsPurchased);\n            // Verify receipts step.\n            [self verifyReceipts];\n            break;\n        }\n        case APPurchaseFailed: {\n            NSLog(@\"Purchase-Failed %@\", purchasesNotification.errorMessage);\n            break;\n        }\n        case APPurchaseCancelled: {\n            NSLog(@\"Purchase-Cancelled!\");\n            break;\n        }\n#pragma - Restore\n        case APRestoredSucceeded: {\n            NSLog(@\"Restored-Success: %@\", purchasesNotification.productsRestored);\n            break;\n        }\n        case APRestoredFailed: {\n            NSLog(@\"Restored-Failed %@\", purchasesNotification.errorMessage);\n            break;\n        }\n        case APRestoredCancelled: {\n            NSLog(@\"Restored-Cancelled!\");\n            break;\n        }\n        default:\n            break;\n    }\n}  Watch for line 12,  [self verifyReceipts];  it's important.  Verify receipt\uff1a  If you get some error, try to use  SKReceiptRefreshRequest \u3002  NSURL *localReceiptURL = [[NSBundle mainBundle] appStoreReceiptURL];\nNSData *data = [NSData dataWithContentsOfURL:localReceiptURL];\nNSString *receiptStr = [data base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];  send  receiptStr to your server.  About local receipt verify  local verify your receipt .",
            "title": "How to use"
        },
        {
            "location": "/#release-note",
            "text": "0.3.0, 0.3.1: Clean workspace, format code with 2 indent.  0.2.0: Download Hosted content.  0.1.0: basic features develope, initialized repo.",
            "title": "Release note"
        },
        {
            "location": "/#license",
            "text": "MIT.",
            "title": "License"
        }
    ]
}