<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>dylan</title>
  <subtitle>inclusiveness!</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wilddylan.github.io/"/>
  <updated>2017-03-17T02:04:18.000Z</updated>
  <id>https://wilddylan.github.io/</id>
  
  <author>
    <name>dylan</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>New Year&#39;s 2017</title>
    <link href="https://wilddylan.github.io/2017/03/16/New%20Year&#39;s%202017/"/>
    <id>https://wilddylan.github.io/2017/03/16/New Year&#39;s 2017/</id>
    <published>2017-03-16T11:06:06.000Z</published>
    <updated>2017-03-17T02:04:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>With 2016 behind us and the new year begun, it’s time to write some articles about code! As in year’s past, some articles can help you known some interesting and useful things. Many thanks to <code>Surge.sh</code> and <code>GitHub.io</code>, provide a place where i can do some writing.</p>
<a id="more"></a>
<h4 id="What’s-Android-TV"><a href="#What’s-Android-TV" class="headerlink" title="What’s Android TV"></a>What’s Android TV</h4><p>Android TV is a smart TV platform developed by <code>Google</code>, Based on the Android ( operating system ), It’s a new variant of Google’s mobile OS aimed at TVs, game consoles and set top boxes. It’s based upon <code>Android 5.0 Lollipop</code>, Which of course also run on phones, tablets and car via <code>Android Auto</code>.</p>
<p>But, can you develop android application swiftly? Aha, many many developers full with experiences, so, you can SKIP the <code>Android application</code> basic course next. Now, let’s do it, start our first lesson about <code>Android</code>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;With 2016 behind us and the new year begun, it’s time to write some articles about code! As in year’s past, some articles can help you known some interesting and useful things. Many thanks to &lt;code&gt;Surge.sh&lt;/code&gt; and &lt;code&gt;GitHub.io&lt;/code&gt;, provide a place where i can do some writing.&lt;/p&gt;
    
    </summary>
    
    
      <category term="2017" scheme="https://wilddylan.github.io/tags/2017/"/>
    
  </entry>
  
  <entry>
    <title>2016总结</title>
    <link href="https://wilddylan.github.io/2016/12/31/2016%E6%80%BB%E7%BB%93/"/>
    <id>https://wilddylan.github.io/2016/12/31/2016总结/</id>
    <published>2016-12-31T10:31:11.000Z</published>
    <updated>2017-02-04T09:03:12.000Z</updated>
    
    <content type="html"><![CDATA[<p>我的2016</p>
<p>2016年2月，正式开始工作，上家公司（轻客）由于投资方的原因主动破产，我们属于坚持梦想的那一批人，将轻客改名为荟萃，继续为企业提供人力众包等服务。条件也算辛苦，我们6个人在原来老大租的房子里办公，虽然人少，但是生活很充实。改版，重构，写代码，想解决方案，去浙大踢球，打LOL（而且跟他们学会了打羽毛球）。就这样我们一直坚持到了5月中旬，投资方有音讯了，是一位上海的投资人。但是这个时候由于一些经济上的问题，不得不选择了离开这个目前还没有薪资的小团队。我是在15年的8月底加入这家公司，前前后后大概一年的时间，认识了这一帮能文能武能玩耍效率高的朋友，在这里我成长了许多，碰到了爱的人（虽然现在已经分手了，但是毕竟爱过），学习到了许多新的知识，并且开始学习做技术架构。我和公司的另一名手淘挖来的好兄弟一起搞完了轻客的即时通讯框架，HTML本地缓存框架，花了有一些时日，让人可以得到安慰的的是，这些框架的稳定性很好。</p>
<a id="more"></a>
<p>2016年5月12日，离开温暖的小团队，来到了朋友所在的一家公司，我和这家公司还是有一点点渊源的。我2015年来到杭州，来见的第一个人就是这家公司的马哥（不过后来他离开了），带着我们一起去吃饭，唱歌，交心的聊天。后来也是有一些小插曲有一些断断续续的联系，这次真的来了，老板说我之前放他鸽子，哈哈，所以在经过第一次跟老大面谈之后，我感觉这个人可以交为好朋友，但是不知道人家看不看的起我。接下来的日子里，我有做过关于技术部整改的方案（3个演示文稿），并且被采纳过（虽然后来的执行不是很好），这家公司给我的最大感触就是大家都不像是为自己的公司干活，都像是为了赚钱来的。我也拿这一份工资默默的干着我自己的事情，继续写一些技术部整改的方案，不过没有给老大看；继续重构项目，搭建Swift版本的框架，制定JS-Bridge的规则这些事情。规划并提前实施了有我没事的客户端架构，而且在学习一些Desktop相关的东西为有我没事的桌面版做准备，但是这一切好像都是白费，不过至少我学习到了东西，他们用不用那是他们的事情。来这家公司给我最大的成长就是要学会圆滑。我来自内蒙古，本身性子比较直，有什么说什么，但是来到这里我发现，有些话不能直接说，有些话只能跟某些人说，有些话要装着说（也许我之前去的公司人比较少，大家都是用心的交朋友吧，在这里我感觉都是在利益驱动）。不过还好，我也不参与这些，直爽的本性我认为很好，有一说一，不藏着噎着也是我这辈子所坚定的理念。马上要到年底了，由于业务的以及方向的东西导致的公司人越来越低迷，人心涣散，我也不能做些什么感觉很无力（无力是因为没有权利，毕竟越界是一件很不讨人喜欢的事情，至少我这样认为）。</p>
<p>2016年12月16号，去了西藏，陪朋友，他高反，我们去西藏共5天4夜，喝了3天酒，又交了一两个交心的朋友，我们相约年前在内蒙古大草原继续干杯。西藏真的美，景美人也美，每个藏民脸上都带着幸福的笑容，他们真的很幸福（西藏每年使用920亿，这其中政府拨款了90%，不幸福才怪…）。</p>
<p>2016年12月30号，最后一个工作日，有我没事的桌面端框架搭建结束了。</p>
<p>2016年不知不觉过去了，今年是技术成长的一年，学到了很多的知识。我希望我依旧可以把直爽的性格保持下去，不被污浊的环境所侵蚀。</p>
<p>17年该怎么过？</p>
<p>我想让我所在的公司变的更好，对没错，用我的努力，让技术部变得更好，更高效，更像一个家。这就是我的梦想。</p>
<p>一些西藏的照片：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_1.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_3.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_4.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_5.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_6.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_7.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_8.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/blog2016_9.JPG" alt=""></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我的2016&lt;/p&gt;
&lt;p&gt;2016年2月，正式开始工作，上家公司（轻客）由于投资方的原因主动破产，我们属于坚持梦想的那一批人，将轻客改名为荟萃，继续为企业提供人力众包等服务。条件也算辛苦，我们6个人在原来老大租的房子里办公，虽然人少，但是生活很充实。改版，重构，写代码，想解决方案，去浙大踢球，打LOL（而且跟他们学会了打羽毛球）。就这样我们一直坚持到了5月中旬，投资方有音讯了，是一位上海的投资人。但是这个时候由于一些经济上的问题，不得不选择了离开这个目前还没有薪资的小团队。我是在15年的8月底加入这家公司，前前后后大概一年的时间，认识了这一帮能文能武能玩耍效率高的朋友，在这里我成长了许多，碰到了爱的人（虽然现在已经分手了，但是毕竟爱过），学习到了许多新的知识，并且开始学习做技术架构。我和公司的另一名手淘挖来的好兄弟一起搞完了轻客的即时通讯框架，HTML本地缓存框架，花了有一些时日，让人可以得到安慰的的是，这些框架的稳定性很好。&lt;/p&gt;
    
    </summary>
    
    
      <category term="领悟" scheme="https://wilddylan.github.io/tags/%E9%A2%86%E6%82%9F/"/>
    
  </entry>
  
  <entry>
    <title>快速搭建属于自己的斗鱼TV</title>
    <link href="https://wilddylan.github.io/2016/12/30/%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%B1%9E%E4%BA%8E%E8%87%AA%E5%B7%B1%E7%9A%84%E6%96%97%E9%B1%BCTV/"/>
    <id>https://wilddylan.github.io/2016/12/30/快速搭建属于自己的斗鱼TV/</id>
    <published>2016-12-30T05:31:45.000Z</published>
    <updated>2017-02-04T09:03:04.000Z</updated>
    
    <content type="html"><![CDATA[<p>让小白也可以快速搭建属于自己的<code>斗鱼TV</code>的教程</p>
<p>简明扼要，开始干活：</p>
<ul>
<li>打开<code>qiniu.com</code>注册个人开发者帐号</li>
<li>申请直播空间</li>
</ul>
<a id="more"></a>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_1.png" alt=""></p>
<ul>
<li>这里有个坎儿，就是你得有一个备案的域名，域名备案的服务我这里提供，可以找我QQ 958226951</li>
</ul>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_2.png" alt=""></p>
<p>申请之后等待3-7天，就会有结果了，一般不会被拒绝的，你的邮箱会收到一封审核通过的邮件：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_3.png" alt=""></p>
<p>再次打开自己的七牛开发者面板，发现顶部有一个黄色的提示，让你马上体验直播，或者点击左侧列表的直播标识也可以进入配置界面。然后就是一系列的简单配置，都是顾名思义的配置，大家自己照着配就好，配置CName是比较重要的环节，共有6个CName需要你配置到自己的已备案域名下。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_4.png" alt=""></p>
<p>接下来我们添加一个自己的房间：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_5.png" alt=""></p>
<p>名称大家自己随便起，接下来我们记录一下需要记录的一些信息：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_6.png" alt=""></p>
<p>这样，七牛这边的工作就完成了，按理说，我们应该准备一台服务器进行房间的创建操作，但是这里为了先让大家跑通流程，就不搞的那么麻烦了，直接手动在这里创建一个拿来用。接下来我们创建两个新的工程用于测试，一个用于推流，另一个用于播放。</p>
<h6 id="推流项目"><a href="#推流项目" class="headerlink" title="推流项目"></a>推流项目</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'PLMediaStreamingKit'</span></div></pre></td></tr></table></figure>
<p>都是有开发经验的人，我也不多说，引入<code>PLMediaStreamingKit</code>作为推流库，接下来进行配置（由于我使用的是Swift，所以这里在桥接文件中引入<code>PLMediaStreamingKit.h</code>）：</p>
<p>首先，在使用推流前无比初始化推流环境：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="type">PLStreamingEnv</span>.initEnv()</div></pre></td></tr></table></figure>
<p>首先按照官方文档创建一个<code>Stream对象</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 创建流对象</span></div><div class="line">  <span class="keyword">let</span> stream = <span class="type">PLStream</span>(json: <span class="type">NSDictionary</span>(dictionary: [<span class="string">"id"</span>: <span class="string">"helloworld"</span>,</div><div class="line">                                                        <span class="string">"title"</span>: <span class="string">"Hello world"</span>,</div><div class="line">                                                        <span class="string">"hub"</span> : <span class="string">"leafedu"</span>,</div><div class="line">                                                        <span class="string">"publishkey"</span>: <span class="string">"bbc2d839fbeafa70"</span>,</div><div class="line">                                                        <span class="string">"publishSecurity"</span>: <span class="string">"static"</span>,</div><div class="line">                                                        <span class="string">"disabled"</span>: <span class="type">NSNumber</span>(value: <span class="literal">false</span>),</div><div class="line">                                                        <span class="string">"profiles"</span>: <span class="type">NSArray</span>(objects: <span class="string">"420p"</span>, <span class="string">"720p"</span>),</div><div class="line">                                                        <span class="string">"hosts"</span>: [</div><div class="line">                                                          <span class="string">"publish"</span>: [</div><div class="line">                                                            <span class="string">"rtmp"</span>: <span class="string">"rtmp://pili-publish.devdylan.cn/leafedu/helloworld"</span></div><div class="line">                                                          ],</div><div class="line">                                                          <span class="string">"live"</span>: [</div><div class="line">                                                            <span class="string">"hdl"</span>: <span class="string">"http://pili-live-hdl.devdylan.cn/leafedu/helloworld.flv"</span>,</div><div class="line">                                                            <span class="string">"hls"</span>: <span class="string">"http://pili-live-hls.devdylan.cn/leafedu/helloworld.m3u8"</span>,</div><div class="line">                                                            <span class="string">"rtmp"</span>: <span class="string">"rtmp://pili-live-rtmp.devdylan.cn/leafedu/helloworld"</span>,</div><div class="line">                                                            <span class="string">"http"</span>: <span class="string">"http://pili-live-hls.devdylan.cn/leafedu/helloworld.m3u8"</span></div><div class="line">                                                          ],</div><div class="line">                                                          <span class="string">"playback"</span>: [</div><div class="line">                                                            <span class="string">"hls"</span>: <span class="string">"http://live.devdylan.cn/notification"</span>,</div><div class="line">                                                            <span class="string">"http"</span>: <span class="string">"http://live.devdylan.cn/notification"</span></div><div class="line">                                                          ],</div><div class="line">                                                          <span class="string">"play"</span>: [</div><div class="line">                                                            <span class="string">"http"</span>: <span class="string">"http://pili-live-hls.devdylan.cn/leafedu/helloworld.m3u8"</span>,</div><div class="line">                                                            <span class="string">"rtmp"</span>: <span class="string">"rtmp://pili-live-rtmp.devdylan.cn/leafedu/helloworld"</span></div><div class="line">                                                          ]</div><div class="line">    ]]) <span class="keyword">as</span>! [<span class="type">AnyHashable</span> : <span class="type">Any</span>] )</div></pre></td></tr></table></figure>
<p>这里的填充的内容是按照<code>PLMediaStreamingKit</code>的开发文档写的示例内容，由于我们没有自己的服务器，所以这里先随便填充一些内容，真正的使用我们刚才创建好的推流地址在后边，接下来创建一些基础的音视频，音视频流配置：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> videoCaptureConfiguration = <span class="type">PLVideoCaptureConfiguration</span>.<span class="keyword">default</span>()</div><div class="line"><span class="keyword">let</span> audioCaptureConfiguration = <span class="type">PLAudioCaptureConfiguration</span>.<span class="keyword">default</span>()</div><div class="line"></div><div class="line"><span class="keyword">let</span> videoStreamingConfiguration = <span class="type">PLVideoStreamingConfiguration</span>.<span class="keyword">default</span>()</div><div class="line"><span class="keyword">let</span> audioStreamingConfiguration = <span class="type">PLAudioStreamingConfiguration</span>.<span class="keyword">default</span>()</div></pre></td></tr></table></figure>
<p>初始化推流<code>Session</code>并添加一个实时预览：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化Session</span></div><div class="line">    session = <span class="type">PLMediaStreamingSession</span>(videoCaptureConfiguration: videoCaptureConfiguration, audioCaptureConfiguration: audioCaptureConfiguration, videoStreamingConfiguration: videoStreamingConfiguration, audioStreamingConfiguration: audioStreamingConfiguration, stream: stream)</div><div class="line"></div><div class="line">    <span class="comment">// 添加预览</span></div><div class="line">    <span class="keyword">if</span> <span class="keyword">let</span> preView = session?.previewView &#123;</div><div class="line">      view.addSubview(preView)</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<p>自行写一个按钮，在按钮动作中开始推流，<code>这个时候写我们刚刚创建好房间的推流地址</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.session?.startStreaming(withPush: <span class="type">URL</span>(string: <span class="string">"你的以rtmp开头的推流地址"</span>)!) &#123;</div><div class="line">        <span class="built_in">print</span>($<span class="number">0</span>)</div><div class="line">      &#125;</div></pre></td></tr></table></figure>
<p>然后看日志输出，明白人能看的懂。</p>
<h6 id="播放端"><a href="#播放端" class="headerlink" title="播放端"></a>播放端</h6><figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'PLPlayerKit'</span></div></pre></td></tr></table></figure>
<p>创建播放器：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> player = <span class="type">PLPlayer</span>(liveWith: <span class="type">URL</span>(string: <span class="string">"rtmp://pili-live-rtmp.devdylan.cn/leafedu/helloworld"</span>)!, option: <span class="type">PLPlayerOption</span>.<span class="keyword">default</span>())</div></pre></td></tr></table></figure>
<p>上边是你播放推流的地址</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_6.png" alt=""></p>
<p>然后添加到view上边，并设置代理：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置代理</span></div><div class="line">   player?.delegate = <span class="keyword">self</span></div><div class="line">   <span class="keyword">if</span> <span class="keyword">let</span> playView = player?.playerView &#123;</div><div class="line">     view.addSubview(playView)</div><div class="line">   &#125;</div></pre></td></tr></table></figure>
<p>接下来，实现代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">player</span><span class="params">(<span class="number">_</span> player: PLPlayer, statusDidChange state: PLPlayerStatus)</span></span> &#123;</div><div class="line"></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">player</span><span class="params">(<span class="number">_</span> player: PLPlayer, stoppedWithError error: Error?)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(error?.localizedDescription ?? <span class="string">"444"</span>)</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">player</span><span class="params">(<span class="number">_</span> player: PLPlayer, codecError error: Error)</span></span> &#123;</div><div class="line">    <span class="built_in">print</span>(error.localizedDescription )</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>第一个方法是状态发生变化的时候，后两个是遇到错误的时候，同样，自己添加一个按钮控制开始播放，播放的代码为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">self</span>.player?.play()</div></pre></td></tr></table></figure>
<h6 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h6><p>打开<code>推流端</code>，点击推流按钮开始推流，在播放端点击开始播放，就会看到直播已经建立了起来。在测试前需要注意的事项：</p>
<ul>
<li>Xcode权限的申请</li>
</ul>
<p>我们需要申请Camera以及MicroPhone的隐私权限：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_7.png" alt=""></p>
<p>包括ATS，网络的权限，接下来大家就可以测试了，在测试的过程中，可以在七牛的开发者平台查看实时信息：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/live_8.png" alt=""></p>
<p>可以在创建直播服务是绑定的空间内查看到直播的记录文件，保存的时长依你创建是选择的为准。<br>这样，我们大概用20分钟的时间就打通了直播流程。接下来按照业务需求搭建自己服务器通过七牛直播服务端SDK创建房间等等的事情交给大家自己了。 </p>
<h6 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h6><p>在<a href="https://github.com/pili-engineering" target="_blank" rel="external">Pili</a>为大家提供了整套的移动视频直播SDK（Android与iOS），<strong>PLMediaStreamingKit</strong>同样提供了高阶的一些使用，比如说美颜，声音混响等操作。这里是一份<a href="https://github.com/pili-engineering/PLMediaStreamingKit/wiki/PLMediaStreamingKit" target="_blank" rel="external">开发指南</a>，大家可以细阅，可以达到80%的业务需求。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;让小白也可以快速搭建属于自己的&lt;code&gt;斗鱼TV&lt;/code&gt;的教程&lt;/p&gt;
&lt;p&gt;简明扼要，开始干活：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;打开&lt;code&gt;qiniu.com&lt;/code&gt;注册个人开发者帐号&lt;/li&gt;
&lt;li&gt;申请直播空间&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="直播" scheme="https://wilddylan.github.io/tags/%E7%9B%B4%E6%92%AD/"/>
    
  </entry>
  
  <entry>
    <title>WebApp问题整理</title>
    <link href="https://wilddylan.github.io/2016/11/22/WebApp%E9%97%AE%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://wilddylan.github.io/2016/11/22/WebApp问题整理/</id>
    <published>2016-11-22T10:29:12.000Z</published>
    <updated>2017-02-04T09:01:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题列表"><a href="#问题列表" class="headerlink" title="问题列表"></a>问题列表</h2><h3 id="伪类-active-生效"><a href="#伪类-active-生效" class="headerlink" title="伪类 :active 生效"></a>伪类 :active 生效</h3><p>要CSS伪类 <code>:active</code> 生效，只需要给 document 绑定 <code>touchstart</code> 或 <code>touchend</code> 事件</p>
<pre><code>&lt;style&gt;
a {
  color: #000;
}
a:active {
  color: #fff;
}
&lt;/style&gt;
&lt;a herf=foo &gt;bar&lt;/a&gt;
&lt;script&gt;
  document.addEventListener(&apos;touchstart&apos;,function(){},false);
&lt;/script&gt;
</code></pre><h3 id="消除-transition-闪屏"><a href="#消除-transition-闪屏" class="headerlink" title="消除 transition 闪屏"></a>消除 transition 闪屏</h3><p>两个方法</p>
<a id="more"></a>
<pre><code>-webkit-transform-style: preserve-3d;
/*设置内嵌的元素在 3D 空间如何呈现：保留 3D*/
-webkit-backface-visibility: hidden;
/*（设置进行转换的元素的背面在面对用户时是否可见：隐藏）*/
</code></pre><h3 id="消除-IE10-里面的那个叉号"><a href="#消除-IE10-里面的那个叉号" class="headerlink" title="消除 IE10 里面的那个叉号"></a>消除 IE10 里面的那个叉号</h3><pre><code>input:-ms-clear{display:none;}
</code></pre><p>来源出处：<a href="http://msdn.microsoft.com/en-us/library/windows/apps/hh767361.aspx" title="article4" target="_blank" rel="external">http://msdn.microsoft.com/en-us/library/windows/apps/hh767361.aspx</a><br>​    </p>
<p>###关于 iOS 与 OS X 端字体的优化(横竖屏会出现字体加粗不一致等)<br>iOS 浏览器横屏时会重置字体大小，设置 <code>text-size-adjust</code> 为 <code>none</code> 可以解决 iOS 上的问题，但桌面版 Safari 的字体缩放功能会失效，因此最佳方案是将 <code>text-size-adjust</code> 为 <code>100%</code> 。</p>
<pre><code>-webkit-text-size-adjust: 100%;
-ms-text-size-adjust: 100%;
text-size-adjust: 100%;
</code></pre><h3 id="JS-事件相关"><a href="#JS-事件相关" class="headerlink" title="JS 事件相关"></a>JS 事件相关</h3><p>click 事件普遍 300ms 的延迟<br>在手机上绑定 click 事件，会使得操作有 300ms 的延迟，体验并不是很好。<br>开发者大多数会使用封装的 tap 事件来代替 click 事件，所谓的 tap 事件由 touchstart 事件 + touchmove 判断 + touchend 事件封装组成</p>
<h3 id="iOS-点击会慢-300ms-问题"><a href="#iOS-点击会慢-300ms-问题" class="headerlink" title="iOS 点击会慢 300ms 问题"></a>iOS 点击会慢 300ms 问题</h3><p> <a href="https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE" title="article5" target="_blank" rel="external">https://developers.google.com/mobile/articles/fast_buttons?hl=de-DE</a><br> <a href="http://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari" title="article5" target="_blank" rel="external">http://stackoverflow.com/questions/12238587/eliminate-300ms-delay-on-click-events-in-mobile-safari</a></p>
<p>使用 CSS3 动画的时尽量利用3D加速，从而使得动画变得流畅。动画过程中的动画闪白可以通过 backface-visibility 隐藏。</p>
<pre><code>-webkit-transform-style: preserve-3d;
-webkit-backface-visibility: hidden;
</code></pre><h3 id="IE10-的特殊鼠标事件"><a href="#IE10-的特殊鼠标事件" class="headerlink" title="IE10 的特殊鼠标事件"></a>IE10 的特殊鼠标事件</h3><p><a href="http://www.mansonchor.com/blog/blog_detail_73.html" title="article5" target="_blank" rel="external">http://www.mansonchor.com/blog/blog_detail_73.html</a></p>
<h3 id="不让-Android-手机识别邮箱"><a href="#不让-Android-手机识别邮箱" class="headerlink" title="不让 Android 手机识别邮箱"></a>不让 Android 手机识别邮箱</h3><pre><code>&lt;meta content=&quot;email=no&quot; name=&quot;format-detection&quot; /&gt;
</code></pre><h3 id="禁止-iOS-识别长串数字为电话"><a href="#禁止-iOS-识别长串数字为电话" class="headerlink" title="禁止 iOS 识别长串数字为电话"></a>禁止 iOS 识别长串数字为电话</h3><pre><code>&lt;meta content=&quot;telephone=no&quot; name=&quot;format-detection&quot; /&gt;
</code></pre><h3 id="禁止-iOS-弹出各种操作窗口"><a href="#禁止-iOS-弹出各种操作窗口" class="headerlink" title="禁止 iOS 弹出各种操作窗口"></a>禁止 iOS 弹出各种操作窗口</h3><pre><code>-webkit-touch-callout:none
</code></pre><h3 id="禁止用户选中文字"><a href="#禁止用户选中文字" class="headerlink" title="禁止用户选中文字"></a>禁止用户选中文字</h3><pre><code>-webkit-user-select:none
</code></pre><h3 id="动画效果中，使用-translate-比使用定位性能高"><a href="#动画效果中，使用-translate-比使用定位性能高" class="headerlink" title="动画效果中，使用 translate 比使用定位性能高"></a>动画效果中，使用 translate 比使用定位性能高</h3><p><a href="http://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/" target="_blank" rel="external">http://paulirish.com/2012/why-moving-elements-with-translate-is-better-than-posabs-topleft/</a></p>
<h3 id="获取滚动条"><a href="#获取滚动条" class="headerlink" title="获取滚动条"></a>获取滚动条</h3><pre><code>window.scrollY
window.scrollX
</code></pre><p> 比如要绑定一个 touchmove 的事件，正常的情况下类似这样(来自呼吸二氧化碳)</p>
<pre><code>$(&apos;div&apos;).on(&apos;touchmove&apos;, function(){
   //.….code
});
</code></pre><p>而如果中间的 code 需要处理的东西多的话，FPS 就会下降影响程序顺滑度，而如果改成这样</p>
<pre><code>$(&apos;div&apos;).on(&apos;touchmove&apos;, function(){
   setTimeout(function(){
     //.….code
   },0);
});
</code></pre><p>把代码放在 setTimeout 中，会发现程序变快.</p>
<h3 id="关于-iOS-系统中，WebAPP-启动图片在不同设备上的适应性设置"><a href="#关于-iOS-系统中，WebAPP-启动图片在不同设备上的适应性设置" class="headerlink" title="关于 iOS 系统中，WebAPP 启动图片在不同设备上的适应性设置"></a>关于 iOS 系统中，WebAPP 启动图片在不同设备上的适应性设置</h3><p><a href="http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893" target="_blank" rel="external">http://stackoverflow.com/questions/4687698/mulitple-apple-touch-startup-image-resolutions-for-ios-web-app-esp-for-ipad/10011893#10011893</a></p>
<h3 id="关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格-焦点科技葛亮"><a href="#关于-iOS-系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格-焦点科技葛亮" class="headerlink" title="关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格(焦点科技葛亮)"></a>关于 iOS 系统中，中文输入法输入英文时，字母之间可能会出现一个六分之一空格(焦点科技葛亮)</h3><p>可以通过正则去掉 </p>
<pre><code>this.value = this.value.replace(/\u2006/g, &apos;&apos;);
</code></pre><h3 id="关于-Android-WebView中，input-元素输入时出现的怪异情况"><a href="#关于-Android-WebView中，input-元素输入时出现的怪异情况" class="headerlink" title="关于 Android WebView中，input 元素输入时出现的怪异情况"></a>关于 Android WebView中，input 元素输入时出现的怪异情况</h3><p>见图<br><img src="http://cdn.bielousov.com/wp-content/uploads/2012/08/android-input-label-text-issue.png" alt="怪异图"></p>
<p>Android web视图，例如在 HTC EVO 和三星的 Galaxy Nexus 中，文本输入框在输入时表现的就像占位符。情况为一个类似水印的东西在用户输入区域，一旦用户开始输入便会消失(见图片)。</p>
<p>在 Android 的默认样式下当输入框获得焦点后，若存在一个绝对定位或者fixed的元素，布局会被破坏，其他元素与系统输入字段会发生重叠(如搜索图标将消失为搜索字段)，可以观察到布局与原始输入字段有偏差(见截图)。<br>这是一个相当复杂的问题，以下简单布局可以重现这个问题:</p>
<pre><code>&lt;label for=&quot;phone&quot;&gt;Phone: *&lt;/label&gt;
&lt;input type=&quot;tel&quot; name=&quot;phone&quot; id=&quot;phone&quot; minlength=&quot;10&quot; maxlength=&quot;10&quot; inputmode=&quot;latin digits&quot; required=&quot;required&quot; /&gt;
</code></pre><p>解决方法</p>
<pre><code>-webkit-user-modify: read-write-plaintext-only
</code></pre><p>详细参考：<a href="http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/" target="_blank" rel="external">http://www.bielousov.com/2012/android-label-text-appears-in-input-field-as-a-placeholder/</a><br>注意，该属性会导致中文不能输入词组，只能单个字。感谢鬼哥与飞（游勇飞）贡献此问题与解决方案</p>
<h3 id="JS-动态生成的-select-下拉菜单在-Android2-x-版本的默认浏览器里不起作用"><a href="#JS-动态生成的-select-下拉菜单在-Android2-x-版本的默认浏览器里不起作用" class="headerlink" title="JS 动态生成的 select 下拉菜单在 Android2.x 版本的默认浏览器里不起作用"></a>JS 动态生成的 select 下拉菜单在 Android2.x 版本的默认浏览器里不起作用</h3><p>解决方法删除了 <code>overflow-x:hidden;</code> 然后在JS生成下来菜单之后 focus 聚焦，这两步操作之后解决了问题。(来自岛都-小Qi)</p>
<p>参考：<a href="http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator" target="_blank" rel="external">http://stackoverflow.com/questions/4697908/html-select-control-disabled-in-android-webview-in-emulator</a></p>
<p>###移动端 HTML5 audio autoplay 失效问题</p>
<p>这个不是 BUG，由于自动播放网页中的音频或视频，会给用户带来一些困扰或者不必要的流量消耗，所以苹果系统和安卓系统通常都会禁止自动播放和使用 JS 的触发播放，必须由用户来触发才可以播放。</p>
<p>解决方法思路：先通过用户 touchstart 触碰，触发播放并暂停（音频开始加载，后面用 JS 再操作就没问题了）。</p>
<p>解决代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">document.addEventListener(&apos;touchstart&apos;, function () &#123;</div><div class="line">    document.getElementsByTagName(&apos;audio&apos;)[0].play();</div><div class="line">    document.getElementsByTagName(&apos;audio&apos;)[0].pause();</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>方案出处：<a href="http://stackoverflow.com/questions/17350924/iphone-html5-audio-tag-not-working" target="_blank" rel="external">http://stackoverflow.com/questions/17350924/iphone-html5-audio-tag-not-working</a></p>
<p>扩展阅读：<a href="http://yujiangshui.com/recent-projects-review/#toc-7" target="_blank" rel="external">http://yujiangshui.com/recent-projects-review/#toc-7</a></p>
<p>###移动端 HTML5 input date 不支持 placeholder 问题</p>
<p>input type date 的 placeholder 支持性有一定问题，因为浏览器会针对此类型 input 增加 datepicker 模块，看上去没那么必要支持 placeholder。</p>
<p>对 input type date 使用 placeholder 的目的是为了让用户更准确的输入日期格式，iOS 上会有 datepicker 不会显示 placeholder 文字，但是为了统一表单外观，往往需要显示。Android 部分机型没有 datepicker 也不会显示 placeholder 文字。</p>
<p>简单的进行了测试：</p>
<p>桌面端（Mac）</p>
<ul>
<li>Safari 不支持 datepicker，placeholder 正常显示。</li>
<li>Firefox 不支持 datepicker，placeholder 正常显示。</li>
<li>Chrome 支持 datepicker，显示 年、月、日 格式，忽略 placeholder。</li>
</ul>
<p>移动端</p>
<ul>
<li>iPhone5 iOS7 有 datepicker 功能，但是不显示 placeholder。</li>
<li>Andorid 4.0.4 无 datepicker 功能，不显示 placeholder</li>
</ul>
<p>问题解决方法：</p>
<p>先使其 type 为 text，此时支持 placeholder，当触摸或者聚焦的时候，使用 JS 切换使其触发 datepicker 功能。</p>
<pre><code>&lt;input placeholder=&quot;Date&quot; class=&quot;textbox-n&quot; type=&quot;text&quot; onfocus=&quot;(this.type=&apos;date&apos;)&quot;  id=&quot;date&quot;&gt; 
</code></pre><p>方案出处：<a href="http://stackoverflow.com/questions/20321202/not-showing-place-holder-for-input-type-date-field-ios-phonegap-app" target="_blank" rel="external">http://stackoverflow.com/questions/20321202/not-showing-place-holder-for-input-type-date-field-ios-phonegap-app</a></p>
<p>###IOS Safari  支持localstorage但是setItem异常（QUOTA_EXCEEDED_ERR:DOM Exception 22）</p>
<pre><code>平台：IOS8.1
browser：Safari600.1.4
</code></pre><p> 问题源自于项目需要在浏览器中遮罩提示,点击关闭状态存储在localstorage中。Safari浏览器关闭后刷新页面层依旧存在<br> <a href="http://stackoverflow.com/questions/14555347/html5-localstorage-error-with-safari-quota-exceeded-err-dom-exception-22-an" target="_blank" rel="external">bug issue</a><br>简单的存储状态可以使用cookie的方式替代。</p>
<p>###Chrome 地址栏自动隐藏交互行为对于fixed 顶部的元素遮挡</p>
<pre><code>系统：IOS8.1
浏览器：Chrome 26.0.1410.53
</code></pre><p>  描述信息：页面包含fixed顶部的tip element，当页面向下滑动的时候Chrome地址栏自动隐藏，当向上滑动的时候地址栏自动出现。这种交互行为本身的好处会增大用户可视、交互区域。但是在Chrome 26这个版本这个浏览器UI布局使用adjustPan的方式，以至于向上滑动以后fixed的元素没有被自动向下移动（没有重绘）。</p>
<p><a href="https://code.google.com/p/chromium/issues/detail?id=288747" target="_blank" rel="external">bug fixed</a><br><a href="http://stackoverflow.com/questions/11258877/fixed-element-disappears-in-chrome" target="_blank" rel="external">解决办法在这里</a></p>
<p>###Android平台遮罩层下的input、select、a等元素可以被点击和focus(点击穿透)</p>
<p>  问题发现于三星手机，这个在特定需求下才会有，因此如果没有类似问题的可以不看。首先需求是浮层操作，在三星上被遮罩的元素依然可以获取focus、click、change. <a href="https://code.google.com/p/android/issues/detail?id=6721" target="_blank" rel="external">bug issue</a> ，在查看bug报告list以后，找到了两种解决方案，第一是通过层显示以后加入对应的class名控制，第二是通过将可获取焦点元素加入的disabled属性，也可以利用属性加dom锁定的方式（disabled的一种变换方式）</p>
<p>###部分机型存在type为search的input，自带close按钮样式修改方法</p>
<p>  有些机型的搜索input控件会自带close按钮（一个伪元素），而通常为了兼容所有浏览器，我们会自己实现一个，此时去掉原生close按钮的方法为</p>
<pre><code>#Search::-webkit-search-cancel-button{
    display: none;    
}
</code></pre><p>  如果想使用原生close按钮，又想使其符合设计风格，可以对这个伪元素的样式进行修改。</p>
<p>###唤起select的option展开<br>zepto方式:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(sltElement).trrgger(&quot;mousedown&quot;);</div></pre></td></tr></table></figure>
<p>原生js方式:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">function showDropdown(sltElement) &#123;</div><div class="line">    var event;</div><div class="line">    event = document.createEvent(&apos;MouseEvents&apos;);</div><div class="line">    event.initMouseEvent(&apos;mousedown&apos;, true, true, window);</div><div class="line">    sltElement.dispatchEvent(event);</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p>
<p>来自<strong>Mars</strong></p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;问题列表&quot;&gt;&lt;a href=&quot;#问题列表&quot; class=&quot;headerlink&quot; title=&quot;问题列表&quot;&gt;&lt;/a&gt;问题列表&lt;/h2&gt;&lt;h3 id=&quot;伪类-active-生效&quot;&gt;&lt;a href=&quot;#伪类-active-生效&quot; class=&quot;headerlink&quot; title=&quot;伪类 :active 生效&quot;&gt;&lt;/a&gt;伪类 :active 生效&lt;/h3&gt;&lt;p&gt;要CSS伪类 &lt;code&gt;:active&lt;/code&gt; 生效，只需要给 document 绑定 &lt;code&gt;touchstart&lt;/code&gt; 或 &lt;code&gt;touchend&lt;/code&gt; 事件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;style&amp;gt;
a {
  color: #000;
}
a:active {
  color: #fff;
}
&amp;lt;/style&amp;gt;
&amp;lt;a herf=foo &amp;gt;bar&amp;lt;/a&amp;gt;
&amp;lt;script&amp;gt;
  document.addEventListener(&amp;apos;touchstart&amp;apos;,function(){},false);
&amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&quot;消除-transition-闪屏&quot;&gt;&lt;a href=&quot;#消除-transition-闪屏&quot; class=&quot;headerlink&quot; title=&quot;消除 transition 闪屏&quot;&gt;&lt;/a&gt;消除 transition 闪屏&lt;/h3&gt;&lt;p&gt;两个方法&lt;/p&gt;
    
    </summary>
    
    
      <category term="Hybrid" scheme="https://wilddylan.github.io/tags/Hybrid/"/>
    
  </entry>
  
  <entry>
    <title>SwiftTips（一）</title>
    <link href="https://wilddylan.github.io/2016/11/21/SwiftTips%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/11/21/SwiftTips（一）/</id>
    <published>2016-11-21T09:22:15.000Z</published>
    <updated>2017-02-04T09:01:45.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>最新1年的Swift小Tip与一些建议阅读源码或者使用到项目中的开源库</p>
</blockquote>
<a id="more"></a>
<h6 id="开源项目"><a href="#开源项目" class="headerlink" title="开源项目"></a>开源项目</h6><ul>
<li>模型转为JSON <a href="https://github.com/WildDylan/Wrap" target="_blank" rel="external">https://github.com/WildDylan/Wrap</a></li>
<li>OCR <a href="https://github.com/garnele007/SwiftOCR" target="_blank" rel="external">https://github.com/garnele007/SwiftOCR</a></li>
<li>Machine Learning <a href="https://github.com/collinhundley/Swift-AI" target="_blank" rel="external">https://github.com/collinhundley/Swift-AI</a></li>
<li>代码规范约束 <a href="https://github.com/realm/SwiftLint" target="_blank" rel="external">https://github.com/realm/SwiftLint</a></li>
<li>加解密  <a href="https://github.com/krzyzanowskim/CryptoSwift" target="_blank" rel="external">https://github.com/krzyzanowskim/CryptoSwift</a></li>
<li>日历 <a href="https://github.com/patchthecode/JTAppleCalendar" target="_blank" rel="external">https://github.com/patchthecode/JTAppleCalendar</a></li>
<li>引导页 <a href="https://github.com/Ramotion/paper-onboarding" target="_blank" rel="external">https://github.com/Ramotion/paper-onboarding</a></li>
<li>头像显示  <a href="https://github.com/BeauNouvelle/FaceAware" target="_blank" rel="external">https://github.com/BeauNouvelle/FaceAware</a></li>
<li>hexColor <a href="https://github.com/hyperoslo/Hue" target="_blank" rel="external">https://github.com/hyperoslo/Hue</a></li>
<li>颜色扩展 <a href="https://github.com/ViccAlexander/Chameleon" target="_blank" rel="external">https://github.com/ViccAlexander/Chameleon</a></li>
<li>用户使用引导 <a href="https://github.com/ephread/Instructions" target="_blank" rel="external">https://github.com/ephread/Instructions</a></li>
<li>segmentControl <a href="https://github.com/twicketapp/TwicketSegmentedControl" target="_blank" rel="external">https://github.com/twicketapp/TwicketSegmentedControl</a></li>
<li>安卓风 <a href="https://github.com/CosmicMind/Material" target="_blank" rel="external">https://github.com/CosmicMind/Material</a></li>
<li>Spring <a href="https://github.com/MengTo/Spring" target="_blank" rel="external">https://github.com/MengTo/Spring</a></li>
<li>JSON <a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="external">https://github.com/SwiftyJSON/SwiftyJSON</a></li>
<li>GCD <a href="https://github.com/duemunk/Async" target="_blank" rel="external">https://github.com/duemunk/Async</a></li>
<li>Location <a href="https://github.com/varshylmobile/LocationManager" target="_blank" rel="external">https://github.com/varshylmobile/LocationManager</a></li>
<li>Auto Check Update <a href="https://github.com/ArtSabintsev/Siren" target="_blank" rel="external">https://github.com/ArtSabintsev/Siren</a></li>
<li>ASDK <a href="https://github.com/facebook/AsyncDisplayKit" target="_blank" rel="external">https://github.com/facebook/AsyncDisplayKit</a></li>
<li>Layout <a href="https://github.com/robb/Cartography" target="_blank" rel="external">https://github.com/robb/Cartography</a></li>
<li>Bind <a href="https://github.com/ReactiveCocoa/ReactiveCocoa" target="_blank" rel="external">https://github.com/ReactiveCocoa/ReactiveCocoa</a></li>
<li>URL Route <a href="https://github.com/devxoul/URLNavigator" target="_blank" rel="external">https://github.com/devxoul/URLNavigator</a></li>
<li>$扩展 <a href="https://github.com/ankurp/Dollar" target="_blank" rel="external">https://github.com/ankurp/Dollar</a></li>
<li>Path  <a href="https://github.com/kylef/PathKit" target="_blank" rel="external">https://github.com/kylef/PathKit</a></li>
<li>Logger <a href="https://github.com/DaveWoodCom/XCGLogger" target="_blank" rel="external">https://github.com/DaveWoodCom/XCGLogger</a></li>
<li>SQLite3 <a href="https://github.com/stephencelis/SQLite.swift" target="_blank" rel="external">https://github.com/stephencelis/SQLite.swift</a></li>
<li>WS <a href="https://github.com/daltoniam/starscream" target="_blank" rel="external">https://github.com/daltoniam/starscream</a></li>
<li>Image more Color  <a href="https://github.com/indragiek/DominantColor" target="_blank" rel="external">https://github.com/indragiek/DominantColor</a></li>
<li>Gif <a href="https://github.com/kaishin/gifu" target="_blank" rel="external">https://github.com/kaishin/gifu</a></li>
<li>地图路线规划 <a href="https://github.com/varshylmobile/MapManager" target="_blank" rel="external">https://github.com/varshylmobile/MapManager</a></li>
<li>提示框！<a href="https://github.com/SwiftKickMobile/SwiftMessages" target="_blank" rel="external">https://github.com/SwiftKickMobile/SwiftMessages</a></li>
</ul>
<h6 id="关于Swift下JSON解析库的分析图"><a href="#关于Swift下JSON解析库的分析图" class="headerlink" title="关于Swift下JSON解析库的分析图"></a>关于Swift下JSON解析库的分析图</h6><p><img src="http://ocef2grmj.bkt.clouddn.com/performance.png" alt=""></p>
<h6 id="如何像安卓一样方便的使用R加载资源文件"><a href="#如何像安卓一样方便的使用R加载资源文件" class="headerlink" title="如何像安卓一样方便的使用R加载资源文件"></a>如何像安卓一样方便的使用R加载资源文件</h6><p><a href="https://github.com/mac-cain13/R.swift" target="_blank" rel="external">https://github.com/mac-cain13/R.swift</a></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/Pasted%20Graphic.tiff" alt=""></p>
<h6 id="做好代码规范从编写开始-swiftlint"><a href="#做好代码规范从编写开始-swiftlint" class="headerlink" title="做好代码规范从编写开始-swiftlint"></a>做好代码规范从编写开始-swiftlint</h6><p>swiftlint autocorrect &lt;项目在Github中搜索即可&gt;</p>
<h6 id="Swift-zip"><a href="#Swift-zip" class="headerlink" title="Swift zip"></a>Swift zip</h6><p>zip(arr1, arr2) 输出一个 元祖数组 [(arr1[0], arr2[0]), (…), (…)]</p>
<h6 id="添加弃用信息"><a href="#添加弃用信息" class="headerlink" title="添加弃用信息"></a>添加弃用信息</h6><p>@available(*, deprecated, message: “no longer available …”)</p>
<h6 id="获取系统信息，诸如版本之类的-NSProcessInfo"><a href="#获取系统信息，诸如版本之类的-NSProcessInfo" class="headerlink" title="获取系统信息，诸如版本之类的-NSProcessInfo"></a>获取系统信息，诸如版本之类的-NSProcessInfo</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> os = <span class="type">ProcessInfo</span>().operatingSystemVersion</div><div class="line"><span class="keyword">let</span> info = <span class="string">"\(os.majorVersion).\(os.minorVersion).\(os.patchVersion)"</span></div></pre></td></tr></table></figure>
<p>并且这样判断版本</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> #available(iOS <span class="number">10.0</span>, *) &#123;</div><div class="line">      <span class="type">Push</span>.registeNotification()</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">Pusher</span>.registeNotification()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="使用discardableResult设置可以忽略返回值"><a href="#使用discardableResult设置可以忽略返回值" class="headerlink" title="使用discardableResult设置可以忽略返回值"></a>使用<code>discardableResult</code>设置可以忽略返回值</h6><figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@discardableResult</div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">data</span><span class="params">(to identifier: String, with parameter: Any?, <span class="number">_</span> handler: PNRouteCallBack?)</span></span> -&gt;<span class="type">Bool</span>&#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> hand = dataing[identifier] <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    hand(parameter, handler)</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="更加清晰的Git工作流程"><a href="#更加清晰的Git工作流程" class="headerlink" title="更加清晰的Git工作流程"></a>更加清晰的Git工作流程</h6><p>首先应当创建新的分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b dylan</div></pre></td></tr></table></figure>
<p>在结束自己的工作之后，提交到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git add .</div><div class="line">git commit -m “Fixed some quesitons“</div></pre></td></tr></table></figure>
<p>如果需要提交多行文本，使用</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git commit -m &apos;</div></pre></td></tr></table></figure>
<p>回车后即可输入，结束使用<code>&#39;</code>。接下来获取最新的主分支动态，并合并到我们当前已经修改的分支上</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git rebase origin/master</div></pre></td></tr></table></figure>
<p>做一些操作，比如说合并提交信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase -i origin/master</div></pre></td></tr></table></figure>
<p>提交到自己的分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin dylan</div></pre></td></tr></table></figure>
<p>发起pull request，由负责人进行代码review：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout 提交者的分支</div><div class="line">git diff 提交者/master..HEAD</div></pre></td></tr></table></figure>
<p>合并代码到主开发分支上：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git fetch origin</div><div class="line">git rebase -i origin/master</div></pre></td></tr></table></figure>
<p>推送:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git push —force-with-lease origin master</div><div class="line">git log origin/master..&lt;branch-name&gt;</div><div class="line">git diff --stat origin/master</div><div class="line">git checkout master</div><div class="line">git merge &lt;branch-name&gt; --ff-only</div><div class="line">git push</div></pre></td></tr></table></figure>
<p>删除开发分支:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git push origin --delete &lt;branch-name&gt;</div><div class="line">git branch --delete &lt;branch-name&gt;</div></pre></td></tr></table></figure>
<p>这样一次开发的Git操作就完美的结束了，另外附上一些常用的git命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git checkout . #本地所有修改的。没有的提交的，都返回到原来的状态</div><div class="line">git stash #把所有没有提交的修改暂存到stash里面。可用git stash pop回复。</div><div class="line">git reset --hard HASH #返回到某个节点，不保留修改。</div><div class="line">git reset --soft HASH #返回到某个节点。保留修改</div><div class="line">git push origin master -f 强制覆盖</div></pre></td></tr></table></figure>
<h6 id="最近的看到的iOS版本占比图"><a href="#最近的看到的iOS版本占比图" class="headerlink" title="最近的看到的iOS版本占比图"></a>最近的看到的iOS版本占比图</h6><p><img src="http://ocef2grmj.bkt.clouddn.com/ios10adoptionratestwoweeks-800x407.jpg" alt=""></p>
<p>所以强烈建议大家开始从iOS8.0进行系统支撑，这并没有问题。</p>
<h6 id="常用语"><a href="#常用语" class="headerlink" title="常用语"></a>常用语</h6><p>在Git Hub你提交给其他开源库的pull request被merge之后，请对项目拥有者说：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Pure awesomeness, thanks a lot!</div></pre></td></tr></table></figure>
<h6 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">什么叫价值？</div><div class="line"></div><div class="line">同是两根竹子，</div><div class="line">一支做成了笛子，</div><div class="line">一支做成了晾衣杠。</div><div class="line"></div><div class="line">晾衣杠不服气的问笛子：</div><div class="line">“我们都是同一片山上的竹子，</div><div class="line">凭什么我天天日晒雨淋，不值一文，</div><div class="line">而你却价值千金呢？”</div><div class="line"></div><div class="line">笛子：”因为你只挨了一刀，</div><div class="line">而我却经历了千刀万剐，精雕细做。”</div><div class="line">晾衣杠此时沉默了……</div><div class="line"></div><div class="line">人生亦是如此，经得起打磨，</div><div class="line">耐得起寂寞，扛得起责任，</div><div class="line">肩负起使命！人生才会有价值！</div></pre></td></tr></table></figure>
<p>现在碎片化知识已经出现在各个角落，人们对于碎片化知识的汲取到底是对还是错呢？总之我是赞成的，当然我也更赞成如果你有足够的时间，请系统化的了解、深入的了解。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;最新1年的Swift小Tip与一些建议阅读源码或者使用到项目中的开源库&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>如何利用Swift解析MarkDown</title>
    <link href="https://wilddylan.github.io/2016/11/16/%E5%A6%82%E4%BD%95%E5%88%A9%E7%94%A8Swift%E8%A7%A3%E6%9E%90MarkDown/"/>
    <id>https://wilddylan.github.io/2016/11/16/如何利用Swift解析MarkDown/</id>
    <published>2016-11-16T09:17:02.000Z</published>
    <updated>2017-02-04T09:03:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>由于自己的开源项目需要使用MarkDown作为主要的文本语法，本该由iOS小组同学负责的东西由于他有点事情所以就改为由我负责了。由于也是第一次接触在Swift上边解析MarkDown，所以先去了解了一些github上边的开源项目，但是少之又少，而且实现的功能都很简单（大多数都是使用<code>NSAttributeString</code>来实现简单的加粗、倾斜、下划线），并不能达到我所期望的效果（支持90%以上的MarkDown并支持HTML）。</p>
<blockquote>
<p>更新，IBM提供了C库用来<a href="https://github.com/IBM-Swift/Kitura-Markdown/tree/master/Sources/Ccmark" target="_blank" rel="external">解析MardDown到HTML</a> </p>
</blockquote>
<h6 id="如何解决问题"><a href="#如何解决问题" class="headerlink" title="如何解决问题"></a>如何解决问题</h6><p>首先根据经验，我首先想到的是CoreText + Regex。没错，给我一段MarkDown的文本，先用Regex匹配出每一个MarkDown的Element，然后使用CoreText绘制出来，如果是图片则预先占位，表格则细化解析，绘制。尝试着下手之后，发现MarkDown的语法不是一般的多，这样写下去光是解析器我可能要写一个月左右（编码、测试等）。</p>
<a id="more"></a>
<p>于是，抱着比较懒的心态，我想到了我在做PC端的时候用到的<a href="https://github.com/chjj/marked" target="_blank" rel="external">marked.js</a>，是我用来把MarkDown文本转为HTML的，这样一来，客户端的文本解析与预览就可以通过这个工具搞定一大半了，所以接下来的事情就是把marked.js加入到项目中，load并调用方法。既然是与JS交互，相信读者对<code>JavaScriptCore</code>这个库一定不是很陌生。</p>
<h6 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h6><ol>
<li>加载：先把marked.js拖拽到项目中，然后在某文件中引入<code>JavaScriptCore</code>，并加载</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> JavaScriptCore</div><div class="line"></div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> context: <span class="type">JSContext</span> = <span class="type">JSContext</span>()</div><div class="line"><span class="keyword">private</span> <span class="keyword">var</span> marked: <span class="type">JSValue</span>?</div><div class="line"></div><div class="line"><span class="comment">// initialized javascript</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">	<span class="keyword">try</span> <span class="number">_</span> = context.evaluateScript(<span class="type">String</span>(contentsOfFile: 		<span class="type">Bundle</span>.main.path(forResource: <span class="string">"marked"</span>, ofType: <span class="string">"js"</span>)!))</div><div class="line">	marked = context.objectForKeyedSubscript(<span class="string">"marked"</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line">	<span class="built_in">debugPrint</span>(<span class="string">"initialized marked js with error!"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>要注意的是，这里的marked.js文件我们要稍作修改，需要把最外层的function（涵义是定义并马上执行）去掉。</p>
<ol>
<li>调用</li>
</ol>
<p>上边我们通过<code>marked = context.objectForKeyedSubscript(&quot;marked&quot;)</code>这样的方式获得了marked这个方法，紧接着按照官方文档的要求去调用：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">guard</span> <span class="keyword">let</span> value = marked?.call(withArguments: [content]) <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> markedHTML = value.<span class="built_in">toString</span>()</div></pre></td></tr></table></figure>
<p>这样，我们通过<code>marked?.call</code>来调用这个方法，并获得返回的value，将结果<code>toString()</code>。</p>
<p>以上完成的步骤就是将textView输入的文字转为HTML，接下来就是渲染了，很简单，依旧按照PC的思路，MarkDown-HTML的样式使用<a href="https://github.com/sindresorhus/github-markdown-css" target="_blank" rel="external">github-markdown-css</a>，代码高亮使用<a href="https://github.com/isagalaev/highlight.js" target="_blank" rel="external">highlight.js</a>，为了快速，我们将这些css与js资源文件也一并压缩打包到App的bundle中，然后使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">&lt;!DOCTYPE HTML&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"content-type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1, minimal-ui"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">type</span>=<span class="string">"text/css"</span> <span class="attr">href</span>=<span class="string">"github-markdown.css"</span>/&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"libs/highlight.js/9.8.0/styles/color-brewer.min.css"</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></div><div class="line">      .markdown-body &#123;</div><div class="line">        box-sizing: border-box;</div><div class="line">        padding: 10px;</div><div class="line">      &#125;</div><div class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></div><div class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"container"</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">article</span> <span class="attr">class</span>=<span class="string">"markdown-body"</span>&gt;</span></div><div class="line">          [markdown-content-flag]</div><div class="line">        <span class="tag">&lt;/<span class="name">article</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"libs/highlight.js/9.8.0/highlight.min.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">hljs.initHighlightingOnLoad();</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></div><div class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></div></pre></td></tr></table></figure>
<p>读者可能会注意到其中有<code>[markdown-content-flag]</code>这样一个字串，用于我们加载之前替换为MarkDown文本：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">      <span class="keyword">var</span> htmlContent = <span class="keyword">try</span> <span class="type">String</span>(contentsOfFile: <span class="type">Bundle</span>.main.path(forResource: <span class="string">"PNPreview"</span>, ofType: <span class="string">"html"</span>)!)</div><div class="line">      <span class="keyword">let</span> range = htmlContent.range(of: <span class="string">"[markdown-content-flag]"</span>)</div><div class="line">      htmlContent.replaceSubrange(range!, with: <span class="type">HTML</span>)</div><div class="line">      webView.stopLoading()</div><div class="line">      </div><div class="line">      webView.loadHTMLString(htmlContent, baseURL: <span class="literal">nil</span>)</div><div class="line">&#125; <span class="keyword">catch</span> &#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样，展示也就没有问题了，然后大家可以在其中做很多层自定义处理。最终我写了简单的demo用于测试，效果如下：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/mddemo1.png" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/mddemo2.png" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/mddemo3.png" alt=""></p>
<p>这样，编辑器的一大部分就解决掉了。当然这对于用户来讲还不是最好的体验，最好的体验应该是我们一边输入一边看到效果的，这种效果的实现方式依旧可以使用上边的方式来实现。</p>
<p>关于MarkDown-CSS样式以及代码高亮的效果大家可以自由的去寻找。</p>
<p>在客户端工作之外，接触到了其他各个方面的语言确实对自我提升很大， 我这里说的不是你能读懂的的代码多了，而是说解决问题的思路更多了。每一种语言都有自己的独到之处。甚至你可以从一些管理方面的书籍中学习到一些实际的技巧应用到人员的组织、调配，项目的合理安排与规划等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;由于自己的开源项目需要使用MarkDown作为主要的文本语法，本该由iOS小组同学负责的东西由于他有点事情所以就改为由我负责了。由于也是第一次接触在Swift上边解析MarkDown，所以先去了解了一些github上边的开源项目，但是少之又少，而且实现的功能都很简单（大多数都是使用&lt;code&gt;NSAttributeString&lt;/code&gt;来实现简单的加粗、倾斜、下划线），并不能达到我所期望的效果（支持90%以上的MarkDown并支持HTML）。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;更新，IBM提供了C库用来&lt;a href=&quot;https://github.com/IBM-Swift/Kitura-Markdown/tree/master/Sources/Ccmark&quot;&gt;解析MardDown到HTML&lt;/a&gt; &lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;如何解决问题&quot;&gt;&lt;a href=&quot;#如何解决问题&quot; class=&quot;headerlink&quot; title=&quot;如何解决问题&quot;&gt;&lt;/a&gt;如何解决问题&lt;/h6&gt;&lt;p&gt;首先根据经验，我首先想到的是CoreText + Regex。没错，给我一段MarkDown的文本，先用Regex匹配出每一个MarkDown的Element，然后使用CoreText绘制出来，如果是图片则预先占位，表格则细化解析，绘制。尝试着下手之后，发现MarkDown的语法不是一般的多，这样写下去光是解析器我可能要写一个月左右（编码、测试等）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>移动H5前端性能优化注意点</title>
    <link href="https://wilddylan.github.io/2016/11/11/%E7%A7%BB%E5%8A%A8H5%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E6%B3%A8%E6%84%8F%E7%82%B9/"/>
    <id>https://wilddylan.github.io/2016/11/11/移动H5前端性能优化注意点/</id>
    <published>2016-11-11T09:40:13.000Z</published>
    <updated>2017-02-04T09:02:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>希望得到的最好的效果：</p>
<blockquote>
<p>PC优化手段在Mobile侧同样适用</p>
</blockquote>
<ol>
<li>最多三秒钟渲染完成单屏或者使用Loading</li>
<li>基于3G/4G移动网络下，每屏幕资源不超过1024KB</li>
</ol>
<h6 id="加载优化"><a href="#加载优化" class="headerlink" title="加载优化"></a>加载优化</h6><ul>
<li>合并CSS、JavaScript</li>
<li>合并小图片、使用雪碧图</li>
<li>缓存一切可以缓存的资源，部分资源css、js使用<code>src=&quot;abc.css?cacheVersion=1&quot;</code>来控制版本</li>
<li>使用长Cache</li>
<li>压缩HTML、CSS、JS</li>
<li>启用<code>GZip</code></li>
<li>使用首屏加载</li>
</ul>
<a id="more"></a>
<ul>
<li>使用按需加载</li>
<li>使用滚屏加载</li>
<li>增加进度指示器</li>
<li>减少<code>Cookie</code></li>
<li>避免重定向</li>
<li>异步加载第三方资源</li>
</ul>
<h6 id="CSS优化"><a href="#CSS优化" class="headerlink" title="CSS优化"></a>CSS优化</h6><ul>
<li>CSS写在头部，JS写到尾部或者异步</li>
<li>避免图片和<code>iFrame</code>等的SRC为空</li>
<li>尽量避免重设图片大小</li>
<li>图片尽量避免使用<code>DataURL</code></li>
<li>尽量避免在HTML标签中写Style</li>
<li>避免CSS表达式</li>
<li>移除空的CSS规则</li>
<li>正确使用Display的属性</li>
<li>不滥用<code>Float</code></li>
<li>不滥用Web字体</li>
<li>不声明过多的<code>Font-size</code></li>
<li>值为0时候不需要任何单位</li>
<li>标准化各种浏览器的前缀</li>
<li>避免让选择符看起来像正则表达式</li>
</ul>
<h6 id="图片优化"><a href="#图片优化" class="headerlink" title="图片优化"></a>图片优化</h6><ul>
<li>使用 <code>CSS3、SVG、IconFont</code>代替图片</li>
<li>使用Srcset</li>
<li>WebP优于JPG</li>
<li>PNG8优于GIF</li>
<li>首次加载不大于1024KB单页</li>
<li>图片不宽于640</li>
</ul>
<h6 id="脚本优化"><a href="#脚本优化" class="headerlink" title="脚本优化"></a>脚本优化</h6><ul>
<li>减少重绘</li>
<li>缓存Dom选择与计算</li>
<li>缓存列表的长度</li>
<li>尽量使用事件代理，避免批量绑定事件</li>
<li>尽量使用ID选择器</li>
<li>使用touch代理click</li>
</ul>
<h6 id="渲染优化"><a href="#渲染优化" class="headerlink" title="渲染优化"></a>渲染优化</h6><ul>
<li>HTML使用ViewPort</li>
<li>减少Dom节点</li>
<li>尽量使用CSS3动画</li>
<li>合理使用<code>requestAnimationFrame</code>动画代替setTimeout</li>
<li>适当使用Canvas动画</li>
<li><code>touchmove，scroll</code>事件会导致多次渲染</li>
<li>使用 <code>CSS3-transitions、CSS3-3D、Opacity、Canvas、WebGL、Video</code>来触发GPU渲染</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;希望得到的最好的效果：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;PC优化手段在Mobile侧同样适用&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;最多三秒钟渲染完成单屏或者使用Loading&lt;/li&gt;
&lt;li&gt;基于3G/4G移动网络下，每屏幕资源不超过1024KB&lt;/li&gt;
&lt;/ol&gt;
&lt;h6 id=&quot;加载优化&quot;&gt;&lt;a href=&quot;#加载优化&quot; class=&quot;headerlink&quot; title=&quot;加载优化&quot;&gt;&lt;/a&gt;加载优化&lt;/h6&gt;&lt;ul&gt;
&lt;li&gt;合并CSS、JavaScript&lt;/li&gt;
&lt;li&gt;合并小图片、使用雪碧图&lt;/li&gt;
&lt;li&gt;缓存一切可以缓存的资源，部分资源css、js使用&lt;code&gt;src=&amp;quot;abc.css?cacheVersion=1&amp;quot;&lt;/code&gt;来控制版本&lt;/li&gt;
&lt;li&gt;使用长Cache&lt;/li&gt;
&lt;li&gt;压缩HTML、CSS、JS&lt;/li&gt;
&lt;li&gt;启用&lt;code&gt;GZip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;使用首屏加载&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="HTML5" scheme="https://wilddylan.github.io/tags/HTML5/"/>
    
  </entry>
  
  <entry>
    <title>如何迈出第四步（数据展示）</title>
    <link href="https://wilddylan.github.io/2016/10/24/%E5%A6%82%E4%BD%95%E8%BF%88%E5%87%BA%E7%AC%AC%E5%9B%9B%E6%AD%A5%EF%BC%88%E6%95%B0%E6%8D%AE%E5%B1%95%E7%A4%BA%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/24/如何迈出第四步（数据展示）/</id>
    <published>2016-10-24T01:22:32.000Z</published>
    <updated>2017-02-04T09:02:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>数据的获取与展示是每个App必不可少的功能，最常见的就是列表（iOS的TableView，Android的ListView）。在RN中当然也有ListView，第四步将在第三步建立好衔接的基础下，完成2个列表视图的构建，并加入网络请求知识（也就有下拉刷新了）。首先，我们去寻找一个接口，用以获取数据。这里为了方便直接使用聚合，我这里是找了一个微信文章推荐的接口：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">http://v.juhe.cn/weixin/query?pno=1&amp;ps=20&amp;key=1cb0962fb0fb73dae41d96e88733ac96</div></pre></td></tr></table></figure>
<p>参数：</p>
<ol>
<li>pno：页码</li>
<li>ps：每页内容个数</li>
<li>key：我的key，上边的可以直接拿去使用</li>
</ol>
<p>接下来继续打开项目，进行编码，首先我们需要的是获取数据进行展示，在<code>News.js</code>中。</p>
<a id="more"></a>
<p>在使用<code>ListView</code>的时候，也需要数据源，并且我们还想加一个下拉刷新，我们的数据格式是这样的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">						   <span class="attr">"firstImg"</span>:<span class="string">"http:\/\/zxpic.gtimg.com\/infonew\/0\/wechat_pics_-8774101.jpg\/640"</span>,</div><div class="line">  <span class="attr">"id"</span>:<span class="string">"wechat_20151202064749"</span>,</div><div class="line">  <span class="attr">"source"</span>:<span class="string">"果果帮"</span>,</div><div class="line">  <span class="attr">"title"</span>:<span class="string">"笑死了,哈哈小伙子你很有前途"</span>,</div><div class="line">  <span class="attr">"url"</span>:<span class="string">"http:\/\/v.juhe.cn\/weixin\/redirect?wid=wechat_20151202064749"</span>,</div><div class="line">  <span class="attr">"mark"</span>:<span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们先来尝试着获取数据，使用fetch：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">fetch(<span class="string">'http://v.juhe.cn/weixin/query?pno=1&amp;ps=50&amp;key=1cb0962fb0fb73dae41d96e88733ac96'</span>)</div></pre></td></tr></table></figure>
<p>然后我们尝试着把数据渲染上去（等下的解释我都写到代码注释里）：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/NewsSucceed.png" alt=""></p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; View, Text, ListView, RefreshControl, TouchableOpacity, StyleSheet, Image, Dimensions &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene, Actions, ActionConst &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props)&#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    </div><div class="line">    <span class="comment">// 每一个ListView都需要一个数据源，称为`DataSource`。rowHasChanged用来比较前后的数据是否相同，相同则不重新渲染。</span></div><div class="line">    <span class="keyword">this</span>.ds = <span class="keyword">new</span> ListView.DataSource(&#123;<span class="attr">rowHasChanged</span>: <span class="function">(<span class="params">r1, r2</span>) =&gt;</span> r1.url !== r2.url &#125;);</div><div class="line">    <span class="comment">// 先初始化一个空的数组，供存放列表数据</span></div><div class="line">    <span class="keyword">this</span>._data = [];</div><div class="line">    <span class="comment">// 可变状态</span></div><div class="line">    <span class="keyword">this</span>.state = &#123;</div><div class="line">      <span class="comment">// dataSource是ListView显示的一个必须属性，cloneWithRows用于传入数据。</span></div><div class="line">      dataSource: <span class="keyword">this</span>.ds.cloneWithRows(<span class="keyword">this</span>._data),</div><div class="line">      <span class="comment">// 控制下拉刷新的状态</span></div><div class="line">      isRefreshing: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line">    <span class="comment">// 加载第一次数据</span></div><div class="line">    <span class="keyword">this</span>._onRefresh();</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 触发下拉刷新</span></div><div class="line">  _onRefresh = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">    <span class="comment">// 首先更改状态为true</span></div><div class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">isRefreshing</span>: <span class="literal">true</span>&#125;);</div><div class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</div><div class="line">    <span class="comment">// 开启网络请求</span></div><div class="line">    fetch(<span class="string">'http://v.juhe.cn/weixin/query?pno=1&amp;ps=20&amp;key=1cb0962fb0fb73dae41d96e88733ac96'</span>)</div><div class="line">    <span class="comment">// 对数据做处理，这里没有写catch，应该写的，捕获错误</span></div><div class="line">      .then(<span class="function">(<span class="params">response</span>) =&gt;</span> response.json())</div><div class="line">      .then(<span class="function">(<span class="params">responseJson</span>) =&gt;</span> &#123;</div><div class="line">        <span class="comment">// 看一下是否是成功，成功：先清空本地数据，然后将新的数据加入。因为是下拉刷新，上拉加载的功能自行研究。已经很简单了。</span></div><div class="line">        <span class="keyword">if</span> (responseJson.reason == <span class="string">'success'</span>) &#123;</div><div class="line">          <span class="keyword">let</span> data = responseJson.result.list;</div><div class="line">          <span class="keyword">if</span> (data) &#123;</div><div class="line">            <span class="keyword">this</span>._data = data;</div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        self.setState(&#123;</div><div class="line">          <span class="attr">dataSource</span>: <span class="keyword">this</span>.ds.cloneWithRows(<span class="keyword">this</span>._data),</div><div class="line">          <span class="attr">isRefreshing</span>: <span class="literal">false</span></div><div class="line">        &#125;);</div><div class="line">      &#125;)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 用来渲染行的方法，将数据转为Cell进行展示。</span></div><div class="line">  _renderRow (rowData, sectionID, rowID) &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TouchableOpacity</div><div class="line">        onPress=&#123;()=&gt;this._pressRow(rowData)&#125;&gt;</div><div class="line">        &lt;View style=&#123;styles.cell&#125;&gt;</div><div class="line">          &lt;Image</div><div class="line">            style=&#123;styles.cellImage&#125;</div><div class="line">            source=&#123;&#123; uri: rowData.firstImg &#125;&#125; /&gt;</div><div class="line">          &lt;View style=&#123;styles.cellColumn&#125;&gt;</div><div class="line">            &lt;Text style=&#123;styles.cellText&#125; numberOfLines=&#123;0&#125;&gt;&#123;rowData.title&#125;&lt;/Text&gt;</div><div class="line">            &lt;Text style=&#123;styles.cellExtra&#125;&gt;#&#123;rowData.source&#125;&lt;/Text&gt;</div><div class="line">          &lt;/View&gt;</div><div class="line">        &lt;/View&gt;</div><div class="line">      &lt;/TouchableOpacity&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  _pressRow = (rowData) =&gt; &#123;</div><div class="line">    // 在这里实现点击事件</div><div class="line">    console.log(rowData.url);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;&#123; flex: 1, marginTop: 44&#125;&#125;&gt;</div><div class="line">        &lt;ListView</div><div class="line">          dataSource=&#123;this.state.dataSource&#125;</div><div class="line">          renderRow=&#123;this._renderRow.bind(this)&#125;</div><div class="line">          refreshControl=&#123;</div><div class="line">            &lt;RefreshControl</div><div class="line">              refreshing=&#123;this.state.isRefreshing&#125;</div><div class="line">              onRefresh=&#123;this._onRefresh&#125;</div><div class="line">              tintColor="rgb(181, 181, 181)"</div><div class="line">              title="下拉刷新数据"</div><div class="line">              titleColor="rgb(181, 181, 181)"</div><div class="line">              colors=&#123;['rgb(181, 181, 181)', 'rgb(181, 181, 181)', 'rgb(181, 181, 181)']&#125;</div><div class="line">            /&gt;</div><div class="line">          &#125;</div><div class="line">        /&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const contentWidth = Dimensions.get('window').width;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  cell: &#123;</div><div class="line">    padding: 10,</div><div class="line">    paddingTop: 10,</div><div class="line">    paddingBottom: 0,</div><div class="line">    flexDirection: 'row',</div><div class="line">    flex: 1,</div><div class="line">    alignItems: 'center'</div><div class="line">  &#125;,</div><div class="line">  cellImage: &#123;</div><div class="line">    width: 50,</div><div class="line">    height: 50,</div><div class="line">    backgroundColor: 'rgb(221, 221, 221)'</div><div class="line">  &#125;,</div><div class="line">  cellText: &#123;</div><div class="line">    textAlign: 'left',</div><div class="line">    marginLeft: 10,</div><div class="line">    width: contentWidth - 75,</div><div class="line">  &#125;,</div><div class="line">  cellExtra: &#123;</div><div class="line">    fontSize: 10,</div><div class="line">    color: 'rgb(181, 181, 181)',</div><div class="line">    marginLeft: 10</div><div class="line">  &#125;,</div><div class="line">  cellColumn: &#123;</div><div class="line">    flexDirection: 'column'</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default News</div></pre></td></tr></table></figure>
<p>接着我们来实现点击事件的详情跳转（这里有个问题，就是TabBar的隐藏，因为我们是用Router来跳转的，而在实现的时候，TabBar我们是自己写的，然后react-router-flux有个问题就是不能在子路由中打开父路由的界面，暂时提了一个issue，还有一个暂时的解决方案，所有的外层都用router-flux提供。这里先做演示），在<code>NewsPage.js</code>中：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./News'</span></div><div class="line"><span class="keyword">import</span> NewsDetail <span class="keyword">from</span> <span class="string">'./NewsDetail'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;Scene key="_NewsRouter"&gt;</div><div class="line">          &lt;Scene </div><div class="line">            key="News" </div><div class="line">            component=&#123;News&#125; </div><div class="line">            title="News" </div><div class="line">            navigationBarStyle=&#123;&#123; backgroundColor: 'white' &#125;&#125;</div><div class="line">            titleStyle=&#123;&#123;color: '#525354', fontFamily: 'Helvetica', fontSize: 20&#125;&#125; </div><div class="line">            initial=&#123;true&#125; /&gt;</div><div class="line">          &lt;scene key="NewsDetail" component=&#123;NewsDetail&#125; title="NewsDetail" hideTabBar /&gt;</div><div class="line">        &lt;/Scene&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default NewsPage</div></pre></td></tr></table></figure>
<p>然后在点击的时候打开详情：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">_pressRow = <span class="function">(<span class="params">rowData</span>) =&gt;</span> &#123;</div><div class="line">    Actions.NewsDetail(&#123;</div><div class="line">      <span class="attr">url</span>: rowData.url,</div><div class="line">      <span class="attr">type</span>: ActionConst.PUSH</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>个人中心里边就比较简单了，大家自己通过之前的学习去尝试着完成微信个人中心界面的布局。简单的实现几个点击事件。TabBar隐藏的问题需要我们修改视图的层级：把TabBar变为一个Navigation包涵的视图。首先去掉index.ios.js中：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;Scene key=<span class="string">"RootPage"</span> component=&#123;RootPage&#125; title=<span class="string">"News"</span> initial=&#123;<span class="keyword">this</span>.props.launched&#125;/&gt;</div></pre></td></tr></table></figure>
<p>原来的<code>hideNavBar属性</code>，并直接改名为News。然后把News.js中的代码迁移到NewsPage中。最后的<code>index.ios.js</code>是这样的：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> GuidePage <span class="keyword">from</span> <span class="string">'./GuidePage'</span>;</div><div class="line"><span class="keyword">import</span> RootPage <span class="keyword">from</span> <span class="string">'./RootPage'</span>;</div><div class="line"><span class="keyword">import</span> NewsDetail <span class="keyword">from</span> <span class="string">'./News/NewsDetail'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;Scene key="root"&gt;</div><div class="line">          &lt;Scene  key="GuidePage" component=&#123;GuidePage&#125; hideNavBar title="GuidePage" initial=&#123;this.props.launched&#125; /&gt;</div><div class="line">          &lt;Scene key="RootPage" component=&#123;RootPage&#125; title="News" initial=&#123;this.props.launched&#125;/&gt;</div><div class="line">          &lt;scene key="NewsDetail" component=&#123;NewsDetail&#125; title="NewsDetail"/&gt;</div><div class="line">        &lt;/Scene&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>然后就可以解决跳转的问题。但是接着出现了下一个问题，在点击个人中心的之后，发现顶部导航还是News的名称，所以TabBar也要进行处理，由于<code>react-router-flux</code>目前的框架问题（子路由不可以操作父路由，并且想操作Tabbar只能使用router-flux的方式创建TabBar），所以我们直接在index中使用Scene创建我们的Tabbar：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, Text, StyleSheet, View, Image &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> GuidePage <span class="keyword">from</span> <span class="string">'./GuidePage'</span>;</div><div class="line"><span class="keyword">import</span> NewsDetail <span class="keyword">from</span> <span class="string">'./News/NewsDetail'</span>;</div><div class="line"><span class="keyword">import</span> NewsPage <span class="keyword">from</span> <span class="string">'./News/NewsPage'</span>;</div><div class="line"><span class="keyword">import</span> AccountPage <span class="keyword">from</span> <span class="string">'./Account/AccountPage'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">TabIcon</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render()&#123;</div><div class="line">    <span class="keyword">let</span> selectedColor = <span class="string">'#34A3FF'</span>;</div><div class="line">    <span class="keyword">let</span> deSelectedColor = <span class="string">'rgb(181, 181, 181)'</span>;</div><div class="line">    <span class="keyword">let</span> title = <span class="keyword">this</span>.props.title;</div><div class="line">    <span class="keyword">let</span> selected = <span class="keyword">this</span>.props.selected;</div><div class="line">    <span class="keyword">let</span> itemImage = &#123;</div><div class="line">      <span class="string">"新闻"</span>: &#123;</div><div class="line">        <span class="attr">selected</span>: <span class="string">'http://ocef2grmj.bkt.clouddn.com/first_selected.png'</span>,</div><div class="line">        <span class="attr">deSelected</span>: <span class="string">'http://ocef2grmj.bkt.clouddn.com/first_normal.png'</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"我的"</span>: &#123;</div><div class="line">        <span class="attr">selected</span>: <span class="string">'http://ocef2grmj.bkt.clouddn.com/fourth_selected.png'</span>,</div><div class="line">        <span class="attr">deSelected</span>: <span class="string">'http://ocef2grmj.bkt.clouddn.com/fourth_normal.png'</span></div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;View style=&#123;styles.tabBarItem&#125;&gt;</div><div class="line">        &lt;Image source=&#123;&#123; uri: selected? itemImage[title].selected : itemImage[title].deSelected&#125;&#125; style=&#123;styles.tabBarImage&#125;/&gt;</div><div class="line">        &lt;Text style=&#123;[&#123;color: selected ? selectedColor :deSelectedColor&#125;, styles.tabBatText]&#125;&gt;&#123;title&#125;&lt;/Text&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;Router&gt;</div><div class="line">          &lt;Scene  key="GuidePage" component=&#123;GuidePage&#125; hideNavBar title="GuidePage" initial=&#123;this.props.launched&#125; /&gt;</div><div class="line">          &lt;Scene key="main" tabs=&#123;true&#125; style=&#123;styles.tabBarStyle&#125; initial=&#123;true&#125;&gt;</div><div class="line">            &lt;Scene key="NewsModule"  title="新闻" icon=&#123;TabIcon&#125; initial=&#123;true&#125;&gt;</div><div class="line">              &lt;Scene key="News" component=&#123;NewsPage&#125; title="News" /&gt;</div><div class="line">              &lt;Scene key="NewsDetail" component=&#123;NewsDetail&#125; hideTabBar title="NewsDetail"/&gt;</div><div class="line">            &lt;/Scene&gt;</div><div class="line">            &lt;Scene key="AccountModule" title="我的" icon=&#123;TabIcon&#125;&gt;</div><div class="line">              &lt;Scene key="Mine" component=&#123;AccountPage&#125; title="个人中心" /&gt;</div><div class="line">            &lt;/Scene&gt;</div><div class="line">          &lt;/Scene&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  tabBarStyle: &#123;</div><div class="line">    borderTopWidth : .5,</div><div class="line">    borderColor    : '#b7b7b7',</div><div class="line">    backgroundColor: 'white',</div><div class="line">    opacity        : 1</div><div class="line">  &#125;,</div><div class="line">  tabBarItem: &#123;</div><div class="line">    alignItems: 'center'</div><div class="line">  &#125;,</div><div class="line">  tabBatText: &#123;</div><div class="line">    fontSize: 10,</div><div class="line">    marginTop: 4</div><div class="line">  &#125;,</div><div class="line">  tabBarImage: &#123;</div><div class="line">    width: 26,</div><div class="line">    height: 26</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>最终的效果是：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/finishedNews.png" alt=""></p>
<p>跳转到详情的时候会自动的隐藏TabBar，这里还需要一个工作就是把TabBarItem作为我们自己的一个控件，交给大家啦！到此为止，React-Native的上手教程就结束了，希望大家有所收获，进阶的内容一起讨论，我会在一个自己的私有项目中使用React-Native来做一个核心的模块，之后会发布出来。</p>
<p>代码地址依旧不变，以后还会更新呦。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;数据的获取与展示是每个App必不可少的功能，最常见的就是列表（iOS的TableView，Android的ListView）。在RN中当然也有ListView，第四步将在第三步建立好衔接的基础下，完成2个列表视图的构建，并加入网络请求知识（也就有下拉刷新了）。首先，我们去寻找一个接口，用以获取数据。这里为了方便直接使用聚合，我这里是找了一个微信文章推荐的接口：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;http://v.juhe.cn/weixin/query?pno=1&amp;amp;ps=20&amp;amp;key=1cb0962fb0fb73dae41d96e88733ac96&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;参数：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;pno：页码&lt;/li&gt;
&lt;li&gt;ps：每页内容个数&lt;/li&gt;
&lt;li&gt;key：我的key，上边的可以直接拿去使用&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;接下来继续打开项目，进行编码，首先我们需要的是获取数据进行展示，在&lt;code&gt;News.js&lt;/code&gt;中。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="https://wilddylan.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>如何迈出第三步（衔接）</title>
    <link href="https://wilddylan.github.io/2016/10/21/%E5%A6%82%E4%BD%95%E8%BF%88%E5%87%BA%E7%AC%AC%E4%B8%89%E6%AD%A5%EF%BC%88%E8%A1%94%E6%8E%A5%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/21/如何迈出第三步（衔接）/</id>
    <published>2016-10-21T06:21:38.000Z</published>
    <updated>2017-02-04T09:02:50.000Z</updated>
    
    <content type="html"><![CDATA[<p>第二步，我们依旧遗留了一个问题，从引导页进入到程序主界面，打算使用<code>React-Router</code>来解决这个问题。目前我对<code>React-Router</code>也是处于知道但没用过的状态，我们先尝试着寻找资料了解一下这个功能组件（记住<code>React-Router</code>这个名字还是因为我之前使用了很久的<code>vue-router</code>）。来到<a href="https://github.com/ReactTraining/react-router" target="_blank" rel="external">Reacr-Router Github</a>的主页后，阅读了一下大致的介绍，感觉还是只适合Web的React相关的路由操作（小白见解），我们使用另一个：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ npm i react-native-router-flux --save</div></pre></td></tr></table></figure>
<p>并且在使用之前建议大家阅读一下<a href="https://segmentfault.com/a/1190000003503338?_ea=323420" target="_blank" rel="external">这篇文章</a>，接着我们按照<a href="https://github.com/aksonov/react-native-router-flux" target="_blank" rel="external">Github的文档</a>来看下具体该如何操作：</p>
<a id="more"></a>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 首先，引入路由</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div></pre></td></tr></table></figure>
<p>然后，我们先随便写一个程序的主界面<code>RootPage.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;View&gt;</div><div class="line">	<span class="xml"><span class="tag">&lt;<span class="name">Text</span>&gt;</span>Hello main page.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></span></div><div class="line">&lt;<span class="regexp">/View&gt;</span></div></pre></td></tr></table></figure>
<p>然后我们要使用路由做一下界面的跳转之前，我们想一下，引导页只出现一次的，这个问题先留在这里，先去看怎么使用Router，首先改造我们的<code>index.ios.js</code>：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="comment">// 引入Router, Scene</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> GuidePage <span class="keyword">from</span> <span class="string">'./GuidePage'</span>;</div><div class="line"><span class="keyword">import</span> RootPage <span class="keyword">from</span> <span class="string">'./RootPage'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="comment">// 创建路由</span></div><div class="line">      &lt;Router&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"root"</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"guide"</span> <span class="attr">component</span>=<span class="string">&#123;GuidePage&#125;</span> <span class="attr">hideNavBar</span> <span class="attr">title</span>=<span class="string">"GuidePage"</span> <span class="attr">initial</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"root"</span> <span class="attr">component</span>=<span class="string">&#123;RootPage&#125;</span> <span class="attr">title</span>=<span class="string">"RootPage"</span> <span class="attr">initial</span>=<span class="string">&#123;false&#125;/</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Scene</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>先不要问为什么，接着按照git的文档进行操作，在GuidePage中引入：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123; Actions, ActionConst &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div></pre></td></tr></table></figure>
<p>并修改进入按钮点击的事件：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;TouchableOpacity onPress=&#123;() =&gt; &#123;</div><div class="line">    <span class="comment">// 注意这里</span></div><div class="line">    Actions.RootPage(&#123;<span class="attr">type</span>: ActionConst.REPLACE&#125;);</div><div class="line">  &#125;&#125; </div><div class="line">  activeOpacity=&#123;<span class="number">50</span> / <span class="number">100</span>&#125;&gt;</div><div class="line">  ...</div><div class="line">&lt;<span class="regexp">/TouchableOpacity&gt;</span></div></pre></td></tr></table></figure>
<p>然后会发现点击进入按钮之后，界面被主界面替换掉了。现在我们来解释代码：</p>
<p>总共引入了：Router、Scene、Actions、ActionConst4个组件，他们分别的作用是，创建一个路由容器，创建容器内的场景，发起跳转动作，跳转的方式。</p>
<p>所以，这些代码好理解了，我们现在程序入口的时候，创建一个路由：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"root"</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> </span></div><div class="line">            <span class="attr">key</span>=<span class="string">"GuidePage"</span> </div><div class="line">            <span class="attr">component</span>=<span class="string">&#123;GuidePage&#125;</span> </div><div class="line">            <span class="attr">hideNavBar</span> </div><div class="line">            <span class="attr">title</span>=<span class="string">"GuidePage"</span> </div><div class="line">            <span class="attr">initial</span>=<span class="string">&#123;true&#125;</span> </div><div class="line">            /&gt;</div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"RootPage"</span> <span class="attr">component</span>=<span class="string">&#123;RootPage&#125;</span> <span class="attr">title</span>=<span class="string">"RootPage"</span> <span class="attr">initial</span>=<span class="string">&#123;false&#125;/</span>&gt;</span> </div><div class="line">  <span class="tag">&lt;/<span class="name">Scene</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div></pre></td></tr></table></figure>
<p>包含了2个界面（场景），供我们切换，里边是一些配置，都是顾名思义的，所以不做多的解释。我们看到有个<code>initial</code>属性，是用来控制谁是首要的，引导页出现一次，所以我们要根据属性来控制程序进入到哪一个界面，我们寻求App的帮助，打开Xcode工程，在<code>AppDelegate</code>中，我们存储一下用户的使用状态。最简单的办法改一下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BOOL launched = [[NSUserDefaults standardUserDefaults] boolForKey:ApplicationDidLaunchedYet];</div><div class="line">  </div><div class="line">RCTRootView *rootView = [[RCTRootView alloc] initWithBundleURL:jsCodeLocation                            moduleName:@&quot;Project&quot; initialProperties:@&#123;                                                               @&quot;launched&quot;: @(launched)</div><div class="line">                                                                                                                                                 &#125;</div><div class="line">                                                   launchOptions:launchOptions];</div><div class="line">  [[NSUserDefaults standardUserDefaults] setBool:YES forKey:ApplicationDidLaunchedYet];</div><div class="line">  [[NSUserDefaults standardUserDefaults] synchronize];</div></pre></td></tr></table></figure>
<p>然后我们在使用一下：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;Router&gt;</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"root"</span>&gt;</span></span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span>  <span class="attr">key</span>=<span class="string">"GuidePage"</span> <span class="attr">component</span>=<span class="string">&#123;GuidePage&#125;</span> <span class="attr">hideNavBar</span> <span class="attr">title</span>=<span class="string">"GuidePage"</span> <span class="attr">initial</span>=<span class="string">&#123;this.props.launched&#125;</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"RootPage"</span> <span class="attr">component</span>=<span class="string">&#123;RootPage&#125;</span> <span class="attr">title</span>=<span class="string">"RootPage"</span> <span class="attr">initial</span>=<span class="string">&#123;this.props.launched&#125;/</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Scene</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div></pre></td></tr></table></figure>
<p>就OK了，具体的router的其他方法看文档。我们常用的就是PUSH还有POP，接下来我们看看怎么能写一个类似微信iOS App的TabBar，也就是程序的主框架：假设我们需要2个组件，创建2个文件夹，假定我们做一个新闻类的App，第一个叫主页，第二个是个人中心，修改index为：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Scene &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> GuidePage <span class="keyword">from</span> <span class="string">'./GuidePage'</span>;</div><div class="line"><span class="keyword">import</span> RootPage <span class="keyword">from</span> <span class="string">'./RootPage'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;Router&gt;</div><div class="line">        &lt;Scene key="root"&gt;</div><div class="line">          &lt;Scene  key="GuidePage" component=&#123;GuidePage&#125; hideNavBar title="GuidePage" initial=&#123;this.props.launched&#125; /&gt;</div><div class="line">          &lt;Scene key="RootPage" component=&#123;RootPage&#125; title="RootPage" hideNavBar initial=&#123;this.props.launched&#125;/&gt;</div><div class="line">        &lt;/Scene&gt;</div><div class="line">      &lt;/Router&gt;</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>在RootPage中创建Tabbar：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; View, Text, StyleSheet, TabBarIOS &#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> &#123; Router, Scene, Actions, ActionConst &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> NewsPage <span class="keyword">from</span> <span class="string">'./News/NewsPage'</span>;</div><div class="line"><span class="keyword">import</span> AccountPage <span class="keyword">from</span> <span class="string">'./Account/AccountPage'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">RootPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props);</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">selectedTab</span>: <span class="string">"newsTab"</span> &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;TabBarIOS</div><div class="line">        unselectedTintColor="darkgrey"</div><div class="line">        tintColor="#34A3FF"</div><div class="line">        barTintColor="white"&gt;</div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title="News"</div><div class="line">          systemIcon="featured"</div><div class="line">          selected=&#123;this.state.selectedTab === 'newsTab'&#125;</div><div class="line">          onPress=&#123;() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">              selectedTab: 'newsTab'</div><div class="line">            &#125;);</div><div class="line">          &#125; &#125;&gt;</div><div class="line">          &lt;NewsPage /&gt;</div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line">        &lt;TabBarIOS.Item</div><div class="line">          title="Account"</div><div class="line">          systemIcon="contacts"</div><div class="line">          selected=&#123;this.state.selectedTab === 'accountTab'&#125;</div><div class="line">          onPress=&#123;() =&gt; &#123;</div><div class="line">            this.setState(&#123;</div><div class="line">              selectedTab: 'accountTab'</div><div class="line">            &#125;);</div><div class="line">          &#125; &#125;&gt;</div><div class="line">          &lt;AccountPage /&gt;</div><div class="line">        &lt;/TabBarIOS.Item&gt;</div><div class="line">      &lt;/TabBarIOS&gt;</div><div class="line">    );</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default RootPage</div></pre></td></tr></table></figure>
<p>然后举例看一下News模块（这个文件管理所有的News路由）：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; View, &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene, Actions, ActionConst &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"><span class="keyword">import</span> News <span class="keyword">from</span> <span class="string">'./News'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NewsPage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">Router</span>&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"_NewsRouter"</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Scene</span> <span class="attr">key</span>=<span class="string">"News"</span> <span class="attr">component</span>=<span class="string">&#123;News&#125;</span> <span class="attr">title</span>=<span class="string">"News"</span> <span class="attr">initial</span>=<span class="string">&#123;true&#125;</span> /&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">Scene</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">Router</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">export default NewsPage</div></pre></td></tr></table></figure>
<p>这个是默认的News界面：</p>
<figure class="highlight jsx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; View, &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"><span class="keyword">import</span> &#123; Router, Scene, Actions, ActionConst &#125; <span class="keyword">from</span> <span class="string">'react-native-router-flux'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">News</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> '<span class="attr">red</span>', <span class="attr">flex:</span> <span class="attr">1</span> &#125;&#125;&gt;</span></span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> News</div></pre></td></tr></table></figure>
<p>我们来看一下效果：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/ApplicationFrame.gif" alt=""></p>
<p>代码已经上传到github，这就是一个简单的应用程序框架，下周一我们来写新闻列表的获取数据并展示。</p>
<p>代码地址依旧没变。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;第二步，我们依旧遗留了一个问题，从引导页进入到程序主界面，打算使用&lt;code&gt;React-Router&lt;/code&gt;来解决这个问题。目前我对&lt;code&gt;React-Router&lt;/code&gt;也是处于知道但没用过的状态，我们先尝试着寻找资料了解一下这个功能组件（记住&lt;code&gt;React-Router&lt;/code&gt;这个名字还是因为我之前使用了很久的&lt;code&gt;vue-router&lt;/code&gt;）。来到&lt;a href=&quot;https://github.com/ReactTraining/react-router&quot;&gt;Reacr-Router Github&lt;/a&gt;的主页后，阅读了一下大致的介绍，感觉还是只适合Web的React相关的路由操作（小白见解），我们使用另一个：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;$ npm i react-native-router-flux --save&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;并且在使用之前建议大家阅读一下&lt;a href=&quot;https://segmentfault.com/a/1190000003503338?_ea=323420&quot;&gt;这篇文章&lt;/a&gt;，接着我们按照&lt;a href=&quot;https://github.com/aksonov/react-native-router-flux&quot;&gt;Github的文档&lt;/a&gt;来看下具体该如何操作：&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="https://wilddylan.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>如何迈出第二步（组件优化）</title>
    <link href="https://wilddylan.github.io/2016/10/21/%E5%A6%82%E4%BD%95%E8%BF%88%E5%87%BA%E7%AC%AC%E4%BA%8C%E6%AD%A5%EF%BC%88%E7%BB%84%E4%BB%B6%E4%BC%98%E5%8C%96%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/21/如何迈出第二步（组件优化）/</id>
    <published>2016-10-21T01:19:50.000Z</published>
    <updated>2017-02-04T09:02:57.000Z</updated>
    
    <content type="html"><![CDATA[<p>真的这种事情很好，勇敢的迈出第一步之后，就必须要接着走下去了。因为我第一篇的文章已经发出去了，并在结尾说下一次要做优化，为了厚脸皮也要用心的把问题解决了。解决完问题之后，还要装个逼，装逼到一半的时候，装不下去了，就必须得继续学习才能继续装逼。希望大家可以勇敢的迈出惧怕或者懒散的一步，程序员不要眼高手低。谁说高手组队不会翻车？不仅仅是这样，越牛逼的人翻车的后果越严重。</p>
<p>接着上一篇比较破的文章（我确实是第一天开始写RN的代码，之前都是看），发文章的时候我甚至有点脸红，妈的这是第一次，觉得这么坑的文章要发出去了，但是随之带来的就是写好下一篇的思想。不啰嗦，开始写：</p>
<a id="more"></a>
<p>上节最后的优化，是把pageControl用for循环写了，然后我们先在最小的组件中看下有没有可以优化的地方。<code>PageControl.js</code>中：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    backgroundColor: 'white',</div><div class="line">    flexDirection: 'row',</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: "space-between",</div><div class="line">    width: 50,</div><div class="line">    marginTop: 40</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    width: 10,</div><div class="line">    height: 10,</div><div class="line">    borderRadius: 5,</div><div class="line">    backgroundColor: 'white',</div><div class="line">    borderColor: '#34a3ff',</div><div class="line">    borderWidth: 1</div><div class="line">  &#125;,</div><div class="line">  itemHighLight: &#123;</div><div class="line">    width: 10,</div><div class="line">    height: 10,</div><div class="line">    borderRadius: 5,</div><div class="line">    backgroundColor: 'skyblue'</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>css写重复了，我们提取相同的：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">itemSize: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">5</span>,</div><div class="line">&#125;,</div><div class="line"><span class="attr">item</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#34a3ff'</span>,</div><div class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span></div><div class="line">&#125;,</div><div class="line"><span class="attr">itemHighLight</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后将<code>render()</code>方法中不会改变的局部变量用let定义：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    <span class="keyword">let</span> number = <span class="keyword">this</span>.props.number;</div><div class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.props.index;</div><div class="line">    <span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;number; i++) &#123;</div><div class="line">      <span class="keyword">let</span> item = (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[(i</span> == <span class="string">index</span> ? <span class="attr">styles.itemHighLight</span> <span class="attr">:</span> <span class="attr">styles.item</span>), <span class="attr">styles.itemSize</span>]&#125; <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> &gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></div><div class="line">      );</div><div class="line">      items.push(item);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></span></div><div class="line">        &#123;items&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后想一个问题，如何可以让PageControl保持不跟着ScrollView一起滚动呢（我们现在相当于创建了3个PageControl）？所以这里PageControl组件要提供一个动态修改当前index的功能。所以scrollView的滑动我们要监听，然后在状态中加入当前的页码。这个时候我们会发现，PageControl与下边的进入按钮其实是不动的，所以我们将index.ios.js中的内容再次拆分为上下两部分，上边显示内容，下边显示pageControl与进入按钮。这个时候，程序要大改了，貌似之前写的都有问题，但是别急，慢慢来看，我们就是将东西诺了个位置。</p>
<p>既然让pageControl不动，所以只能使用<code>position: &#39;absolute&#39;</code>来帮助它脱离当前的文档流（当前的视图层），并且要实时的控制pageControl的展示，所以在index.ios.js中的state中加入<code>currentIndex</code>属性，并监听scrollView的滑动。最终我们的PageControl：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; View, StyleSheet, Dimensions &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">PageControl</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">static</span> propTypes = &#123;&#125;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> number = <span class="keyword">this</span>.props.number;</div><div class="line">    <span class="keyword">let</span> index = <span class="keyword">this</span>.props.index;</div><div class="line">    <span class="keyword">var</span> items = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> screenWidth = Dimensions.get(<span class="string">'window'</span>).width;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> containerPosition = &#123;</div><div class="line">      <span class="attr">width</span>: number * <span class="number">20</span>,</div><div class="line">      <span class="attr">position</span>: <span class="string">'absolute'</span>,</div><div class="line">      <span class="attr">left</span>: (screenWidth - number * <span class="number">20</span>) / <span class="number">2.0</span>,</div><div class="line">      <span class="attr">top</span>: <span class="keyword">this</span>.props.top</div><div class="line">    &#125;;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;number; i++) &#123;</div><div class="line">      <span class="keyword">let</span> item = (</div><div class="line">        <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[(i</span> == <span class="string">index</span> ? <span class="attr">styles.itemHighLight</span> <span class="attr">:</span> <span class="attr">styles.item</span>), <span class="attr">styles.itemSize</span>]&#125; <span class="attr">key</span>=<span class="string">&#123;i&#125;</span> &gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></span></div><div class="line">      );</div><div class="line">      items.push(item);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;[styles.container,</span> <span class="attr">containerPosition</span>]&#125;&gt;</span></span></div><div class="line">        &#123;items&#125;</div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> styles = StyleSheet.create(&#123;</div><div class="line">  <span class="attr">container</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">flexDirection</span>: <span class="string">'row'</span>,</div><div class="line">    <span class="attr">alignItems</span>: <span class="string">'center'</span>,</div><div class="line">    <span class="attr">justifyContent</span>: <span class="string">"space-between"</span>,</div><div class="line">    <span class="attr">width</span>: <span class="number">50</span>,</div><div class="line">    <span class="attr">marginTop</span>: <span class="number">40</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">itemSize</span>: &#123;</div><div class="line">    <span class="attr">width</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">height</span>: <span class="number">10</span>,</div><div class="line">    <span class="attr">borderRadius</span>: <span class="number">5</span>,</div><div class="line">  &#125;,</div><div class="line">  <span class="attr">item</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'white'</span>,</div><div class="line">    <span class="attr">borderColor</span>: <span class="string">'#34a3ff'</span>,</div><div class="line">    <span class="attr">borderWidth</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">itemHighLight</span>: &#123;</div><div class="line">    <span class="attr">backgroundColor</span>: <span class="string">'skyblue'</span></div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> PageControl</div></pre></td></tr></table></figure>
<p>再看一下ScrollContent：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123;</div><div class="line">  View,</div><div class="line">  StyleSheet,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  Dimensions</div><div class="line">&#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ScrollContent</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="keyword">static</span> propTypes = &#123;&#125;</div><div class="line">  <span class="keyword">static</span> defaultProps = &#123;&#125;</div><div class="line"></div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.container</span> &#125;&gt;</span></span></div><div class="line">        <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;&#123;</span> <span class="attr">uri:</span> <span class="attr">this.props.uri</span> &#125;&#125; <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.image</span> &#125;/&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.title&#125;</span>&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.detail&#125;</span>&gt;</span>&#123;this.props.detail&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;styles.subDetail&#125;</span>&gt;</span>&#123;this.props.subDetail&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const contentWidth = Dimensions.get('window').width;</div><div class="line">const contentHeight = Dimensions.get('window').height;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: "center",</div><div class="line">    backgroundColor: 'white',</div><div class="line">    width: contentWidth,</div><div class="line">    height: contentHeight</div><div class="line">  &#125;,</div><div class="line">  image: &#123;</div><div class="line">    width: 253,</div><div class="line">    height: 200</div><div class="line">  &#125;,</div><div class="line">  title: &#123;</div><div class="line">    fontSize: 24,</div><div class="line">    color: '#358ED7',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 50</div><div class="line">  &#125;,</div><div class="line">  detail: &#123;</div><div class="line">    fontSize: 14,</div><div class="line">    color: '#1D1D26',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 20</div><div class="line">  &#125;,</div><div class="line">  subDetail: &#123;</div><div class="line">    fontSize: 14,</div><div class="line">    color: '#1D1D26',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 2</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default ScrollContent</div></pre></td></tr></table></figure>
<p><code>index.ios.js</code>中我们顺便把初始化content的地方改掉，并且在最后一张的时候展示进入App按钮：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View, ScrollView, TouchableOpacity, Dimensions, Text&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> ScrollContent <span class="keyword">from</span> <span class="string">'./ScrollContent'</span>;</div><div class="line"><span class="keyword">import</span> PageControl <span class="keyword">from</span> <span class="string">'./PageControl'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">currentIndex</span>: <span class="number">0</span> &#125;;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> screenWidth = Dimensions.get(<span class="string">'window'</span>).width;</div><div class="line">    <span class="keyword">let</span> pageControlTop = screenWidth / <span class="number">2.0</span> + <span class="number">300</span>;</div><div class="line">    <span class="keyword">let</span> objects = [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Group.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"Shopping directly"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Clothes-illustration.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"Hello world!"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Group1.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"What are you doing?"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;</div><div class="line">    ];</div><div class="line">    <span class="keyword">var</span> scrollItems = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;objects.length; i++) &#123;</div><div class="line">      <span class="keyword">let</span> obj = objects[i];</div><div class="line">      <span class="keyword">let</span> item = (</div><div class="line">        &lt;ScrollContent uri=&#123;obj.uri&#125; title=&#123;obj.title&#125; detail=&#123;obj.detail&#125; subDetail=&#123;obj.subDetail&#125; key=&#123;i&#125;/&gt;</div><div class="line">      );</div><div class="line">      scrollItems.push(item);</div><div class="line">    &#125;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt; </div><div class="line">        &lt;ScrollView </div><div class="line">          style=&#123;styles.scrollView&#125; </div><div class="line">          horizontal=&#123;true&#125;  </div><div class="line">          showsHorizontalScrollIndicator=&#123;false&#125;  </div><div class="line">          alwaysBounceHorizontal=&#123;true&#125;  </div><div class="line">          pagingEnabled=&#123;true&#125;  </div><div class="line">          onScroll=&#123;(event: Object) =&gt; &#123;</div><div class="line">            let caluIndex = parseInt(event.nativeEvent.contentOffset.x / screenWidth);</div><div class="line">            this.setState(&#123; currentIndex: caluIndex &#125;);</div><div class="line">          &#125;&#125; </div><div class="line">          &gt;</div><div class="line">          &#123;scrollItems&#125;</div><div class="line">        &lt;/ScrollView&gt;</div><div class="line">        &lt;PageControl number=&#123;objects.length&#125; index=&#123;this.state.currentIndex&#125; top=&#123;pageControlTop&#125;/&gt;</div><div class="line">        &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;&#125;&#125; activeOpacity=&#123;50 / 100&#125;&gt;</div><div class="line">            &#123; </div><div class="line">              this.state.currentIndex == objects.length - 1 ? </div><div class="line">              (&lt;Text style=&#123; styles.enterButton &#125;&gt;Enter&lt;/Text&gt;): (null)</div><div class="line">            &#125;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1</div><div class="line">  &#125;,</div><div class="line">  scrollView: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: 'white'</div><div class="line">  &#125;,</div><div class="line">  enterButton: &#123;</div><div class="line">    position: 'absolute',</div><div class="line">    left: (Dimensions.get('window').width - 70) / 2.0,</div><div class="line">    bottom: 15,</div><div class="line">    color: '#34A3FF',</div><div class="line">    fontSize: 17,</div><div class="line">    fontWeight: "400",</div><div class="line">    borderWidth: 1,</div><div class="line">    borderColor: '#34A3FF',</div><div class="line">    borderRadius: 3,</div><div class="line">    padding: 5,</div><div class="line">    paddingLeft: 15,</div><div class="line">    paddingRight: 15,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>接下来，我们要把这个ScrollView单开一个叫做引导页的组件<code>GuidePage</code>.js：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component, &#125; <span class="keyword">from</span> <span class="string">'react'</span></div><div class="line"><span class="keyword">import</span> &#123; View, ScrollView, TouchableOpacity, Dimensions, Text, StyleSheet &#125; <span class="keyword">from</span> <span class="string">'react-native'</span></div><div class="line"><span class="keyword">import</span> ScrollContent <span class="keyword">from</span> <span class="string">'./ScrollContent'</span>;</div><div class="line"><span class="keyword">import</span> PageControl <span class="keyword">from</span> <span class="string">'./PageControl'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">GuidePage</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">    <span class="keyword">this</span>.state = &#123; <span class="attr">currentIndex</span>: <span class="number">0</span> &#125;;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">let</span> screenWidth = Dimensions.get(<span class="string">'window'</span>).width;</div><div class="line">    <span class="keyword">let</span> pageControlTop = screenWidth / <span class="number">2.0</span> + <span class="number">300</span>;</div><div class="line">    <span class="keyword">let</span> objectNum = <span class="keyword">this</span>.props.objects.length;</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> scrollItems = <span class="keyword">new</span> <span class="built_in">Array</span>();</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;objectNum; i++) &#123;</div><div class="line">      <span class="keyword">let</span> obj = <span class="keyword">this</span>.props.objects[i];</div><div class="line">      <span class="keyword">let</span> item = (</div><div class="line">        &lt;ScrollContent uri=&#123;obj.uri&#125; title=&#123;obj.title&#125; detail=&#123;obj.detail&#125; subDetail=&#123;obj.subDetail&#125; key=&#123;i&#125;/&gt;</div><div class="line">      );</div><div class="line">      scrollItems.push(item);</div><div class="line">    &#125;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt; </div><div class="line">        &lt;ScrollView </div><div class="line">          style=&#123;styles.scrollView&#125; </div><div class="line">          horizontal=&#123;true&#125;  </div><div class="line">          showsHorizontalScrollIndicator=&#123;false&#125;  </div><div class="line">          alwaysBounceHorizontal=&#123;true&#125;  </div><div class="line">          pagingEnabled=&#123;true&#125;  </div><div class="line">          onScroll=&#123;(event: Object) =&gt; &#123;</div><div class="line">            let caluIndex = parseInt(event.nativeEvent.contentOffset.x / screenWidth);</div><div class="line">            this.setState(&#123; currentIndex: caluIndex &#125;);</div><div class="line">          &#125;&#125; </div><div class="line">          &gt;</div><div class="line">          &#123;scrollItems&#125;</div><div class="line">        &lt;/ScrollView&gt;</div><div class="line">        &lt;PageControl number=&#123;objectNum&#125; index=&#123;this.state.currentIndex&#125; top=&#123;pageControlTop&#125;/&gt;</div><div class="line">        &lt;TouchableOpacity onPress=&#123;() =&gt; &#123;&#125;&#125; activeOpacity=&#123;50 / 100&#125;&gt;</div><div class="line">            &#123; </div><div class="line">              this.state.currentIndex == objectNum - 1 ? </div><div class="line">              (&lt;Text style=&#123; styles.enterButton &#125;&gt;Enter&lt;/Text&gt;): (null)</div><div class="line">            &#125;</div><div class="line">        &lt;/TouchableOpacity&gt;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1</div><div class="line">  &#125;,</div><div class="line">  scrollView: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: 'white'</div><div class="line">  &#125;,</div><div class="line">  enterButton: &#123;</div><div class="line">    position: 'absolute',</div><div class="line">    left: (Dimensions.get('window').width - 70) / 2.0,</div><div class="line">    bottom: 15,</div><div class="line">    color: '#34A3FF',</div><div class="line">    fontSize: 17,</div><div class="line">    fontWeight: "400",</div><div class="line">    borderWidth: 1,</div><div class="line">    borderColor: '#34A3FF',</div><div class="line">    borderRadius: 3,</div><div class="line">    padding: 5,</div><div class="line">    paddingLeft: 15,</div><div class="line">    paddingRight: 15,</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default GuidePage</div></pre></td></tr></table></figure>
<p>然后在使用的时候<code>index.ios.js</code>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> &#123; AppRegistry, StyleSheet, View&#125; <span class="keyword">from</span> <span class="string">'react-native'</span>;</div><div class="line"><span class="keyword">import</span> GuidePage <span class="keyword">from</span> <span class="string">'./GuidePage'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Project</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">let</span> objects = [</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Group.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"Shopping directly"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Clothes-illustration.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"Hello world!"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;,</div><div class="line">      &#123;</div><div class="line">        <span class="attr">uri</span>: <span class="string">"http://ocef2grmj.bkt.clouddn.com/Group1.png"</span>,</div><div class="line">        <span class="attr">title</span>: <span class="string">"What are you doing?"</span>,</div><div class="line">        <span class="attr">detail</span>: <span class="string">"Know your factories. Know your costs."</span>,</div><div class="line">        <span class="attr">subDetail</span>: <span class="string">"Always ask why."</span></div><div class="line">      &#125;</div><div class="line">    ];</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      <span class="xml"><span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span> </span></div><div class="line">        <span class="tag">&lt;<span class="name">GuidePage</span> <span class="attr">objects</span>=<span class="string">&#123;objects&#125;</span> /&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p><img src="http://ocef2grmj.bkt.clouddn.com/lastGuidePage.gif" alt=""></p>
<p>这样，我们解决了引导页的封装，第一次入手，确实绕弯，道行不深啊。不急慢慢来，既然有了引导页，就要点击进入的时候跳转到App中，这个操作如何来完成呢？我们知道，index.ios.js是我们程序的入口，而且引导页只出现一次，我们下篇文章来摸索一下。</p>
<p>代码的地址还没变哦，在迈出第一步中文末有。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;真的这种事情很好，勇敢的迈出第一步之后，就必须要接着走下去了。因为我第一篇的文章已经发出去了，并在结尾说下一次要做优化，为了厚脸皮也要用心的把问题解决了。解决完问题之后，还要装个逼，装逼到一半的时候，装不下去了，就必须得继续学习才能继续装逼。希望大家可以勇敢的迈出惧怕或者懒散的一步，程序员不要眼高手低。谁说高手组队不会翻车？不仅仅是这样，越牛逼的人翻车的后果越严重。&lt;/p&gt;
&lt;p&gt;接着上一篇比较破的文章（我确实是第一天开始写RN的代码，之前都是看），发文章的时候我甚至有点脸红，妈的这是第一次，觉得这么坑的文章要发出去了，但是随之带来的就是写好下一篇的思想。不啰嗦，开始写：&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="https://wilddylan.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>如何迈出第一步</title>
    <link href="https://wilddylan.github.io/2016/10/20/%E5%A6%82%E4%BD%95%E8%BF%88%E5%87%BA%E7%AC%AC%E4%B8%80%E6%AD%A5/"/>
    <id>https://wilddylan.github.io/2016/10/20/如何迈出第一步/</id>
    <published>2016-10-20T02:59:32.000Z</published>
    <updated>2017-02-04T08:40:45.000Z</updated>
    
    <content type="html"><![CDATA[<p>在算法前5课结束后，我渐渐的明白了一个道理：不管前方多难，放手去做吧，最难的是迈出第一步，迈出去了，以后就掌控在你手中了。快排、最短路径、二叉树算是算法的基础内容，但是之前一直不敢下手把他们写出来，因为工作3年多了，都是在创业公司，重重的业务负担让人满脑子充斥的都是业务逻辑、UI界面，5年前学的东西都忘的干净，所以我不假思索的在日程中加入了写算法文章，并且马上买了一本算法的书。然后逼着自己写了开篇之后，发现每天上午上班，先放开手中的工作，安静的读书、实践代码、写出来自己的思想并分享给大家是一件很不错的事情，而且渐渐的觉得重新拾起了算法。其实我买的书的内容，就是讲解到了二叉树就完结了，我大概用了4天的时间读完了这本书。</p>
<p>然后就是今天所写的<a href="https://github.com/facebook/react-native" target="_blank" rel="external">react-native</a>，其实在RN刚出的时候，我就开始入手了（忠实的FaceBook技术粉），但是一直在给自己找理由不去实践，每次版本更新，也只是去官网看看例子，觉得理解就行了。这段时间有朋友问到我相关的东西，我发现，在实际动手的时候，我就写个登录界面都写的不是很得心应手。所以决定迈出写项目的第一步。那，又有人要问了，写什么项目呢？先别急，既然是迈出第一步，那就要慢慢来。我姑且当读者都熟悉HTML、CSS、JS。</p>
<a id="more"></a>
<p>当我们下载一个新的App的时候，我们最先看到的是什么？没错，启动页，引导图。启动页是配置到配置文件中的，所以我们来完成我们第一个引导页的制作</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/RNLaunchImage.png" alt=""></p>
<p>如果按照App的开发角度，这个界面可以用ScrollView、pageControl、Button来完成，当然在RN中也我们也假定是这样的。大家各自新建一个RN的项目，并且我们以iOS为准。</p>
<p>项目名大家随便搞一个，我们先不急着对文件进行分组归类，也不需要想着任何有关架构设想的事情。直接在<code>index.ios.js</code>中开始我们第一个界面的制作，当然，按照App的思想，这个视图控制器的基本层级是： View：ScrollView：pageControl, Button，所以我们先渲染一个全屏的View，背景色为<code>skyblue</code>：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from 'react';</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View</div><div class="line">&#125; from 'react-native'</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span>        </div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: 'skyblue',</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>接着，我们写一个ScrollView上去：并且在上边加入3个屏幕大小的不同颜色的View，并对scrollView做一些简单的配置。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from 'react';</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">  Text,</div><div class="line">  Dimensions</div><div class="line">&#125; from 'react-native'</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    var windowWidth = Dimensions.get('window').width;</div><div class="line">    var windowHeight = Dimensions.get('window').height;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">ScrollView</span> </span></div><div class="line">          <span class="attr">horizontal</span>=<span class="string">&#123;true&#125;</span> </div><div class="line">          <span class="attr">showsHorizontalScrollIndicator</span>=<span class="string">&#123;false&#125;</span></div><div class="line">          <span class="attr">alwaysBounceHorizontal</span>=<span class="string">&#123;true&#125;</span></div><div class="line">          <span class="attr">pagingEnabled</span>=<span class="string">&#123;true&#125;</span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;styles.scrollView&#125;</span>&gt;</div><div class="line">          </div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> '<span class="attr">orange</span>', <span class="attr">height:</span> <span class="attr">windowHeight</span>, <span class="attr">width:</span> <span class="attr">windowWidth</span> &#125;&#125; /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> '<span class="attr">red</span>', <span class="attr">height:</span> <span class="attr">windowHeight</span>, <span class="attr">width:</span> <span class="attr">windowWidth</span> &#125;&#125; /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">backgroundColor:</span> '<span class="attr">yellow</span>', <span class="attr">height:</span> <span class="attr">windowHeight</span>, <span class="attr">width:</span> <span class="attr">windowWidth</span> &#125;&#125; /&gt;</span></div><div class="line">          </div><div class="line">        <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1</div><div class="line">  &#125;,</div><div class="line">  scrollView: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: 'skyblue'</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>接下来我们亲自写一个小组件，用于放至中间的一张图片以及一段文字，新建一个js文件，姑且命名为<code>scrollContent.js</code>，先别急着写，先把这个组件引入到index.js种，然后替换到刚刚我们的View。 然后再开始编写，这里要注意，我们先约定，组件的样式定义到组件里。</p>
<p>组件内容，我们大致的拆分为：图片，标题，详情，附加详情。 原本应该是这样的，但是我们看到下边还有一个页面指示器，所以我们还需要一个占位的视图。至于下边的跳过按钮，我暂时觉得这个不太好，我们应该在最后一页才展示一个进入App的按钮（要求用户必须看完。。），所以我们先写一个这样的按钮放到底部。我一度没有正规的学过前端，所以css写的特别烂！希望可以在博客之路找到个好的老司机带路上车！先来看组件的代码：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component, &#125; from 'react'</div><div class="line">import &#123;</div><div class="line">  View,</div><div class="line">  StyleSheet,</div><div class="line">  Image,</div><div class="line">  Text,</div><div class="line">  Dimensions,</div><div class="line">  TouchableOpacity,</div><div class="line">&#125; from 'react-native'</div><div class="line"></div><div class="line">class ScrollContent extends Component &#123;</div><div class="line"></div><div class="line">  static propTypes = &#123;&#125;</div><div class="line">  static defaultProps = &#123;&#125;</div><div class="line"></div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props)</div><div class="line">    this.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line"></div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      // http://ocef2grmj.bkt.clouddn.com/Clothes-illustration.png</div><div class="line">      // http://ocef2grmj.bkt.clouddn.com/Group1.png</div><div class="line">      <span class="tag">&lt;<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.container</span> &#125;&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;&#123;</span> <span class="attr">uri:</span>'<span class="attr">http:</span>//<span class="attr">ocef2grmj.bkt.clouddn.com</span>/<span class="attr">Group.png</span>' &#125;&#125; <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.image</span> &#125;/&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.title</span> &#125;&gt;</span>Shopping directly<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.detail</span> &#125;&gt;</span>Know your factories. Know your costs.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.subDetail</span> &#125;&gt;</span>Always ask why.<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.placeHold</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.buttonGroup</span> &#125;&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; activeOpacity=&#123;50 / 100&#125;&gt;</div><div class="line">            <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.enterButton</span> &#125;&gt;</span>Enter<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const contentWidth = Dimensions.get('window').width;</div><div class="line">const contentHeight = Dimensions.get('window').height - 60;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1,</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: 'center',</div><div class="line">    backgroundColor: 'white',</div><div class="line">    width: contentWidth,</div><div class="line">    height: contentHeight</div><div class="line">  &#125;,</div><div class="line">  image: &#123;</div><div class="line">    width: 253,</div><div class="line">    height: 200</div><div class="line">  &#125;,</div><div class="line">  title: &#123;</div><div class="line">    fontSize: 24,</div><div class="line">    color: '#358ED7',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 50</div><div class="line">  &#125;,</div><div class="line">  detail: &#123;</div><div class="line">    fontSize: 14,</div><div class="line">    color: '#1D1D26',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 20</div><div class="line">  &#125;,</div><div class="line">  subDetail: &#123;</div><div class="line">    fontSize: 14,</div><div class="line">    color: '#1D1D26',</div><div class="line">    fontWeight: "400",</div><div class="line">    marginTop: 2</div><div class="line">  &#125;,</div><div class="line">  placeHold: &#123;</div><div class="line">    marginTop: 40,</div><div class="line">    height: 15,</div><div class="line">    width: 80</div><div class="line">  &#125;,</div><div class="line">  buttonGroup: &#123;</div><div class="line">    height: 60,</div><div class="line">    width: contentWidth,</div><div class="line">    flex: 1,</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: 'center',</div><div class="line">    backgroundColor: 'white'</div><div class="line">  &#125;,</div><div class="line">  enterButton: &#123;</div><div class="line">    padding: 15,</div><div class="line">    paddingTop: 5,</div><div class="line">    paddingBottom: 5,</div><div class="line">    borderWidth: 1,</div><div class="line">    color: '#34A3FF',</div><div class="line">    fontSize: 17,</div><div class="line">    borderColor: '#34A3FF',</div><div class="line">    borderRadius: 3</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default ScrollContent</div></pre></td></tr></table></figure>
<p>然后看使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component &#125; from 'react';</div><div class="line">import &#123;</div><div class="line">  AppRegistry,</div><div class="line">  StyleSheet,</div><div class="line">  View,</div><div class="line">  ScrollView,</div><div class="line">&#125; from 'react-native'</div><div class="line"></div><div class="line">import ScrollContent from './ScrollContent'</div><div class="line"></div><div class="line">class Project extends Component &#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span> </div><div class="line">        <span class="tag">&lt;<span class="name">ScrollView</span> </span></div><div class="line">          <span class="attr">horizontal</span>=<span class="string">&#123;true&#125;</span> </div><div class="line">          <span class="attr">showsHorizontalScrollIndicator</span>=<span class="string">&#123;false&#125;</span></div><div class="line">          <span class="attr">alwaysBounceHorizontal</span>=<span class="string">&#123;true&#125;</span></div><div class="line">          <span class="attr">pagingEnabled</span>=<span class="string">&#123;true&#125;</span></div><div class="line">          <span class="attr">style</span>=<span class="string">&#123;styles.scrollView&#125;</span>&gt;</div><div class="line">          </div><div class="line">          <span class="tag">&lt;<span class="name">ScrollContent</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ScrollContent</span> /&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">ScrollContent</span> /&gt;</span></div><div class="line">          </div><div class="line">        <span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    flex: 1</div><div class="line">  &#125;,</div><div class="line">  scrollView: &#123;</div><div class="line">    flex: 1,</div><div class="line">    backgroundColor: 'skyblue'</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">AppRegistry.registerComponent('Project', () =&gt; Project);</div></pre></td></tr></table></figure>
<p>这个时候，我们发现组件里的内容还是外界传入比较好，所以使用<code>props</code>，我们来修改自己的组件：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">return (</div><div class="line">      <span class="tag">&lt;<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.container</span> &#125;&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Image</span> <span class="attr">source</span>=<span class="string">&#123;&#123;</span> <span class="attr">uri:</span> <span class="attr">this.props.uri</span> &#125;&#125; <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.image</span> &#125;/&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.title</span> &#125;&gt;</span>&#123;this.props.title&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.detail</span> &#125;&gt;</span>&#123;this.props.detail&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.subDetail</span> &#125;&gt;</span>&#123;this.props.subDetail&#125;<span class="tag">&lt;/<span class="name">Text</span>&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.placeHold</span> &#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.buttonGroup</span> &#125;&gt;</span></div><div class="line">          <span class="tag">&lt;<span class="name">TouchableOpacity</span> <span class="attr">onPress</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125; activeOpacity=&#123;50 / 100&#125;&gt;</div><div class="line">            &#123; </div><div class="line">              this.props.showEnter == true? </div><div class="line">              (<span class="tag">&lt;<span class="name">Text</span> <span class="attr">style</span>=<span class="string">&#123;</span> <span class="attr">styles.enterButton</span> &#125;&gt;</span>Enter<span class="tag">&lt;/<span class="name">Text</span>&gt;</span>): (null)</div><div class="line">            &#125;</div><div class="line">          <span class="tag">&lt;/<span class="name">TouchableOpacity</span>&gt;</span></div><div class="line">        <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div></pre></td></tr></table></figure>
<p>然后在使用：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">ScrollContent</span> </span></div><div class="line">            <span class="attr">uri</span>=<span class="string">"http://ocef2grmj.bkt.clouddn.com/Group.png"</span> </div><div class="line">            <span class="attr">title</span>=<span class="string">"Shopping directly"</span> </div><div class="line">            <span class="attr">detail</span>=<span class="string">"Know your factories. Know your costs."</span> </div><div class="line">            <span class="attr">subDetail</span>=<span class="string">"Always ask why."</span> </div><div class="line">            <span class="attr">showEnter</span>=<span class="string">&#123;false&#125;</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ScrollContent</span> </span></div><div class="line">            <span class="attr">uri</span>=<span class="string">"http://ocef2grmj.bkt.clouddn.com/Clothes-illustration.png"</span> </div><div class="line">            <span class="attr">title</span>=<span class="string">"Buy shoes"</span> </div><div class="line">            <span class="attr">detail</span>=<span class="string">"Know your factories. Know your costs."</span> </div><div class="line">            <span class="attr">subDetail</span>=<span class="string">"Always ask why."</span> </div><div class="line">            <span class="attr">showEnter</span>=<span class="string">&#123;false&#125;</span> /&gt;</div><div class="line"><span class="tag">&lt;<span class="name">ScrollContent</span> </span></div><div class="line">            <span class="attr">uri</span>=<span class="string">"http://ocef2grmj.bkt.clouddn.com/Group1.png"</span> </div><div class="line">            <span class="attr">title</span>=<span class="string">"Shopping directly"</span> </div><div class="line">            <span class="attr">detail</span>=<span class="string">"Know your factories. Know your costs."</span> </div><div class="line">            <span class="attr">subDetail</span>=<span class="string">"Always ask why."</span> </div><div class="line">            <span class="attr">showEnter</span>=<span class="string">&#123;true&#125;</span> /&gt;</div></pre></td></tr></table></figure>
<p>这样完成了之后，我们来看一下初期的效果：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/RNSceenShot.gif" alt=""></p>
<p>你们完成了么？然后大家发现，我们只是完成了一部分，少了一个指示器，然后我们来自定义这个控件，新建js文件<code>pageControl.js</code>。最简单的思维，3个小View（这里我们先写死3个）。</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">import React, &#123; Component, &#125; from 'react'</div><div class="line">import &#123; View, StyleSheet &#125; from 'react-native'</div><div class="line"></div><div class="line">class PageControl extends Component &#123;</div><div class="line"></div><div class="line">  static propTypes = &#123;&#125;</div><div class="line">  static defaultProps = &#123;&#125;</div><div class="line"></div><div class="line">  constructor(props) &#123;</div><div class="line">    super(props)</div><div class="line">    this.state = &#123;&#125;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;styles.container&#125;</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;this.props.index</span> == <span class="string">0</span> ? <span class="attr">styles.itemHighLight</span> <span class="attr">:</span> <span class="attr">styles.item</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;this.props.index</span> == <span class="string">1</span> ? <span class="attr">styles.itemHighLight</span> <span class="attr">:</span> <span class="attr">styles.item</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">        <span class="tag">&lt;<span class="name">View</span> <span class="attr">style</span>=<span class="string">&#123;this.props.index</span> == <span class="string">2</span> ? <span class="attr">styles.itemHighLight</span> <span class="attr">:</span> <span class="attr">styles.item</span>&#125;&gt;</span><span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">      <span class="tag">&lt;/<span class="name">View</span>&gt;</span></div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">const styles = StyleSheet.create(&#123;</div><div class="line">  container: &#123;</div><div class="line">    backgroundColor: 'white',</div><div class="line">    flexDirection: 'row',</div><div class="line">    alignItems: 'center',</div><div class="line">    justifyContent: "space-between",</div><div class="line">    width: 50,</div><div class="line">    marginTop: 40</div><div class="line">  &#125;,</div><div class="line">  item: &#123;</div><div class="line">    width: 10,</div><div class="line">    height: 10,</div><div class="line">    borderRadius: 5,</div><div class="line">    backgroundColor: 'white',</div><div class="line">    borderColor: '#34a3ff',</div><div class="line">    borderWidth: 1</div><div class="line">  &#125;,</div><div class="line">  itemHighLight: &#123;</div><div class="line">    width: 10,</div><div class="line">    height: 10,</div><div class="line">    borderRadius: 5,</div><div class="line">    backgroundColor: 'skyblue'</div><div class="line">  &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">export default PageControl</div></pre></td></tr></table></figure>
<p>这里写的比较作死， 这里应该是外界传入items的个数，然后每次设置一下index就好了，这里偷懒了，我们继续来优化这个pageControl，稍作修改：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">render() &#123;</div><div class="line">    var number = this.props.number;</div><div class="line">    var index = this.props.index;</div><div class="line">    var items = new Array();</div><div class="line">    for (var i=0; i&lt;number; i++) &#123;</div><div class="line">      var item = (</div><div class="line">        &lt;View style=&#123;i == index ? styles.itemHighLight : styles.item&#125; key=&#123;i&#125; &gt;&lt;/View&gt;</div><div class="line">      );</div><div class="line">      items.push(item);</div><div class="line">    &#125;</div><div class="line">    return (</div><div class="line">      &lt;View style=&#123;styles.container&#125;&gt;</div><div class="line">        &#123;items&#125;</div><div class="line">      &lt;/View&gt;</div><div class="line">    )</div><div class="line"> &#125;</div></pre></td></tr></table></figure>
<p>这样在使用的时候就可以：</p>
<figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">PageControl</span> <span class="attr">style</span>=<span class="string">&#123;styles.pageControl&#125;</span> <span class="attr">number</span>=<span class="string">&#123;3&#125;</span> <span class="attr">index</span>=<span class="string">&#123;this.props.index&#125;/</span>&gt;</span></div></pre></td></tr></table></figure>
<p>到现在，我们总算磕磕绊绊的完成了一个滑动视图，而且还有很多的缺陷。明天我们继续来优化这个小的组件，争取做到每个方面都很极致。</p>
<p><a href="https://github.com/WildDylan/INSProject" target="_blank" rel="external">代码的地址</a>，以后每次更新之后都会修改这里的代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在算法前5课结束后，我渐渐的明白了一个道理：不管前方多难，放手去做吧，最难的是迈出第一步，迈出去了，以后就掌控在你手中了。快排、最短路径、二叉树算是算法的基础内容，但是之前一直不敢下手把他们写出来，因为工作3年多了，都是在创业公司，重重的业务负担让人满脑子充斥的都是业务逻辑、UI界面，5年前学的东西都忘的干净，所以我不假思索的在日程中加入了写算法文章，并且马上买了一本算法的书。然后逼着自己写了开篇之后，发现每天上午上班，先放开手中的工作，安静的读书、实践代码、写出来自己的思想并分享给大家是一件很不错的事情，而且渐渐的觉得重新拾起了算法。其实我买的书的内容，就是讲解到了二叉树就完结了，我大概用了4天的时间读完了这本书。&lt;/p&gt;
&lt;p&gt;然后就是今天所写的&lt;a href=&quot;https://github.com/facebook/react-native&quot;&gt;react-native&lt;/a&gt;，其实在RN刚出的时候，我就开始入手了（忠实的FaceBook技术粉），但是一直在给自己找理由不去实践，每次版本更新，也只是去官网看看例子，觉得理解就行了。这段时间有朋友问到我相关的东西，我发现，在实际动手的时候，我就写个登录界面都写的不是很得心应手。所以决定迈出写项目的第一步。那，又有人要问了，写什么项目呢？先别急，既然是迈出第一步，那就要慢慢来。我姑且当读者都熟悉HTML、CSS、JS。&lt;/p&gt;
    
    </summary>
    
    
      <category term="ReactNative" scheme="https://wilddylan.github.io/tags/ReactNative/"/>
    
  </entry>
  
  <entry>
    <title>算法第五课</title>
    <link href="https://wilddylan.github.io/2016/10/19/%E7%AE%97%E6%B3%95%E7%AC%AC%E4%BA%94%E8%AF%BE/"/>
    <id>https://wilddylan.github.io/2016/10/19/算法第五课/</id>
    <published>2016-10-19T04:55:39.000Z</published>
    <updated>2017-02-04T09:02:26.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="树"><a href="#树" class="headerlink" title="树"></a>树</h4><p>什么是树，没有回路的就是树，有回路的就是图。树有很多特性：</p>
<ol>
<li>树中的任意两个点有且仅有唯一的一条路</li>
<li>树中如果有n个点，那么它一定恰好有<code>n-1</code>条边</li>
<li>在树中任意两点之间加一条，就会构成回路</li>
</ol>
<p>常见的树，有家谱、操作系统的文件夹，目录等。并且我们规定，只要是没有回路的连通无向图就是树。为了确定每一棵树的形态，我们在对一棵树进行讨论的时候，将树中每个点称为<code>结点</code>或者<code>节点</code>，在树中，我们可以指定一个特殊的节点-<strong>根</strong>。有一个根的树叫做有根树。根又叫做根节点，一棵树有且仅有一个根节点。根节点又可以被称为<strong>祖先</strong>，接下来就是<strong>父节点</strong>（没有父节点的节点就是根），<strong>子节点</strong>。如果一个节点没有子节点，这个节点被称为<strong>叶节点</strong>。如果一个节点既不是根节点也不是叶节点，也可以被称为<strong>内部节点</strong>，每个节点有<strong>深度</strong>，深度指的是从根到这个节点的层数（根为第一层）。</p>
<a id="more"></a>
<h4 id="二叉树"><a href="#二叉树" class="headerlink" title="二叉树"></a>二叉树</h4><p>二叉树是一种特殊的数，二叉树的特点是，每个节点最多有2个子节点，左边的叫做左节点，右边的叫做右节点。或者说，每个节点最多有2个子树，更加严格的递归定义是：二叉树要么为空，要么由根节点、左子树、右子树构成，而左子树，右子树分别又是一棵二叉树。</p>
<p>二叉树还有两种特殊定义的二叉树，叫做<strong>满二叉树</strong>（二叉树中每个内部节点都有2个子节点，严格的定义是深度为h且有2^h-1个节点的树）和<strong>完全二叉树</strong>（一棵树除了最右边的位置上有一个或是几个节点缺少外，其他是丰满的，则是完全二叉树，严格的定义是：若设二叉树的高度为h，除第h层外，其他各层的节点树都达到最大个数，第h层从右向左连续缺若干节点，一个树，有右节点必有左节点）。可以将满二叉树理解为极其完美的完全二叉树。</p>
<p>先想一想，一棵完全二叉树如何做存储呢？其实二叉树种，父节点与子节点有着很不错的规律，只需用一个一维数组就可以存储完全二叉树：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0060.JPG" alt=""></p>
<p>通过上图我们发现，如果完全二叉树的一个编号为<code>K</code>，那么他左子节点的编号是<code>2*K</code>，右子节点的编号是<code>2*K + 1</code>，如果已知子节点的编号为<code>X</code>，那么父节点的编号就是<code>X/2</code>。如果一个完全二叉树有N个节点，那么这个完全二叉树的高度为</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">logN</div></pre></td></tr></table></figure>
<p>即最多有logN层节点。完全二叉树最典型的应用就是<strong>堆</strong>。</p>
<h4 id="堆，神奇的优先队列"><a href="#堆，神奇的优先队列" class="headerlink" title="堆，神奇的优先队列"></a>堆，神奇的优先队列</h4><p>什么是堆，堆就是一种特殊的完全二叉树</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0061.JPG" alt=""></p>
<p>如上图，有没有发现这棵二叉树有一个特点，就是所有的父节点都比子节点要小（圆圈里边的是值，上面的树是编号），符合这样特点的完全二叉树被我们称为<strong>最小堆</strong>，反之，如果父节点都比子节点要大，称为<strong>最大堆</strong>。</p>
<p>假如有14个数：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">99</span>, <span class="number">5</span>, <span class="number">36</span>, <span class="number">7</span>, <span class="number">22</span>, <span class="number">17</span>, <span class="number">46</span>, <span class="number">12</span>, <span class="number">2</span>, <span class="number">19</span>, <span class="number">25</span>, <span class="number">28</span>, <span class="number">1</span>, <span class="number">92</span></div></pre></td></tr></table></figure>
<p>请找出这14个数中最小的数，你可能直接想到了，一个循环不就好了么</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">14</span>; i ++) &#123;</div><div class="line">    <span class="keyword">if</span> (a[i] &lt; min) &#123;</div><div class="line">      min = a[i];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种方法的时间复杂度是<code>O(14)</code>，也就是<code>O(N)</code>。假如有14次这样的操作，就是<code>O(14^2)</code>，有没有更好的方法呢？堆这个特殊的结构恰好能够很好的解决这个问题。首先我们把14个数字按照最小堆的要求放入一棵完全二叉树，就像下边这棵树一样：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0061.JPG" alt=""></p>
<p>很显然，最小的树就在堆顶，假设存储这个堆的数组叫做h的话，最小数就是<code>h[1]</code>。如果我们要删除最小值并增加一个数字23呢？我们将堆顶的数字移除，然后将23放入堆顶。显然加了新的数值后，已经不符合最小堆的特性了，我们需要将新加入树的节点调整到合理的位置。</p>
<p>当然是向下调整了，最小堆种的大数都在下边的。所以我们只需要不停的与当前节点的子节中较小的节点进行比较并且互换。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0062.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0063.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0064.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0065.JPG" alt=""></p>
<p>我们发现，在堆23进行调整的时候，只进行了3次比较，就恢复了最小堆的特性。现在每次删除一个最小的数的同时增加一个新的数，需要的时间复杂度是<code>O(3)</code>，恰好是<br>$$<br>O(log_214) 也就是 O(log_2N)，简写为 O(logN)<br>$$<br>如果只想新增一个值呢？只需要把这个值插入到末尾，然后根据情况判断新元素是否需要上移，加入我们现在需要新增一个数字3：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0066.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0067.JPG" alt=""></p>
<p>先将3与它的父节点比较，如果比父节点小，则更换位置，继续向上比较即可。说了这么半天，我们忽略了一个很大的问题，怎么创建一个堆呢？可以从空的堆开始，依次的读入元素。还有一种方法，那就是直接把这14个数放入一个完全二叉树中（这里依旧用一个一维数组存储完全二叉树）：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position:  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span>  <span class="number">7</span>  <span class="number">8</span>  <span class="number">9</span>  <span class="number">10</span>  <span class="number">11</span>  <span class="number">12</span>  <span class="number">13</span>  <span class="number">14</span></div><div class="line">data    : <span class="number">99</span>  <span class="number">5</span> <span class="number">36</span>  <span class="number">7</span> <span class="number">22</span> <span class="number">17</span> <span class="number">92</span> <span class="number">12</span>  <span class="number">2</span>  <span class="number">19</span>  <span class="number">25</span>  <span class="number">28</span>   <span class="number">1</span>  <span class="number">46</span></div></pre></td></tr></table></figure>
<p>我们从叶节点开始，因为叶节点没有子节点，所以所有的叶节点都符合最小堆特性，所以我们开始处理叶节点之外的点。不符合最小堆特性的都需要向下调整。说白了就2行代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i --) &#123;</div><div class="line">    siftDown(i); <span class="comment">// 向下调整</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>二叉树还有一个特点：第<code>n/2</code>一定是这棵树的最后一个非叶节点。用这种方法创建堆的时间复杂度为<code>O(N)</code>。堆还有一个作用是排序，排序的时间复杂度也是<code>O(NlogN)</code>，根据我们上边的思维，堆排序就很简单了，比如我们要从小到大排序，我们先建立一个最小堆，然后堆顶的就是最小的，每次删除顶部元素并输出，直到堆空为止。</p>
<p>说了这么多，我们通过代码来看一下建立堆与堆排序的完整过程：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> h[<span class="number">101</span>]; <span class="comment">// 用来存放堆的数组</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 用来存储堆中元素的个数，也就是堆的大小</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> temp = h[x];</div><div class="line">  h[x] = h[y];</div><div class="line">  h[y] = temp;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="comment">// 传入一个需要向下调整的节点编号i</span></div><div class="line">  <span class="keyword">int</span> position, flag = <span class="number">0</span>; <span class="comment">// 使用flag来标记是否还需要继续向下调整</span></div><div class="line">  </div><div class="line">  <span class="comment">// 当i节点有左子节点并且需要继续调整的时候</span></div><div class="line">  <span class="keyword">while</span> ( i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span> ) &#123;</div><div class="line">    <span class="comment">// 首先判断与左子节点的关系，用position记录比较小的结点编号</span></div><div class="line">    <span class="keyword">if</span> ( h[i] &gt; h[i * <span class="number">2</span>] ) &#123;</div><div class="line">      position = i * <span class="number">2</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      position = i;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( i * <span class="number">2</span> + <span class="number">1</span> &lt;= n ) &#123;</div><div class="line">      <span class="keyword">if</span> ( h[position] &gt; h[i * <span class="number">2</span> + <span class="number">1</span>] ) &#123; <span class="comment">// 注意这里是 h[position]，说白了也就是3个值中的最小值</span></div><div class="line">        position = i * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果最小的编号不是当前编号，说明子节点小于父节点</span></div><div class="line">    <span class="keyword">if</span> ( position != i ) &#123;</div><div class="line">      <span class="comment">// 交换 position 与 i 位置的数字</span></div><div class="line">      swap(position, i);</div><div class="line">      i = position; <span class="comment">// 更新i为交换的子节点的位置，便于继续向下交换</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      flag = <span class="number">1</span>; <span class="comment">// 意味着父节点是最小，不需要调整了</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i --) &#123;</div><div class="line">    siftdown(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">deleteMax</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> temp = h[<span class="number">1</span>]; <span class="comment">// 新建一个变量来存储堆顶的值</span></div><div class="line">  h[<span class="number">1</span>] = h[n]; <span class="comment">// 将堆的最后一个元素赋值给堆顶</span></div><div class="line">  n --; <span class="comment">// 堆的元素减少1</span></div><div class="line">  siftdown(<span class="number">1</span>); <span class="comment">// 将堆顶向下排序</span></div><div class="line">  <span class="keyword">return</span> temp;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> num; <span class="comment">// 要排序数字的个数</span></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]); <span class="comment">// 将输入的数字顺序初始化到一维数中</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  n = num; <span class="comment">// 表示堆中元素的个数</span></div><div class="line">  </div><div class="line">  <span class="comment">// 创建堆</span></div><div class="line">  create();</div><div class="line">  </div><div class="line">  <span class="comment">// 删除顶部元素</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, deleteMax());</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>有人说了，不是还有最大堆么？哈哈，你真聪明，接着改代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> h[<span class="number">101</span>]; <span class="comment">// 用来存放堆的数组</span></div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 用来存储堆中元素的个数，也就是堆的大小</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> temp = h[x];</div><div class="line">  h[x] = h[y];</div><div class="line">  h[y] = temp;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">siftdown</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; <span class="comment">// 传入一个需要向下调整的节点编号i</span></div><div class="line">  <span class="keyword">int</span> position, flag = <span class="number">0</span>; <span class="comment">// 使用flag来标记是否还需要继续向下调整</span></div><div class="line">  </div><div class="line">  <span class="comment">// 当i节点有左子节点并且需要继续调整的时候</span></div><div class="line">  <span class="keyword">while</span> ( i * <span class="number">2</span> &lt;= n &amp;&amp; flag == <span class="number">0</span> ) &#123;</div><div class="line">    <span class="comment">// 首先判断与左子节点的关系，用position记录比较大的结点编号</span></div><div class="line">    <span class="keyword">if</span> ( h[i] &lt; h[i * <span class="number">2</span>] ) &#123;</div><div class="line">      position = i * <span class="number">2</span>;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      position = i;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( i * <span class="number">2</span> + <span class="number">1</span> &lt;= n ) &#123;</div><div class="line">      <span class="keyword">if</span> ( h[position] &lt; h[i * <span class="number">2</span> + <span class="number">1</span>] ) &#123; <span class="comment">// 注意这里是 h[position]，说白了也就是3个值中的最大值</span></div><div class="line">        position = i * <span class="number">2</span> + <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 如果最小的编号不是当前编号，说明子节点大于父节点</span></div><div class="line">    <span class="keyword">if</span> ( position != i ) &#123;</div><div class="line">      <span class="comment">// 交换 position 与 i 位置的数字</span></div><div class="line">      swap(position, i);</div><div class="line">      i = position; <span class="comment">// 更新i为交换的子节点的位置，便于继续向下交换</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      flag = <span class="number">1</span>; <span class="comment">// 意味着父节点是最大，不需要调整了</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">create</span><span class="params">()</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = n / <span class="number">2</span>; i &gt;= <span class="number">1</span>; i --) &#123;</div><div class="line">    siftdown(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> num; <span class="comment">// 要排序数字的个数</span></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;num);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;h[i]); <span class="comment">// 将输入的数字顺序初始化到一维数中</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  n = num; <span class="comment">// 表示堆中元素的个数</span></div><div class="line">  </div><div class="line">  <span class="comment">// 创建堆</span></div><div class="line">  create();</div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (n &gt; <span class="number">1</span>) &#123;</div><div class="line">    swap(<span class="number">1</span>, n);</div><div class="line">    n --;</div><div class="line">    siftdown(<span class="number">1</span>);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 删除顶部元素</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= num; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, h[i]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>并且，堆排序的时间复杂度为<br>$$<br>O(NlogN)<br>$$<br>另外，如果求一个数列中第K小的数，只需要建立一个大小为K的最大堆，堆顶就是第K小的数字，时间复杂度为<br>$$<br>O(NlogK)<br>$$<br>树还有很多神奇的用法，比如线段树、树状数组、Trie树、二叉搜索树、红黑树等，这些结构比较复杂，大家可以多多探索。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;树&quot;&gt;&lt;a href=&quot;#树&quot; class=&quot;headerlink&quot; title=&quot;树&quot;&gt;&lt;/a&gt;树&lt;/h4&gt;&lt;p&gt;什么是树，没有回路的就是树，有回路的就是图。树有很多特性：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;树中的任意两个点有且仅有唯一的一条路&lt;/li&gt;
&lt;li&gt;树中如果有n个点，那么它一定恰好有&lt;code&gt;n-1&lt;/code&gt;条边&lt;/li&gt;
&lt;li&gt;在树中任意两点之间加一条，就会构成回路&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;常见的树，有家谱、操作系统的文件夹，目录等。并且我们规定，只要是没有回路的连通无向图就是树。为了确定每一棵树的形态，我们在对一棵树进行讨论的时候，将树中每个点称为&lt;code&gt;结点&lt;/code&gt;或者&lt;code&gt;节点&lt;/code&gt;，在树中，我们可以指定一个特殊的节点-&lt;strong&gt;根&lt;/strong&gt;。有一个根的树叫做有根树。根又叫做根节点，一棵树有且仅有一个根节点。根节点又可以被称为&lt;strong&gt;祖先&lt;/strong&gt;，接下来就是&lt;strong&gt;父节点&lt;/strong&gt;（没有父节点的节点就是根），&lt;strong&gt;子节点&lt;/strong&gt;。如果一个节点没有子节点，这个节点被称为&lt;strong&gt;叶节点&lt;/strong&gt;。如果一个节点既不是根节点也不是叶节点，也可以被称为&lt;strong&gt;内部节点&lt;/strong&gt;，每个节点有&lt;strong&gt;深度&lt;/strong&gt;，深度指的是从根到这个节点的层数（根为第一层）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wilddylan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法第四课</title>
    <link href="https://wilddylan.github.io/2016/10/18/%E7%AE%97%E6%B3%95%E7%AC%AC%E5%9B%9B%E8%AF%BE/"/>
    <id>https://wilddylan.github.io/2016/10/18/算法第四课/</id>
    <published>2016-10-18T07:06:36.000Z</published>
    <updated>2017-02-04T09:02:29.000Z</updated>
    
    <content type="html"><![CDATA[<p>深度和广度是什么</p>
<p>为什么叫做深度与广度优先呢，其实是针对图的遍历而言的，请看</p>
<p><img src="http://img2.imgtn.bdimg.com/it/u=4054526222,762120886&amp;fm=21&amp;gp=0.jpg" alt=""></p>
<p>使用深度优先来便利这个图（具体什么是图，可以去搜索一下图论中关于图的定义）的具体过程是，假设从左边的顶点开始，沿着当前定点的边，走到未访问过的顶点；当没有未访问过的顶点时，返回到上一个点，继续试探别的点（沿着某一条分支走到底，然后回朔，再沿着另一条进行同样的操作）。所有的顶点都走过了或者是提前符合我们的条件，遍历结束。</p>
<p>广度优先的思想是：首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的定点，再访问他们相邻的未被访问过的点定点，直到所有的点都被访问或者提前符合我们的条件，遍历结束。</p>
<a id="more"></a>
<p>使用广度或者深度来遍历图，都会得到这个图的<strong>生成树</strong>，这个以后会提到😤。</p>
<h4 id="城市地图"><a href="#城市地图" class="headerlink" title="城市地图"></a>城市地图</h4><p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0051.PNG" alt=""></p>
<p>假期，小朋友A想去小朋友B家玩，怎么去呢？小朋友A用百度地图搜索除了到B家的最短路径。上边是城市的地图。</p>
<p>数据是这样给出的：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span> <span class="number">8</span></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span> </div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">10</span></div><div class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">3</span> </div><div class="line"><span class="number">2</span> <span class="number">5</span> <span class="number">7</span></div><div class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span></div><div class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">4</span> </div><div class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">5</span> </div><div class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">3</span></div></pre></td></tr></table></figure>
<p>第一行表示有5个城市，8条公路，接下来8行，每行都是类似于a，b，c这样的数据，表示有一条路可以从城市a到b（单向），并且路程有c公里。即a，b，c仅仅表示有一条路可以从城市a到城市b。小朋友A家在1号城市，小朋友B家在5号城市。请求出最短路径。</p>
<p>已知，有5个城市，8条公路，我们用一个5*5的二维数组来存储这些信息。</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">+  <span class="number">1</span> - <span class="number">2</span> - <span class="number">3</span> - <span class="number">4</span> - <span class="number">5</span></div><div class="line"><span class="number">1</span>  <span class="number">0</span>   <span class="number">2</span>  <span class="number">-1</span>  <span class="number">-1</span>  <span class="number">10</span>  </div><div class="line"><span class="number">2</span> <span class="number">-1</span>   <span class="number">0</span>   <span class="number">3</span>  <span class="number">-1</span>   <span class="number">7</span></div><div class="line"><span class="number">3</span>  <span class="number">4</span>  <span class="number">-1</span>   <span class="number">0</span>   <span class="number">4</span>  <span class="number">-1</span></div><div class="line"><span class="number">4</span> <span class="number">-1</span>  <span class="number">-1</span>  <span class="number">-1</span>   <span class="number">0</span>   <span class="number">5</span> </div><div class="line"><span class="number">5</span> <span class="number">-1</span>  <span class="number">-1</span>   <span class="number">3</span>  <span class="number">-1</span>   <span class="number">0</span></div></pre></td></tr></table></figure>
<p>0表示自己到自己的距离，-1表示不可以到达，比如说 <code>map[2][1] = -1</code>意味着从城市2不能到达城市1，接下来我们就要寻找最短的距离了。我们一个一个找，你会发现之前写过这样的代码，对，在算法第三课种，迷宫就是这么想的。一个深度查找就可以知道了（我们来动手写一下代码）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">int</span> min = <span class="number">9999999</span>;</div><div class="line"><span class="keyword">int</span> book[<span class="number">101</span>];</div><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">11</span>][<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> n; <span class="comment">// 多少个城市</span></div><div class="line"><span class="keyword">int</span> m; <span class="comment">// 多少条路</span></div><div class="line"></div><div class="line"><span class="keyword">int</span> des;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> currentCity, <span class="keyword">int</span> distance)</span> </span>&#123;</div><div class="line">  <span class="comment">// 如果当前走过的路，已经大于之前走过的路，直接返回，不需要继续了</span></div><div class="line">  <span class="keyword">if</span> (distance &gt; min) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (currentCity == n) &#123;</div><div class="line">    <span class="keyword">if</span> (distance &lt; min) &#123;</div><div class="line">      min = distance;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">if</span> (<span class="built_in">map</span>[currentCity][i] != <span class="number">-1</span> &amp;&amp; book[i] == <span class="number">0</span>) &#123;</div><div class="line">      book[i] = <span class="number">1</span>;</div><div class="line">      dfs(i, distance + <span class="built_in">map</span>[currentCity][i]);</div><div class="line">      book[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="comment">// 初始化地图</span></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</div><div class="line">      <span class="keyword">if</span> ( i == j ) &#123;</div><div class="line">        <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">map</span>[i][j] = <span class="number">-1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 初始化道路</span></div><div class="line">  <span class="keyword">int</span> a, b, c;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;a, &amp;b, &amp;c);</div><div class="line">    <span class="built_in">map</span>[a][b] = c;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  book[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 从城市1出发</span></div><div class="line">  </div><div class="line">  dfs(<span class="number">1</span>, <span class="number">0</span>);</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%d"</span>, min);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边的地图我们发现城市之间只是单向的通道，如果改为双向的呢？大家把上边的地图修改一下看看。还有，发现了么，我们写了好多代码都离不开book这个数组，嘿嘿。广度优先和深度优先该什么时候使用呢（所有周边的权值相同的时候使用广度，思考为什么）。</p>
<p>第四课其实是第三课的练习与只是的完善，但并不是，接下来我们来探讨最短路径问题：</p>
<h4 id="最短路径"><a href="#最短路径" class="headerlink" title="最短路径"></a>最短路径</h4><h6 id="Floyd-Warshall"><a href="#Floyd-Warshall" class="headerlink" title="Floyd-Warshall"></a>Floyd-Warshall</h6><p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0053.JPG" alt=""></p>
<p>上图中，有4个城市，8条线路，公路上的数字表示这条公路的长短，请注意这些公路是单向的，我们现在需要求任意两个城市之间的最短路程，也就是求2个点之间的最短路径，这个问题也被称为<code>多源最短路径</code>问题。</p>
<p>现在需要一个数据结构来存储图的信息，依旧，跟以前一样，我们可以选择一个4*4的矩阵，比如1号城市到2号城市的距离为2，则设<code>map[1][2]=2</code>，2号城市无法到达4号城市，则设置距离为无穷大（之前我们用的是-1表示不可以到达），并约定一个城市自己到自己的路程为0。具体如下：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">+  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span></div><div class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">2</span>  <span class="number">6</span>  <span class="number">4</span></div><div class="line"><span class="number">2</span>  /  <span class="number">0</span>  <span class="number">3</span>  /</div><div class="line"><span class="number">3</span>  <span class="number">7</span>  /  <span class="number">0</span>  <span class="number">1</span></div><div class="line"><span class="number">4</span>  <span class="number">5</span>  / <span class="number">12</span>  <span class="number">0</span></div></pre></td></tr></table></figure>
<p>通过之前的学习，我们可以使用深度或者广度优先搜索来寻找，即对每两个点都进行一次深度或者广度优先搜索，就可以求得结果，可是还有没有别的办法呢？</p>
<p>根据以往的经验，我们思考下，如果要让任意两点之间的距离变短，只能引入第三个点<code>K</code>，并通过这个点中转，<code>A → K → B</code>，才可能缩短A到B的路程，那么这个中转点是1~n种的哪个点呢？而且有的时候不仅仅通过1个点中转，甚至通过2个点中转可以得到最短的路程（在图上，大家自己比划一下）。将这个问题一般化：当任意两点之间不允许经过第三个点时，这些城市之间的最短路程就是初始路程，假设，目前只允许经过1号顶点，求任意两点（i，j）之间的最短距离，该如何求呢？只需判断</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">map[i][<span class="number">1</span>] + map[<span class="number">1</span>][j] &lt; map[i][j]</div></pre></td></tr></table></figure>
<p>这样，<code>map[i][1]</code>表示i点到1点的路程，<code>map[1][j]</code>表示从1号顶点到j点的路程。这样，i，j是不定的，我们要确认所有的2点之间的最短路程，所以i，j都是1~n循环：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">4</span>; j ++) &#123;</div><div class="line">      <span class="keyword">if</span> (<span class="built_in">map</span>[i][<span class="number">1</span>] + <span class="built_in">map</span>[<span class="number">1</span>][j] &lt; <span class="built_in">map</span>[i][j]) &#123;</div><div class="line">        <span class="built_in">map</span>[i][j] = <span class="built_in">map</span>[i][<span class="number">1</span>] + <span class="built_in">map</span>[<span class="number">1</span>][j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样我们简单的算出了，只中转1号顶点，任意两点间的最短距离。同理，经过别的顶点都是一样的，所以，经过所有的顶点中转：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt;= <span class="number">4</span>; k ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">4</span>; i ++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">4</span>; j ++) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="built_in">map</span>[i][k] + <span class="built_in">map</span>[k][j] &lt; <span class="built_in">map</span>[i][j]) &#123;</div><div class="line">          <span class="built_in">map</span>[i][j] = <span class="built_in">map</span>[i][k] + <span class="built_in">map</span>[k][j];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>对你没看错，就是这样么简单，这种思想也被称为动态规划。核心代码只有5行，不过，它的时间复杂度为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(<span class="keyword">N</span>^<span class="number">3</span>)</div></pre></td></tr></table></figure>
<blockquote>
<p>但是要注意，这种算法不能解决包含<code>负权回路</code>的图，自行科普一下什么叫做负权环。</p>
<p>算了，因为带有负权环的图没有最短路径，查了之后思考一下。</p>
</blockquote>
<p>如果对时间要求不高，使用这种方法可谓最容易了，当然还有更快的算法：</p>
<h4 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h4><p>上节我们说的是多源最短路径问题，任意的两个点，这次呢，我们来解决确定一个顶点，到其他各个顶点的最短路径，也称为<code>单源最短路径</code>问题，先来看一下图：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0054.JPG" alt=""></p>
<p>如上图，我们求一下，从1号定点，到达其余各个点的最短路程，与之前的算法一样，我们使用二维数组来表示这些点之间的路程：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">+  <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line"><span class="number">1</span>  <span class="number">0</span>  <span class="number">1</span> <span class="number">12</span>  /  /  /</div><div class="line"><span class="number">2</span>  /  <span class="number">0</span>  <span class="number">9</span>  <span class="number">3</span>  /  /</div><div class="line"><span class="number">3</span>  /  /  <span class="number">0</span>  /  <span class="number">5</span>  /</div><div class="line"><span class="number">4</span>  /  /  <span class="number">4</span>  <span class="number">0</span> <span class="number">13</span> <span class="number">15</span></div><div class="line"><span class="number">5</span>  /  /  /  /  <span class="number">0</span>  <span class="number">4</span></div><div class="line"><span class="number">6</span>  /  /  /  /  /  <span class="number">0</span></div></pre></td></tr></table></figure>
<p>还需使用一个一维数组来存储1号顶点到其余点的路程，并将此时数组种的值描述为<code>估计值</code>：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">顶点: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line">距离: <span class="number">0</span>  <span class="number">1</span> <span class="number">12</span>  /  /  /</div></pre></td></tr></table></figure>
<p>既然是求1号顶点到其余各个点的值，那就先找一个离1号点最近的点，也就是2号点，这个时候，2号点的值从估计值变为确定值，即1号顶点到2号顶点的最短路径就是当前数组中的值。</p>
<blockquote>
<p>为什么？因为1号点的周围，除了2号点，别的点都要远，所以选择2号点作为接下来的中转点没问题吧？</p>
</blockquote>
<p>接着想，看上图，通过2号点，我们可以到达3号和4号，所以接下来我们要想的是，2到3能否让1到3更小。上边的数组我们用distance命名，即比较，<code>distance[3]</code>和<code>distance[2]+map[2][3]</code>的大小。<code>distance[2]</code>大家还记吧，表示点1到点2的路程，<code>map[2][3]</code>表示点2到点3的路程。我们发现，<code>distance[3] &gt; distance[2]+map[2][3]</code>，所以把<code>distance[3]</code>的值更新为10，这个过程，有个专业的术语，叫做<code>松弛</code>，1号到3号点的路程，通过2号到3号边松弛成功，这就是<code>Dijkstra</code>算法的主要思想：通过<code>边</code>来松弛1号点到其余点的路程。同理，对2号到4号点的距离可以松弛为<code>distance[2]+map[2][4]</code> ，所以把<code>distance[4]</code>改为4。2号所有的边都松弛结束后：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">顶点: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line">距离: <span class="number">0</span>  <span class="number">1</span> <span class="number">10</span>  <span class="number">4</span>  /  /</div></pre></td></tr></table></figure>
<p>接下来在剩下的3、4、5、6点中，选出距离1号最近的点，为4号点，然后对4号点的所有出边进行松弛（4到3，4到5，4到6）（为什么？我们确定了点1，点2，所以在松弛点4周边的时候，前面的线路就是1-2-4 然后到3，到5，到6）：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">顶点: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line">距离: <span class="number">0</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">4</span> <span class="number">17</span> <span class="number">19</span></div></pre></td></tr></table></figure>
<p>接着在余下的3、5、6中选择最近的点3进行松弛（3到5）（点1，点2，点4，点3确定，所以接下来是1-2-4-3-5）：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">顶点: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line">距离: <span class="number">0</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">4</span> <span class="number">13</span> <span class="number">19</span></div></pre></td></tr></table></figure>
<p>继续在余下的5、6点种对点5进行松弛（1-2-4-3-5）（5到6）：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">顶点: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span>  <span class="number">6</span></div><div class="line">距离: <span class="number">0</span>  <span class="number">1</span>  <span class="number">8</span>  <span class="number">4</span> <span class="number">13</span> <span class="number">17</span></div></pre></td></tr></table></figure>
<p>现在，我们已经确定了所有的距离，简单不。我们用代码实现上述的思路：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">10</span>][<span class="number">10</span>], distance[<span class="number">10</span>], book[<span class="number">10</span>];</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> UNACCESS_DISTANCE = <span class="number">999999</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> n, m; <span class="comment">// N表示点的个数，M表示边的条数</span></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</div><div class="line">      <span class="keyword">if</span> ( i == j ) &#123;</div><div class="line">        <span class="built_in">map</span>[i][j] = <span class="number">0</span>;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">map</span>[i][j] = UNACCESS_DISTANCE;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 读入边</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">    <span class="keyword">int</span> tx, ty, td;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;tx, &amp;ty, &amp;td);</div><div class="line">    <span class="built_in">map</span>[tx][ty] = td;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 初始化distance数组，这里是1号顶点到其余点的初始路程</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    distance[i] = <span class="built_in">map</span>[<span class="number">1</span>][i];</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 标记数组初始化</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    book[i] = <span class="number">0</span>; <span class="comment">// 全部未定值</span></div><div class="line">  &#125;</div><div class="line">  book[<span class="number">1</span>] = <span class="number">1</span>; <span class="comment">// 我们通过把book置为1表示该点已经确定值。</span></div><div class="line">  </div><div class="line">  <span class="comment">// 核心算法</span></div><div class="line">  <span class="keyword">int</span> min = UNACCESS_DISTANCE;</div><div class="line">  <span class="keyword">int</span> fixedValue = <span class="number">0</span>; <span class="comment">// 定值</span></div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123; <span class="comment">// 点1定了，所以少循环一次就够了</span></div><div class="line">    <span class="comment">// 找到距离1号的最近的点</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= n; j ++) &#123;</div><div class="line">      <span class="keyword">if</span> (book[j] == <span class="number">0</span> &amp;&amp; distance[j] &lt; min) &#123;</div><div class="line">        min = distance[j];</div><div class="line">        fixedValue = j;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    book[fixedValue] = <span class="number">1</span>;</div><div class="line">    min = UNACCESS_DISTANCE; <span class="comment">// 归位寻找最小值</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n; k ++) &#123;</div><div class="line">      <span class="keyword">if</span> ( <span class="built_in">map</span>[fixedValue][k] &lt; UNACCESS_DISTANCE ) &#123; <span class="comment">// 是可以连通的</span></div><div class="line">        <span class="keyword">if</span> ( distance[fixedValue] + <span class="built_in">map</span>[fixedValue][k] &lt; distance[k] ) &#123; <span class="comment">// 按照思路比较</span></div><div class="line">          distance[k] = distance[fixedValue] + <span class="built_in">map</span>[fixedValue][k];</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"到%d点%d "</span>, i, distance[i]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>通过上述的代码，我们可以看出，时间复杂度为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(<span class="keyword">N</span>^<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>这里其实还可以优化，我们以后也会提到。另外，对于边数少于N^2的稀疏图来说<code>M远远小于N*N的图，M相对大的图，叫做稠密图</code>，我们可以使用<strong>邻接表</strong>（等下会说）来代替邻接矩阵，使得整个时间复杂度优化到：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(M+<span class="keyword">N</span>)logN</div></pre></td></tr></table></figure>
<p>最快的情况，就是M=N^2，这个时候，(M+N)logN要比N*N还大。但是大多数情况下，边不会有那么多。接下来我们主要讲解邻接表，先看数据</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="number">4</span> <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">9</span></div><div class="line"><span class="number">4</span> <span class="number">3</span> <span class="number">8</span></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span></div><div class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">6</span></div><div class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">7</span></div></pre></td></tr></table></figure>
<p>第一行表示顶点个数与边数，接下来的每行，表示x到y的路程为z。现在要使用邻接表来存储这个图，先给出代码如下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> n, m; <span class="comment">// 点、边</span></div><div class="line">  </div><div class="line">  <span class="comment">// u、v、w数组的大小，要根据实际情况来设置，一般要比m大1</span></div><div class="line">  <span class="keyword">int</span> u[<span class="number">6</span>], v[<span class="number">6</span>], w[<span class="number">6</span>];</div><div class="line">  </div><div class="line">  <span class="comment">// first和next数组要比n大1</span></div><div class="line">  <span class="keyword">int</span> first[<span class="number">5</span>], next[<span class="number">5</span>];</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  </div><div class="line">  <span class="comment">// 初始化first数组1~n的值为-1，表示1~n顶点暂时没有边</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    first[i] = <span class="number">-1</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]); <span class="comment">// 读入每条边</span></div><div class="line">    <span class="comment">// 重点操作</span></div><div class="line">    next[i] = first[u[i]];</div><div class="line">    first[u[i]] = i;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里展示的是使用数组来实现邻接表，首先我们为每一条边进行1~m的编号，用u、v、w三个数组来记录每条边的信息，即第i条边用<code>u[i],v[i]-&gt;w[i]</code>来表示，first数组的<code>1-&gt;n</code>分别用来存储1-&gt;n号点的第一条边的编号，即<code>first[u[i]]</code>保存点<code>u[i]</code>的第一条边的编号，<code>next[i]</code>存储<code>编号为i的边</code>的<code>下一条边</code>的编号。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0056.JPG" alt=""></p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0057.JPG" alt=""></p>
<p>接下来如何遍每一条边呢？我们之前说过，其实first数组存着每个顶点i的第一条边，比如1号点的第一条边是编号为5的边（1，3，7），2号点的第一条边是编号为4的边（2，4，6），3号点没有出向边，4号点的第一条边是编号为2的边（4，3，8）。那么如何遍历1号点的每一条边呢？在找到1号点的第一条边后，剩下的都可以在next数组中依次找到：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> k = first[<span class="number">1</span>];</div><div class="line"><span class="keyword">while</span> (k != <span class="number">-1</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, u[k], v[k], w[k]);</div><div class="line">    k = next[k];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>输出了</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">7</span></div><div class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">9</span></div></pre></td></tr></table></figure>
<p>细心的人会发现，此时遍历某个点的边的时候的遍历顺序，正好与读入的时候顺序相反，因为在每个点插入边的时候，都是直接插入<code>表</code>的首部而不是尾部，不过这并不会产生任何问题，这恰好是奇妙之处。遍历每个定点的边：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">int</span> k = first[i];</div><div class="line">    <span class="keyword">while</span> (k != <span class="number">-1</span>) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d %d %d\n"</span>, u[k], v[k], w[k]);</div><div class="line">      k = next[k];</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可以发现，使用邻接表存储图的时候，时间空间复杂度是</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(M)</div></pre></td></tr></table></figure>
<p>遍历一条边的时间复杂度也是同样的，如果一张图是稀疏图的话，选用邻接表来存储要比使用矩阵好的多。</p>
<p>Dijkstra算法虽然不错，但是依旧无法解决负权边（哈哈，就是有边的路程是负数）的图，所以我们引出一个无论是思想上还是代码实现上都堪称完美的最短路径算法：</p>
<h4 id="Bellman-Ford"><a href="#Bellman-Ford" class="headerlink" title="Bellman-Ford"></a>Bellman-Ford</h4><p>算法极其简单，核心的代码只有4行，我们先来看看它的样子：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= n - <span class="number">1</span>; k ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">      <span class="keyword">if</span> (distance[v[i]] &gt; distance[u[i]] + w[i]) &#123;</div><div class="line">        distance[v[i]] = distance[u[i]] + w[i];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上边的代码中，外层循环一共循环了<code>n-1</code>次，内部循环循环了M次，即枚举每一条边，distance数组的作用与Dijkstra算法一样，记录源点到各个点的最短路径，u、v、w三个数组用来记录边的信息。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (distance[v[i]] &gt; distance[u[i]] + w[i]) &#123;</div><div class="line">  distance[v[i]] = distance[u[i]] + w[i];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>上面这行代码的意思是，看看能否通过<code>u[i]-&gt;v[i]（值为w[i]）</code>这条边，使得1号点到<code>v[i]</code>号顶点的距离变短。即1号点到<code>u[i]</code>号点的距离加上<code>u[i]-&gt;v[i]</code>这条边的值，是否会比原先1号点到<code>v[i]</code>号点的距离<code>dis[v[i]]</code>要小，这一点与松弛的操作是一样的，现在我们要把所有的边都松弛一遍：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">      <span class="keyword">if</span> (distance[v[i]] &gt; distance[u[i]] + w[i]) &#123;</div><div class="line">        distance[v[i]] = distance[u[i]] + w[i];</div><div class="line">      &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>把每条边松弛一遍后，会有什么效果呢？我们来看个具体的例子，求下图1号点到其余所有点的最短路径。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0058.JPG" alt=""></p>
<p>我们还是使用一个distance数组来存储1号点到所有点的距离：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></div><div class="line">distance: <span class="number">0</span>  /  /  /  /</div></pre></td></tr></table></figure>
<p>我们开始对每一次输入的边进行松弛：</p>
<p>首先输入了2，3，2，所以就是对2-&gt;3这条边松弛，即判断<code>distance[3]&gt;distance[2]+2</code>?此时，2与3都是未知，所以无穷大与无穷大+2不可以做比较，所以2-&gt;3松弛失败，接着对第二个输入1，2，-3进行松弛，即判断<code>distance[2]&gt;distance[1]+(-3)</code>，<code>distance[1]</code>是0，所以<code>distance[2]为无穷大，大于-3</code>，所遇<code>distance[2] = -3</code>，依次对每组输入的数字进行松弛，得到</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></div><div class="line">distance: <span class="number">0</span> <span class="number">-3</span>  /  /  <span class="number">5</span></div></pre></td></tr></table></figure>
<p>我们发现，对每条边松弛之后，<code>distance[2]</code>与<code>distance[5]</code>的值变小。即1号点到2号与5号的路程都变小了。接下来我们对所有的边进行下一轮松弛：</p>
<p>过程与上一轮一样（过程依旧是从第一组输入的边开始，大家脑补），结果为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></div><div class="line">distance: <span class="number">0</span> <span class="number">-3</span> <span class="number">-1</span>  <span class="number">2</span>  <span class="number">5</span></div></pre></td></tr></table></figure>
<p>在这一轮松弛后，我们发现，现在通过2 3 2这条边，可以使1号点到3号点的具体变短。实际上，第一轮松弛过后，得到的是从1号点<code>只能经过一条边</code>到达其余各点的最短路径长度。第二轮松弛过后，得到的是从1号点<code>最多经过2条边</code>到达各个点的最短路径长度，当然K轮就是K条边。现在有一个新的问题了，K是多少？多少轮可以让我们求得答案呢？</p>
<p>只需要进行n-1轮就够了，因为在一个含有n个定点的图中，任意两点之间的最短路径最多包含n-1边。有人要问了，不是还有回路么？答案是，不可能，最短路径肯定是一个不包含回路的路径，假设有负数路程，那么每走一次就会减少一次，很明显不可能的。接下来，我们完成上边的后2轮松弛，第三轮过后：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></div><div class="line">distance: <span class="number">0</span> <span class="number">-3</span> <span class="number">-1</span>  <span class="number">2</span>  <span class="number">4</span></div></pre></td></tr></table></figure>
<p>第四轮后：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">position: <span class="number">1</span>  <span class="number">2</span>  <span class="number">3</span>  <span class="number">4</span>  <span class="number">5</span></div><div class="line">distance: <span class="number">0</span> <span class="number">-3</span> <span class="number">-1</span>  <span class="number">2</span>  <span class="number">4</span></div></pre></td></tr></table></figure>
<p>最后，说白了，这个算法就是，对所有输入的边，进行<strong>最多</strong>n-1次松弛，但是我们会发现，我们在想的时候，一些已经确定的点，我们还是想了一下对他松弛的过程，是不是有些浪费呢？先来看完整的代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> n, m; <span class="comment">// 点、边</span></div><div class="line">  </div><div class="line">  <span class="keyword">int</span> distance[<span class="number">10</span>]; <span class="comment">// 用来存放源距各个点的路程</span></div><div class="line">  <span class="keyword">int</span> u[<span class="number">10</span>], v[<span class="number">10</span>], w[<span class="number">10</span>]; <span class="comment">// u -&gt; v 的路程是 w</span></div><div class="line">  <span class="keyword">int</span> UNACCESS_VALUE = <span class="number">999999</span>; <span class="comment">// 模拟正无穷大</span></div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]);</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 初始化路程数组</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123; </div><div class="line">    distance[i] = UNACCESS_VALUE;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  distance[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">  <span class="comment">// 核心算法</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</div><div class="line">      <span class="comment">// 按照刚刚的思想去写代码：源到目的地的距离 &gt; 源到起点的距离 + 起点到目的地的距离</span></div><div class="line">      <span class="keyword">if</span> ( distance[v[j]] &gt; distance[u[j]] + w[j] ) &#123;</div><div class="line">        distance[v[j]] = distance[u[j]] + w[j];</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, distance[i]);</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>此外，这个算法还可以判断一个图是否有负权回路，如果在n-1轮后，依然存在</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> ( distance[v[j]] &gt; distance[u[j]] + w[j] ) &#123;</div><div class="line">  distance[v[j]] = distance[u[j]] + w[j];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>意味着，n-1轮松弛后，还可以继续松弛，说明有负权回路。这个算法的时间复杂度为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(M*<span class="keyword">N</span>)</div></pre></td></tr></table></figure>
<p>这个时间复杂度貌似高于Dijkstra算法，我们还可以继续对它进行优化。在实际操作中（上边的例子也是），其实不需要n-1次就能算出最短路径，我们也说过，最多使用n-1次，所以我们可以添加一个变量，用来标记数组distance是否在本轮松弛中发生了变化，如果没有发生变化就提前跳出循环。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> check = <span class="number">0</span>;</div><div class="line">  </div><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - <span class="number">1</span>; i ++) &#123;</div><div class="line">    check = <span class="number">0</span>; <span class="comment">// 标记本轮松弛是否会发生</span></div><div class="line">    </div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</div><div class="line">      <span class="keyword">if</span> ( distance[v[j]] &gt; distance[u[j]] + w[j] ) &#123;</div><div class="line">        distance[v[j]] = distance[u[j]] + w[j];</div><div class="line">        </div><div class="line">        check = <span class="number">1</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( check == <span class="number">0</span> ) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>刚才我们也提到过，其实一些已经松弛成功的边还在被无用的松弛，所以我们继续优化，<strong>每次只对最短路径估计值发生了变化的点的所有出边进行松弛</strong>，我们称为Bellman-Ford的队列优化。</p>
<p>每次选取队首点u，对点u的所有出边进行松弛操作，例如有一条u到v的边，如果通过n到v这条边使源点到点v的路程变短，而且点v不在当前的队列中，就将点v放入队尾。需要注意的是，同一个点同时在队列中出现多次是毫无意义的，所以我们需要一个数组来进行去重。在对点u的所有出边松弛完毕后，将u出队。反复操作至队列为空。我们用代码来讲解：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="comment">// 还记得之前讲到的邻接表么？这里我们使用邻接表来存储数据</span></div><div class="line">  <span class="keyword">int</span> n, m;</div><div class="line">  </div><div class="line">  <span class="comment">// first 比n大1 next比m大1</span></div><div class="line">  <span class="keyword">int</span> first[<span class="number">6</span>], next[<span class="number">8</span>];</div><div class="line">  <span class="keyword">int</span> u[<span class="number">8</span>], v[<span class="number">8</span>], w[<span class="number">8</span>];</div><div class="line">  <span class="keyword">int</span> distance[<span class="number">8</span>];</div><div class="line">  <span class="keyword">int</span> book[<span class="number">6</span>];</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    first[i] = <span class="number">-1</span>; <span class="comment">// 初始化first数组，都暂时无边</span></div><div class="line">    book[i] = <span class="number">0</span>; <span class="comment">// 初始化标记数组，都不在队列中</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= m; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d %d %d"</span>, &amp;u[i], &amp;v[i], &amp;w[i]);</div><div class="line">    <span class="comment">// 建立邻接表的关联</span></div><div class="line">    next[i] = first[u[i]];</div><div class="line">    first[u[i]] = i;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 初始化初始路程</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    distance[i] = <span class="number">999999</span>;</div><div class="line">  &#125;</div><div class="line">  distance[<span class="number">1</span>] = <span class="number">0</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 创建队列</span></div><div class="line">  <span class="keyword">int</span> <span class="built_in">queue</span>[<span class="number">101</span>] = &#123;<span class="number">0</span>&#125;, head = <span class="number">1</span>, tail = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 将1号顶点入队</span></div><div class="line">  <span class="built_in">queue</span>[tail] = <span class="number">1</span>;</div><div class="line">  tail ++;</div><div class="line">  </div><div class="line">  <span class="comment">// 标记这个点已经在队列中</span></div><div class="line">  book[<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> k = <span class="number">0</span>;</div><div class="line">  <span class="keyword">while</span> (head &lt; tail) &#123; <span class="comment">// 将n-1的循环改为队列循环</span></div><div class="line">    </div><div class="line">    <span class="comment">// 邻接表的遍历方式</span></div><div class="line">    k = first[<span class="built_in">queue</span>[head]];</div><div class="line">    <span class="keyword">while</span> (k != <span class="number">-1</span>) &#123;</div><div class="line">      <span class="comment">// 是否可以松弛</span></div><div class="line">      <span class="keyword">if</span> ( distance[v[k]] &gt; distance[u[k]] + w[k] ) &#123;</div><div class="line">        distance[v[k]] = distance[u[k]] + w[k];</div><div class="line">        </div><div class="line">        <span class="comment">// 松弛成功，当前成功松弛的点是 v[k].</span></div><div class="line">        <span class="comment">// 入队，检查标记</span></div><div class="line">        <span class="keyword">if</span> (book[v[k]] == <span class="number">0</span>) &#123;</div><div class="line">          <span class="built_in">queue</span>[tail] = v[k];</div><div class="line">          tail ++;</div><div class="line">          book[v[k]] = <span class="number">1</span>;</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      k = next[k];</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 对首已经松弛结束了，置为0，因为本次可能不是松弛的最终结果</span></div><div class="line">    book[<span class="built_in">queue</span>[head]] = <span class="number">0</span>;</div><div class="line">    head ++;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, distance[i]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>检查一个数字是否在队列中也可以遍历，但是时间复杂度是O(N)，但是使用book就变成了O(1)。并且，如果一个点，进入到队列的次数超出n次，这图也存在负权回路。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/IMG_0059.JPG" alt=""></p>
<p>至此，最短路径算法告一段落了，以后有优化我们再提起。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;深度和广度是什么&lt;/p&gt;
&lt;p&gt;为什么叫做深度与广度优先呢，其实是针对图的遍历而言的，请看&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://img2.imgtn.bdimg.com/it/u=4054526222,762120886&amp;amp;fm=21&amp;amp;gp=0.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用深度优先来便利这个图（具体什么是图，可以去搜索一下图论中关于图的定义）的具体过程是，假设从左边的顶点开始，沿着当前定点的边，走到未访问过的顶点；当没有未访问过的顶点时，返回到上一个点，继续试探别的点（沿着某一条分支走到底，然后回朔，再沿着另一条进行同样的操作）。所有的顶点都走过了或者是提前符合我们的条件，遍历结束。&lt;/p&gt;
&lt;p&gt;广度优先的思想是：首先以一个未被访问过的顶点作为起始顶点，访问其所有相邻的顶点，然后对每个相邻的定点，再访问他们相邻的未被访问过的点定点，直到所有的点都被访问或者提前符合我们的条件，遍历结束。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wilddylan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法第三课</title>
    <link href="https://wilddylan.github.io/2016/10/15/%E7%AE%97%E6%B3%95%E7%AC%AC%E4%B8%89%E8%AF%BE/"/>
    <id>https://wilddylan.github.io/2016/10/15/算法第三课/</id>
    <published>2016-10-15T08:47:57.000Z</published>
    <updated>2017-02-04T09:02:31.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h4><p>枚举算法又被称为穷举算法，字面看很暴力，先来看一个例子：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">口口口+口口口=口口口？</div></pre></td></tr></table></figure>
<p>3位数与3位数相加等于一个3位数（使用1~9，不能重复），用穷举来说，就是列举所有的可能。这样写for循环的话，我们要写9个循环嵌套（9个数字，每个都要循环），然后通过一大串的判断语句之后，才能得到我们的答案（答案还需要除以2，173+286与286+173是一样的），有兴趣或者有时间的同学可以用穷举的思想试一下。</p>
<a id="more"></a>
<p>接下来，我们再看另外一个例子：123，3个数字全排列，可能是123，132，213，231，321，312；那么1234全排列呢？123456789全排列呢？1~n的全排列呢？使用穷举，我们的想法是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=<span class="number">3</span>; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;=<span class="number">3</span>; j ++) &#123;</div><div class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= <span class="number">3</span>; k++) &#123;</div><div class="line">        <span class="keyword">if</span> ( i != k &amp;&amp; i != j &amp;&amp; j != k ) &#123;</div><div class="line">          <span class="built_in">printf</span>(<span class="string">"%d%d%d\n"</span>, i, j, k);</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>那1234，就是4个for，1~9就是9个for…. 显然，比较傻，我们接着往下想（先剧透一下，本文其实不叫枚举，叫深度搜索）：如果现在有3张扑克牌，3个盒子，把牌放入盒子，其实我们发现，每次的操作都是相同的，只不过是把手上剩余的排放入当前的盒子中。所以我们大致的伪代码描述一下这样的思维：</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">void nextStep(int step) &#123;</div><div class="line">  for (int i = 0; i &lt;= n; i ++) &#123;</div><div class="line">    if 手上有牌 &#123;</div><div class="line">      放入当前的step</div><div class="line">      nextStep(step + 1)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>按照这样的思维，我们来解决上边的问题：首先准备book数组用来标记所有的扑克牌是否已经使用，然后使用numbox表示盒子，</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> numbox[<span class="number">10</span>], book[<span class="number">10</span>], count; <span class="comment">// 我们假定，输入的范围就是1~9, numbox为盒子, book标记这张扑克还在不在手上</span></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stepTo</span><span class="params">(<span class="keyword">int</span> step)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;count);</div><div class="line">  stepTo(<span class="number">1</span>); <span class="comment">// 从第一步开始</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">stepTo</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123; <span class="comment">// Step表示当前是第几个小盒子的面前，或者说第几步</span></div><div class="line">  <span class="keyword">if</span> ( step == count + <span class="number">1</span> ) &#123; <span class="comment">// count为盒子数，如果step==count+1意味着count个盒子全部放好了扑克</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i ++) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, numbox[i]); <span class="comment">// 依次打印盒子中的数字</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    <span class="keyword">return</span> ; <span class="comment">// 结束本次流程</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 此时，我们需要往盒子中放入扑克牌</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i ++) &#123; <span class="comment">// 循环扑克牌</span></div><div class="line">    <span class="comment">// 判断扑克牌是否在手中（book数组标记位是否为0, 1表示已经用了）</span></div><div class="line">    <span class="keyword">if</span> ( book[i] == <span class="number">0</span> ) &#123;</div><div class="line">      numbox[step] = i; <span class="comment">// 当前的盒子放入该扑克牌</span></div><div class="line">      book[i] = <span class="number">1</span>; <span class="comment">// 标记为使用</span></div><div class="line">      </div><div class="line">      stepTo(step + <span class="number">1</span>); <span class="comment">// 下一步</span></div><div class="line">      book[i] = <span class="number">0</span>; <span class="comment">// 将试过的扑克牌置为未使用</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>其中的核心代码，其实是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i ++) &#123; <span class="comment">// 循环扑克牌</span></div><div class="line">    <span class="keyword">if</span> ( book[i] == <span class="number">0</span> ) &#123;</div><div class="line">      numbox[step] = i; <span class="comment">// 当前的盒子放入该扑克牌</span></div><div class="line">      book[i] = <span class="number">1</span>; <span class="comment">// 标记为使用</span></div><div class="line">      stepTo(step + <span class="number">1</span>); <span class="comment">// 下一步</span></div><div class="line">      book[i] = <span class="number">0</span>; <span class="comment">// 将试过的扑克牌置为未使用</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>基本类似于我们刚才的想法，现在我们来逐行解释一下：</p>
<ol>
<li>从1开始，循环每张扑克牌</li>
<li>book数组是我们用来标记扑克牌是否使用的，这里 ==0意味这这张牌没有使用</li>
<li>将这张牌，放入当前的盒子</li>
<li>本次循环中，将这张牌标记为已经使用</li>
<li>在这张牌已经使用的情况下，进行下一步的寻找</li>
<li>将本次循环使用的牌标记为0，因为后边还需要使用这张牌。</li>
</ol>
<p>3，4，5，6行代码，可能大家理解起来会很吃力，一定要慢慢的想：</p>
<blockquote>
<p>当前的扑克，已经放入了当前的盒子，那么在寻找下一个盒子放什么扑克之前，当前使用了的扑克需要 <code>book[i] = 1</code>。<br>调用了下一步之后，由于这张牌在以后的情况中还会被继续使用，所以我们把book位置为未使用<br>(这里因为我们是先进入下一步，然后置扑克为未使用，所以对第5行的下一步寻找没有影响，但是如果不置为1，下次循环这张牌就不能使用了。<br>这是一个链式的思维，一点点在调用下一步的时候减少扑克，<code>递归的思维就不说了哈</code>，如果没想明白，希望大家使用笔模拟一下for的数据变动)</p>
</blockquote>
<p>以上的代码，被称为深度搜索（Depth First Search，DFS），关键的思想就是<code>当下该如何做，以后的做法和当下是一样的</code>。深度搜索的基本模型是：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">  判断边界</div><div class="line">  尝试每一种可能</div><div class="line">      继续下一步</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们利用这种思维来解决开篇那个使用穷举需要9个循环嵌套的问题：首先是9个盒子，然后9张牌：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> book[<span class="number">10</span>], numbox[<span class="number">10</span>];</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> box)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( box == <span class="number">10</span> ) &#123; <span class="comment">// box == 9 + 1, 意味着走过了9个放数字的步骤</span></div><div class="line">    <span class="comment">// 口口口 + 口口口 = 口口口</span></div><div class="line">    <span class="keyword">int</span> numberA = numbox[<span class="number">1</span>] * <span class="number">100</span> + numbox[<span class="number">2</span>] * <span class="number">10</span> + numbox[<span class="number">3</span>];</div><div class="line">    <span class="keyword">int</span> numberB = numbox[<span class="number">4</span>] * <span class="number">100</span> + numbox[<span class="number">5</span>] * <span class="number">10</span> + numbox[<span class="number">6</span>];</div><div class="line">    <span class="keyword">int</span> results = numbox[<span class="number">7</span>] * <span class="number">100</span> + numbox[<span class="number">8</span>] * <span class="number">10</span> + numbox[<span class="number">9</span>];</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( numberA + numberB == results ) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d%d%d + %d%d%d = %d%d%d"</span>, numbox[<span class="number">1</span>], numbox[<span class="number">2</span>], numbox[<span class="number">3</span>], numbox[<span class="number">4</span>], numbox[<span class="number">5</span>], numbox[<span class="number">6</span>], numbox[<span class="number">7</span>], numbox[<span class="number">8</span>], numbox[<span class="number">9</span>]);</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"\n"</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>; <span class="comment">// 结束本次流程</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">9</span>; i ++) &#123;<span class="comment">// 循环数字</span></div><div class="line">    <span class="keyword">if</span> ( book[i] == <span class="number">0</span> ) &#123; <span class="comment">// 未使用的数字</span></div><div class="line">      numbox[box] = i;</div><div class="line">      book[i] = <span class="number">1</span>;</div><div class="line">      dfs(box + <span class="number">1</span>); <span class="comment">// 下一步</span></div><div class="line">      book[i] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  dfs(<span class="number">1</span>); <span class="comment">// 从第一个盒子开始放入</span></div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>是不是相当的简单，接下来的去重，就大家自己做吧，我们接着往下看：<strong>最短路径问题</strong>（其实也不算，最短路径后边有自己的算法…，这里起名阻塞了）。</p>
<p>我们来看迷宫问题，假如有一个迷宫，迷宫中存在障碍物，我们如何能从起点找到到达目标点的最短步数呢？解决这个问题，首先我们要用一个二维数组来表示迷宫，默认全为0，迷宫中的障碍物用1表示，然后开始写代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> book[<span class="number">51</span>][<span class="number">51</span>]; <span class="comment">// 标记走过的点</span></div><div class="line"><span class="keyword">int</span> minStep = <span class="number">9999999</span>;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Maze &#123;</div><div class="line">  <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>];</div><div class="line">  <span class="keyword">int</span> n; <span class="comment">// 行</span></div><div class="line">  <span class="keyword">int</span> m; <span class="comment">// 列</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> StartPoint &#123;</div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="keyword">int</span> y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> EndPoint &#123;</div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="keyword">int</span> y;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">struct</span> Maze maze;</div><div class="line"><span class="keyword">struct</span> StartPoint sPoint;</div><div class="line"><span class="keyword">struct</span> EndPoint ePoint;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;maze.n, &amp;maze.m);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=maze.n ; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= maze.m; j ++) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;maze.<span class="built_in">map</span>[i][j]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  sPoint.x = <span class="number">1</span>, sPoint.y = <span class="number">1</span>; <span class="comment">// 设置起点</span></div><div class="line">  book[sPoint.x][sPoint.y] = <span class="number">1</span>; <span class="comment">// 防止后边重复走起点</span></div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"输入结束地址: "</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;ePoint.x, &amp;ePoint.y);</div><div class="line">  </div><div class="line">  dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">0</span>); <span class="comment">// 初始步是0</span></div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"%d\n"</span>, minStep);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> step)</span> </span>&#123;</div><div class="line">  <span class="comment">// 4个方向，右、下、左、上</span></div><div class="line">  <span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = &#123;</div><div class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</div><div class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;</div><div class="line">  &#125;;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> tx, ty;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> ( x == ePoint.x &amp;&amp; y == ePoint.y ) &#123; <span class="comment">// 到了目标点</span></div><div class="line">    <span class="keyword">if</span> (step &lt; minStep) &#123;</div><div class="line">      minStep = step; <span class="comment">// 更新最小的步数</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 思考下一步可能的位置点</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123; <span class="comment">// 4中方向可能走</span></div><div class="line">    tx = x + next[i][<span class="number">0</span>];</div><div class="line">    ty = y + next[i][<span class="number">1</span>];</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否越界</span></div><div class="line">    <span class="keyword">if</span> ( tx &lt; <span class="number">1</span> || tx &gt; maze.n || ty &lt; <span class="number">1</span> || ty &gt; maze.m ) &#123;</div><div class="line">      <span class="keyword">continue</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 判断是否为障碍物或者是已经走过的点</span></div><div class="line">    <span class="keyword">if</span> ( maze.<span class="built_in">map</span>[tx][ty] == <span class="number">0</span> &amp;&amp; book[tx][ty] == <span class="number">0</span> ) &#123;</div><div class="line">      book[tx][ty] = <span class="number">1</span>;</div><div class="line">      dfs(tx, ty, step + <span class="number">1</span>);</div><div class="line">      book[tx][ty] = <span class="number">0</span>;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的，解决了迷宫最短路径问题。但是仅仅是这样么，并不是，接下来介绍一种叫做<strong>广度优先搜索</strong>的方法，简称BFS（Breadth First Search）。用言语描述，2个方法的区别就是，深度搜索是每次都走到极致，然后在下一次，而广度则是每次都往外同时扩张一层：我们继续使用迷宫的例子去寻找到达目的地的最短距离：</p>
<ol>
<li>从1，1开始，我们可以到达的点是 1，2与2， 1两个点，接下来2，2这个点都可以到达，所以我们依旧需要标记位来标记点已经被走过避免重复，因为步数是一样的，所以无关紧要了（2个点一步都可以到达另一个点，岂不是步数一样么）。</li>
</ol>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">迷宫：</div><div class="line"><span class="number">0</span>→<span class="number">0</span> <span class="number">1</span> <span class="number">0</span></div><div class="line">↓ ↓</div><div class="line"><span class="number">0</span> <span class="number">0</span>→<span class="number">0</span> <span class="number">0</span> </div><div class="line">↓ ↓</div><div class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">1</span> <span class="number">0</span> </div><div class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">0</span> <span class="number">0</span> </div><div class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>使用这种扩散的思想，我们很容易想到，既然是一层一层，而且有顺序链式的关系，我们可以使用队列来完成（队列忘了可以去看算法二中的代码），我们来写代码研究一下：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> node &#123;</div><div class="line">  <span class="keyword">int</span> x; <span class="comment">// 横坐标</span></div><div class="line">  <span class="keyword">int</span> y; <span class="comment">// 纵坐标</span></div><div class="line">  <span class="keyword">int</span> prev; <span class="comment">// 如果需要输出路径的话，可以用来标记父节点在队列中的编号</span></div><div class="line">  <span class="keyword">int</span> step; <span class="comment">// 步数</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">51</span>][<span class="number">51</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">// 地图</span></div><div class="line">  <span class="keyword">int</span> book[<span class="number">51</span>][<span class="number">51</span>] = &#123;<span class="number">0</span>&#125;;<span class="comment">// 标记</span></div><div class="line">  <span class="keyword">int</span> next[<span class="number">4</span>][<span class="number">2</span>] = &#123;</div><div class="line">    &#123;<span class="number">1</span>, <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">1</span>&#125;,</div><div class="line">    &#123;<span class="number">-1</span>, <span class="number">0</span>&#125;,</div><div class="line">    &#123;<span class="number">0</span>, <span class="number">-1</span>&#125;</div><div class="line">  &#125;; <span class="comment">// 4个方向，右、下、左、上</span></div><div class="line">  <span class="keyword">struct</span> node <span class="built_in">queue</span>[<span class="number">2501</span>]; <span class="comment">// 50 * 50的地图范围</span></div><div class="line">  </div><div class="line">  <span class="keyword">int</span> head, tail; <span class="comment">// 队列的使用方式</span></div><div class="line">  <span class="keyword">int</span> n, m; <span class="comment">// 分别表示地图的行列</span></div><div class="line">  <span class="keyword">int</span> ex, ey; <span class="comment">// 目标点</span></div><div class="line">  </div><div class="line">  <span class="comment">// 初始化地图与目标点</span></div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m); </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"输入目标点: "</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;ex, &amp;ey);</div><div class="line">  </div><div class="line">  <span class="comment">// 初始化队列</span></div><div class="line">  head = <span class="number">1</span>;</div><div class="line">  tail = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 插入起点</span></div><div class="line">  <span class="built_in">queue</span>[tail].x = <span class="number">1</span>;</div><div class="line">  <span class="built_in">queue</span>[tail].y = <span class="number">1</span>;</div><div class="line">  <span class="built_in">queue</span>[tail].prev = <span class="number">0</span>;</div><div class="line">  <span class="built_in">queue</span>[tail].step = <span class="number">0</span>;</div><div class="line">  tail ++;</div><div class="line">  </div><div class="line">  <span class="comment">// 标记起点1, 1为走过的点</span></div><div class="line">  book[<span class="number">1</span>][<span class="number">1</span>] = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> flag = <span class="number">0</span>; <span class="comment">// 标记是否到达目标点, 0表示没有到达，1表示到达</span></div><div class="line">  <span class="keyword">int</span> tx, ty; <span class="comment">// 临时变量</span></div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (head &lt; tail) &#123; <span class="comment">// 对队列进行遍历操作</span></div><div class="line">    </div><div class="line">    <span class="comment">// 4个方向的操作</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i ++) &#123;</div><div class="line">      tx = <span class="built_in">queue</span>[head].x + next[i][<span class="number">0</span>];</div><div class="line">      ty = <span class="built_in">queue</span>[head].y + next[i][<span class="number">1</span>];</div><div class="line">      </div><div class="line">      <span class="comment">// 是否越界</span></div><div class="line">      <span class="keyword">if</span> ( tx &lt; <span class="number">1</span> || tx &gt; n || ty &lt; <span class="number">1</span> || ty &gt; m ) &#123;</div><div class="line">        <span class="keyword">continue</span>;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="comment">// 是否障碍物或者走过的点</span></div><div class="line">      <span class="keyword">if</span> ( <span class="built_in">map</span>[tx][ty] == <span class="number">0</span> &amp;&amp; book[tx][ty] == <span class="number">0</span> ) &#123;</div><div class="line">        book[tx][ty] = <span class="number">1</span>;</div><div class="line">        <span class="comment">// 插入新的点到队列中, 这里由于我们是扩展，所以用过的点就不会在用了，也就不需要把标记位清0</span></div><div class="line">        <span class="built_in">queue</span>[tail].x = tx;</div><div class="line">        <span class="built_in">queue</span>[tail].y = ty;</div><div class="line">        <span class="built_in">queue</span>[tail].prev = head; <span class="comment">// 每一个点都是从head扩展出来的，所以上一个就是head的位置</span></div><div class="line">        <span class="built_in">queue</span>[tail].step = <span class="built_in">queue</span>[head].step + <span class="number">1</span>;<span class="comment">// 步数等于head的步数加1</span></div><div class="line">        tail ++;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> ( tx == ex &amp;&amp; ty == ey ) &#123;</div><div class="line">        <span class="comment">// 如果是目标点，标记一下，结束</span></div><div class="line">        flag = <span class="number">1</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (flag == <span class="number">1</span>) &#123;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    head ++; <span class="comment">// 当前点已经寻找完了，继续从头部扩散</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Step: %d"</span>, <span class="built_in">queue</span>[tail - <span class="number">1</span>].step);</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> prev = <span class="built_in">queue</span>[tail - <span class="number">1</span>].prev;</div><div class="line">  <span class="keyword">while</span> (prev) &#123;</div><div class="line">    <span class="comment">// prev node</span></div><div class="line">    <span class="keyword">struct</span> node prevNode = <span class="built_in">queue</span>[prev];</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"&#123;%d, %d&#125; "</span>, prevNode.x, prevNode.y);</div><div class="line">    prev = prevNode.prev;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们大致的模拟一下，从(1，1)点开始，先尝试往右找到了(1，2)，此时的队列：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == tail == <span class="number">1</span></div><div class="line">x:    <span class="number">1</span></div><div class="line">y:    <span class="number">1</span></div><div class="line">step: <span class="number">0</span></div><div class="line">prev: <span class="number">0</span></div></pre></td></tr></table></figure>
<p>尝试走到1，2：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">tx = <span class="built_in">queue</span>[head].x;</div><div class="line">ty = <span class="built_in">queue</span>[head].y + <span class="number">1</span>;</div><div class="line"><span class="comment">// 判断越界、标记省略了 ...</span></div><div class="line">book[tx][ty] = <span class="number">1</span>;</div><div class="line"><span class="comment">// 插入新的点到队列中</span></div><div class="line"><span class="built_in">queue</span>[tail].x = tx;</div><div class="line"><span class="built_in">queue</span>[tail].y = ty;</div><div class="line"><span class="built_in">queue</span>[tail].prev = head;</div><div class="line"><span class="built_in">queue</span>[tail].step = <span class="built_in">queue</span>[head].step + <span class="number">1</span>;</div><div class="line">tail ++;</div></pre></td></tr></table></figure>
<p>此时的队列是：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == <span class="number">1</span>, tail == <span class="number">2</span></div><div class="line">x:    <span class="number">1</span> <span class="number">1</span></div><div class="line">y:    <span class="number">1</span> <span class="number">2</span></div><div class="line">step: <span class="number">0</span> <span class="number">1</span></div><div class="line">prev: <span class="number">0</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>接着还要尝试往其他方向走，我们发现从（1，1）一步还可以走到（2，1），所以也加入队列</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == <span class="number">1</span>, tail == <span class="number">3</span></div><div class="line">x:    <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">y:    <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></div><div class="line">step: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div><div class="line">prev: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>扩展完（1，1）后，这个点就没用了，所以while中的head++让（1，1）出栈后</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == <span class="number">2</span>, tail == <span class="number">3</span></div><div class="line">x:    <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">y:    <span class="number">1</span> <span class="number">2</span> <span class="number">1</span></div><div class="line">step: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div><div class="line">prev: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span></div></pre></td></tr></table></figure>
<p>变成了这样，head变为了2，所以接下来要从点（1，2）开始扩展。我们发现（1，2）这个点可以到达（2，2），所以将2，2加入队列中：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == <span class="number">2</span>, tail == <span class="number">4</span></div><div class="line">x:    <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span></div><div class="line">y:    <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">step: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">prev: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<p>这样，（1，2）这个这个点已经扩展结束了，所以移除队列</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">head == <span class="number">3</span>, tail == <span class="number">4</span></div><div class="line">x:    <span class="number">1</span> <span class="number">1</span> <span class="number">2</span> <span class="number">2</span> </div><div class="line">y:    <span class="number">1</span> <span class="number">2</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">step: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div><div class="line">prev: <span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">2</span></div></pre></td></tr></table></figure>
<p>现在head变为了（2，1）点，我们继续扩展下去。接下来的模拟过程，大家自己来思考一下。</p>
<p>你们先看，我去拉屎~</p>
<p>回来了，接着写，拉了屎后轻松了许多，放空了思维，我们来解一道叫做水管工的题，先看个彩色的图：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/1083748_3.jpg" alt=""></p>
<p>想必读者都玩过这个游戏。水管分为直的水管，弯的水管，把他们连起来，形成一条通道，如果有通道的话，输出链接的点（使用广度搜索或者深度搜索）。我们先来分析一下组成的部件：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/modules-water.png" alt=""></p>
<p>这是水管的全部状态，直管2种状态，弯管4种状态。当然，我们还可以在地图中加入障碍物，用0代替，水管的状态分别用数字指定：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> = 弯管，右上角</div><div class="line"><span class="number">2</span> = 弯管，右下角</div><div class="line"><span class="number">3</span> = 弯管，左下角</div><div class="line"><span class="number">4</span> = 弯管，左上角</div><div class="line">分别对应了上图的部件<span class="number">5</span>，部件<span class="number">4</span>，部件<span class="number">6</span>，部件<span class="number">3</span></div><div class="line"><span class="number">5</span> = 直管，水平</div><div class="line"><span class="number">6</span> = 直管，竖直</div><div class="line">分别对应了上图的部件<span class="number">2</span>，部件<span class="number">1</span></div><div class="line"><span class="number">0</span> = 障碍物</div></pre></td></tr></table></figure>
<p>这里我们给出的测试地图是，（1，1）从左边进水，（5，4）从右边出水为成功：</p>
<blockquote>
<p>对数组我喜欢从下标1开始叫，这样不用思考</p>
</blockquote>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="number">5</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span></div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">3</span> <span class="number">0</span></div><div class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">5</span> <span class="number">1</span></div><div class="line"><span class="number">6</span> <span class="number">1</span> <span class="number">1</span> <span class="number">5</span></div><div class="line"><span class="number">1</span> <span class="number">5</span> <span class="number">5</span> <span class="number">4</span></div></pre></td></tr></table></figure>
<p>并且我们注意到，每个管子进水的方向也可能是不同的，所以我们规定</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="number">1</span> = 左边进水</div><div class="line"><span class="number">2</span> = 上边进水</div><div class="line"><span class="number">3</span> = 右边进水</div><div class="line"><span class="number">4</span> = 下边进水</div></pre></td></tr></table></figure>
<p>所以我们写实现代码，分别用深度与广度实现（建议自己先想一下再看）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> <span class="built_in">map</span>[<span class="number">6</span>][<span class="number">6</span>]; <span class="comment">// 地图</span></div><div class="line"><span class="keyword">int</span> book[<span class="number">50</span>][<span class="number">50</span>]; <span class="comment">// 标记</span></div><div class="line"><span class="keyword">int</span> n, m; <span class="comment">// 行 列</span></div><div class="line"><span class="keyword">int</span> flag; <span class="comment">// 结果标记</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> front)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d %d"</span>, &amp;n, &amp;m);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= m; j ++) &#123;</div><div class="line">      <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">map</span>[i][j]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  dfs(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> ( flag == <span class="number">1</span> ) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"成功了!"</span>);</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"不能连通"</span>);</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> front)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> (x == n+<span class="number">1</span> &amp;&amp; y == m &amp;&amp; front == <span class="number">1</span>) &#123;<span class="comment">// 为什么n+1，因为水流出去才行，而不是到了（n，m）结束，动脑子想想，我们的题目要求从右下角的右边出水</span></div><div class="line">    flag = <span class="number">1</span>;</div><div class="line">    <span class="keyword">return</span> ;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 越界处理</span></div><div class="line">  <span class="keyword">if</span> ( x &lt; <span class="number">1</span> || x &gt; n || y &lt; <span class="number">1</span> || y &gt; m ) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> ( book[x][y] == <span class="number">1</span> ) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  book[x][y] = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="comment">// 当水管是直管的时候</span></div><div class="line">  <span class="keyword">if</span> ( <span class="built_in">map</span>[x][y] == <span class="number">5</span> || <span class="built_in">map</span>[x][y] == <span class="number">6</span> ) &#123;</div><div class="line">    <span class="comment">// 左边进水</span></div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">1</span> ) &#123;</div><div class="line">      dfs(x + <span class="number">1</span>, y, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 上边进水</span></div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">2</span> ) &#123;</div><div class="line">      dfs(x, y + <span class="number">1</span>, <span class="number">2</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 右边进水</span></div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">3</span> ) &#123;</div><div class="line">      dfs(x - <span class="number">1</span>, y, <span class="number">3</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 下边进水</span></div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">4</span> ) &#123;</div><div class="line">      dfs(x, y - <span class="number">1</span>, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 当水管是弯管的时候</span></div><div class="line">  <span class="keyword">if</span> ( <span class="built_in">map</span>[x][y] &gt;= <span class="number">1</span> &amp;&amp; <span class="built_in">map</span>[x][y] &lt;= <span class="number">4</span> ) &#123;</div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">1</span> || front == <span class="number">3</span>) &#123;</div><div class="line">      dfs(x, y+<span class="number">1</span>, <span class="number">2</span>);</div><div class="line">      dfs(x, y<span class="number">-1</span>, <span class="number">4</span>);</div><div class="line">    &#125;</div><div class="line">    <span class="comment">// 上、下</span></div><div class="line">    <span class="keyword">if</span> ( front == <span class="number">2</span> || front == <span class="number">4</span>) &#123;</div><div class="line">      dfs(x<span class="number">-1</span>, y, <span class="number">3</span>);</div><div class="line">      dfs(x+<span class="number">1</span>, y, <span class="number">1</span>);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  book[x][y] = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后我们用广度的思想也想一下，首先我们需要一个队列</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node &#123;</div><div class="line">  <span class="keyword">int</span> x;</div><div class="line">  <span class="keyword">int</span> y;</div><div class="line">  <span class="keyword">int</span> prev;</div><div class="line">  <span class="keyword">int</span> front;</div><div class="line">&#125; s[<span class="number">2501</span>];</div><div class="line"><span class="keyword">int</span> head, tail;</div></pre></td></tr></table></figure>
<p>初始化队列之后，然后我们需要一个while循环：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 初始化队列</span></div><div class="line">head = <span class="number">1</span>;</div><div class="line">tail = <span class="number">1</span>;</div><div class="line">  </div><div class="line"><span class="comment">// 加入第一个点</span></div><div class="line">s[tail].x = <span class="number">1</span>;</div><div class="line">s[tail].y = <span class="number">1</span>;</div><div class="line">s[tail].prev = <span class="number">0</span>;</div><div class="line">s[tail].front = <span class="number">1</span>; <span class="comment">// 左边进水</span></div><div class="line">tail ++;</div></pre></td></tr></table></figure>
<p>然后</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">while</span> (head &lt; tail) &#123;</div><div class="line">    <span class="comment">// 结果判断</span></div><div class="line">    <span class="comment">// 越界判断</span></div><div class="line">    <span class="comment">// 是否为已经走过的管道</span></div><div class="line">    <span class="comment">// 标记</span></div><div class="line">  </div><div class="line">    <span class="keyword">int</span> pipes = <span class="built_in">map</span>[s[head].x][s[head].y];  </div><div class="line">    <span class="keyword">if</span> (pipes == <span class="number">5</span> || pipes == <span class="number">6</span>) &#123;</div><div class="line">      <span class="keyword">struct</span> node tNode;</div><div class="line">      <span class="comment">// 加入队列</span></div><div class="line">      <span class="keyword">if</span> (s[head].front == <span class="number">1</span>) &#123;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[head].front == <span class="number">2</span>) &#123;</div><div class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (s[head].front == <span class="number">3</span>) &#123;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">      &#125;</div><div class="line">      s[tail] = tNode;</div><div class="line">      tail ++;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">struct</span> node rNode, lNode;</div><div class="line">      <span class="comment">// 加入队列</span></div><div class="line">      <span class="keyword">if</span> (s[head].front == <span class="number">1</span> || s[head].front == <span class="number">3</span>) &#123;</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">      &#125;</div><div class="line">      s[tail] = rNode;</div><div class="line">      tail ++;</div><div class="line">      s[tail] = lNode;</div><div class="line">      tail ++;</div><div class="line">    &#125;    </div><div class="line">    head ++;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>兄弟，自己写吧~ 我也看的头晕。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;枚举&quot;&gt;&lt;a href=&quot;#枚举&quot; class=&quot;headerlink&quot; title=&quot;枚举&quot;&gt;&lt;/a&gt;枚举&lt;/h4&gt;&lt;p&gt;枚举算法又被称为穷举算法，字面看很暴力，先来看一个例子：&lt;/p&gt;
&lt;figure class=&quot;highlight mathematica&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;口口口+口口口=口口口？&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3位数与3位数相加等于一个3位数（使用1~9，不能重复），用穷举来说，就是列举所有的可能。这样写for循环的话，我们要写9个循环嵌套（9个数字，每个都要循环），然后通过一大串的判断语句之后，才能得到我们的答案（答案还需要除以2，173+286与286+173是一样的），有兴趣或者有时间的同学可以用穷举的思想试一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wilddylan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>算法第二课</title>
    <link href="https://wilddylan.github.io/2016/10/15/%E7%AE%97%E6%B3%95%E7%AC%AC%E4%BA%8C%E8%AF%BE/"/>
    <id>https://wilddylan.github.io/2016/10/15/算法第二课/</id>
    <published>2016-10-15T06:48:36.000Z</published>
    <updated>2017-02-04T09:02:35.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="栈、队列、链表"><a href="#栈、队列、链表" class="headerlink" title="栈、队列、链表"></a>栈、队列、链表</h4><h6 id="队列"><a href="#队列" class="headerlink" title="队列"></a>队列</h6><p><code>先进先出</code>，前面出，后面进。队列分列表头，列表尾。使用2个位置标记量分别代表首、尾，当首=尾，标识队列为空队列。每当入数据，尾++，出数据，头++：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="built_in">list</span> &#123;</div><div class="line">  <span class="keyword">int</span> data[<span class="number">1000</span>];</div><div class="line">  <span class="keyword">int</span> head;</div><div class="line">  <span class="keyword">int</span> tail;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">struct</span> <span class="built_in">list</span> <span class="built_in">list</span>;</div><div class="line">  <span class="comment">// 初始化列表首、尾</span></div><div class="line">  <span class="built_in">list</span>.head = <span class="number">1</span>;</div><div class="line">  <span class="built_in">list</span>.tail = <span class="number">1</span>;</div><div class="line">  <span class="comment">// 读入数据</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">list</span>.data[i]);</div><div class="line">    <span class="built_in">list</span>.tail ++;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"list headNum: %d, tailNum: %d\n"</span>, <span class="built_in">list</span>.data[<span class="built_in">list</span>.head], <span class="built_in">list</span>.data[<span class="built_in">list</span>.tail - <span class="number">1</span>]);</div><div class="line">  </div><div class="line">  <span class="comment">// 模拟出一个值</span></div><div class="line">  <span class="built_in">list</span>.head ++;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"list headNum: %d, tailNum: %d\n"</span>, <span class="built_in">list</span>.data[<span class="built_in">list</span>.head], <span class="built_in">list</span>.data[<span class="built_in">list</span>.tail - <span class="number">1</span>]);</div><div class="line">  </div><div class="line">  <span class="comment">// 模拟入一个值</span></div><div class="line">  <span class="built_in">list</span>.data[<span class="built_in">list</span>.tail] = <span class="number">10</span>;</div><div class="line">  <span class="built_in">list</span>.tail ++;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"list headNum: %d, tailNum: %d\n"</span>, <span class="built_in">list</span>.data[<span class="built_in">list</span>.head], <span class="built_in">list</span>.data[<span class="built_in">list</span>.tail - <span class="number">1</span>]);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h6 id="栈"><a href="#栈" class="headerlink" title="栈"></a>栈</h6><p><code>先进后出</code>，只能后边进，从后边出。栈只有栈顶。使用一个数字标记栈顶，入栈，栈顶++，出栈，栈顶—：</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> <span class="built_in">stack</span> &#123;</div><div class="line">  <span class="keyword">int</span> data[<span class="number">10</span>];</div><div class="line">  <span class="keyword">int</span> top;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">struct</span> <span class="built_in">stack</span> <span class="built_in">stack</span>;</div><div class="line">  <span class="comment">// 没有对象</span></div><div class="line">  <span class="built_in">stack</span>.top = <span class="number">1</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= <span class="number">5</span>; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;<span class="built_in">stack</span>.data[i]);</div><div class="line">    <span class="built_in">stack</span>.top = i;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 模拟入栈</span></div><div class="line">  <span class="built_in">stack</span>.data[<span class="built_in">stack</span>.top + <span class="number">1</span>] = <span class="number">7</span>;</div><div class="line">  <span class="built_in">stack</span>.top ++;</div><div class="line">  </div><div class="line">  <span class="comment">// 模拟出栈</span></div><div class="line">  <span class="built_in">stack</span>.data[<span class="built_in">stack</span>.top] = <span class="number">0</span>;</div><div class="line">  <span class="built_in">stack</span>.top --;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>至此，大家可以模拟一个打扑克的游戏，俗称列火车，假设2个小朋友每个人都有10张排，你一张我一张放到桌子上，如果我出的这张之前也出过，那么2张牌中间的所有的排都是我赢的，谁先出光谁输（简单分析：2个列表存放2个人的扑克，先进后出，1个栈，从顶往底拿牌，赢的牌插入到每个人列表的后边）。</p>
<h6 id="链表"><a href="#链表" class="headerlink" title="链表"></a>链表</h6><p>一个链着一个，前一个数中知道下一个链着谁~。基本的形式：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node &#123;</div><div class="line">  <span class="keyword">int</span> data;</div><div class="line">  <span class="keyword">struct</span> node *next;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<p>如何建立一个链表呢？首先我们需要一个链表头，就像是火车头一样，然后链着一节一节的车厢。当链表还没有建立的时候，头部暂时置为空。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node *head = <span class="literal">NULL</span>; <span class="comment">// 初始化;</span></div></pre></td></tr></table></figure>
<p>紧接着，创建第一个结点，并用临时指针p指向这个节点，然后链接到头部：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> node *head = <span class="literal">NULL</span>; <span class="comment">// 初始化;</span></div><div class="line">  </div><div class="line">  <span class="keyword">struct</span> node *p;</div><div class="line">  p = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;p-&gt;data);</div><div class="line">  p-&gt;next = <span class="literal">NULL</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</div><div class="line">    head = p;</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    head-&gt;next = p;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>所以我们来看完整的链表构建代码（并往其中插入一个数字）：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></div><div class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">struct</span> node &#123;</div><div class="line">  <span class="keyword">int</span> data;</div><div class="line">  <span class="keyword">struct</span> node *next;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">struct</span> node *head = <span class="literal">NULL</span>, *p = <span class="literal">NULL</span>, *q = <span class="literal">NULL</span>, *t = <span class="literal">NULL</span>;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> count, inputData;</div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Enter Number: "</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;count);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inputData);</div><div class="line">    </div><div class="line">    p = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</div><div class="line">    p-&gt;data = inputData;</div><div class="line">    p-&gt;next = <span class="literal">NULL</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (head == <span class="literal">NULL</span>) &#123;</div><div class="line">      head = p;</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      q-&gt;next = p;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    q = p;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  t = head;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> insert;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Enter insertNumber: "</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;insert);</div><div class="line">  </div><div class="line">  <span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> (t-&gt;next == <span class="literal">NULL</span> || t-&gt;next-&gt;data &gt; insert) &#123;</div><div class="line">      p = (<span class="keyword">struct</span> node *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="keyword">struct</span> node));</div><div class="line">      p-&gt;data = insert;</div><div class="line">      p-&gt;next = t-&gt;next;</div><div class="line">      t-&gt;next = p;</div><div class="line">      <span class="keyword">break</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    t = t-&gt;next;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  t = head;</div><div class="line">  <span class="keyword">while</span> (t != <span class="literal">NULL</span>) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, t-&gt;data);</div><div class="line">    t = t-&gt;next;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这里有<code>malloc</code>确没有<code>free</code>，留个问题给大家吧。上边所说的是使用指针的方式来制作链表，但是有些人的指针学的并不好，别急，还有另一种方法，我们使用数组来实现，叫做模拟链表。</p>
<h4 id="模拟链表"><a href="#模拟链表" class="headerlink" title="模拟链表"></a>模拟链表</h4><p>如何实现呢，其实原理很简单，我们使用2个数组，第一个数组存放数据，第二个数组同样的位置上存放着该数据右边数据的位置：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;position&gt;:  <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span></div><div class="line">data array:  <span class="number">9</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">3</span>, <span class="number">4</span></div><div class="line"></div><div class="line">&lt;position&gt; : <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span></div><div class="line">right array: <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span></div></pre></td></tr></table></figure>
<p>不难理解，如果这个时候我们希望插入一个6到第三个位置该怎么办呢，只需要将数据6放入data array[10]的位置，然后将right array[3] 的值改为10，并且将right array[10]的值改为4就好了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;栈、队列、链表&quot;&gt;&lt;a href=&quot;#栈、队列、链表&quot; class=&quot;headerlink&quot; title=&quot;栈、队列、链表&quot;&gt;&lt;/a&gt;栈、队列、链表&lt;/h4&gt;&lt;h6 id=&quot;队列&quot;&gt;&lt;a href=&quot;#队列&quot; class=&quot;headerlink&quot; title=&quot;队列&quot;&gt;&lt;/a&gt;队列&lt;/h6&gt;&lt;p&gt;&lt;code&gt;先进先出&lt;/code&gt;，前面出，后面进。队列分列表头，列表尾。使用2个位置标记量分别代表首、尾，当首=尾，标识队列为空队列。每当入数据，尾++，出数据，头++：&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; data[&lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; head;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; tail;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;struct&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 初始化列表首、尾&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.head = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 读入数据&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;; i &amp;lt;= &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; i ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[i]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;list headNum: %d, tailNum: %d\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.head], &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 模拟出一个值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.head ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;list headNum: %d, tailNum: %d\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.head], &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 模拟入一个值&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail] = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;list headNum: %d, tailNum: %d\n&quot;&lt;/span&gt;, &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.head], &lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.data[&lt;span class=&quot;built_in&quot;&gt;list&lt;/span&gt;.tail - &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h6 id=&quot;栈&quot;&gt;&lt;a href=&quot;#栈&quot; class=&quot;headerlink&quot; title=&quot;栈&quot;&gt;&lt;/a&gt;栈&lt;/h6&gt;&lt;p&gt;&lt;code&gt;先进后出&lt;/code&gt;，只能后边进，从后边出。栈只有栈顶。使用一个数字标记栈顶，入栈，栈顶++，出栈，栈顶—：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wilddylan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>使用yarn制作npm包</title>
    <link href="https://wilddylan.github.io/2016/10/14/%E4%BD%BF%E7%94%A8yarn%E5%88%B6%E4%BD%9Cnpm%E5%8C%85/"/>
    <id>https://wilddylan.github.io/2016/10/14/使用yarn制作npm包/</id>
    <published>2016-10-14T07:35:43.000Z</published>
    <updated>2016-10-14T07:39:34.000Z</updated>
    
    <content type="html"><![CDATA[<h5 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h5><p>MAC OSX</p>
<p>工具：Yarn （<code>npm install yarnpkg -g</code>），git</p>
<h4 id="创建你的第一个NPM库"><a href="#创建你的第一个NPM库" class="headerlink" title="创建你的第一个NPM库"></a>创建你的第一个NPM库</h4><blockquote>
<p>在创建你的第一个库之前，你需要了解什么是yarn。</p>
</blockquote>
<p>打开终端，首先创建一个git仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git init RockSocket</div></pre></td></tr></table></figure>
<p>进入<code>RockSocket</code>文件夹，执行：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn init</div></pre></td></tr></table></figure>
<p>这将会询问你以下几个问题：</p>
<a id="more"></a>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">name (my-new-project):</div><div class="line">version (1.0.0):</div><div class="line">description:</div><div class="line">entry point (index.js):</div><div class="line">git repository:</div><div class="line">author:</div><div class="line">license (MIT):</div></pre></td></tr></table></figure>
<p>可以选择回答或者直接按回车使用括号中的默认值（如果你想所有的东西使用默认值的话，可以直接使用<code>npm install --yes</code>，这样会跳过所有的问题）。</p>
<h4 id="package-json"><a href="#package-json" class="headerlink" title="package.json"></a>package.json</h4><p>现在，在文件夹中应该出现了一个package.json，它大致的样式是这样子的：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"RockSocket"</span>,</div><div class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</div><div class="line">  <span class="attr">"description"</span>: <span class="string">"RockSocket is a npm framework created by `yarn`"</span>,</div><div class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</div><div class="line">  <span class="attr">"repository"</span>: &#123;</div><div class="line">    <span class="attr">"url"</span>: <span class="string">"https://github.com/wilddylan/rocksocket.git"</span>,</div><div class="line">    <span class="attr">"type"</span>: <span class="string">"git"</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">"author"</span>: <span class="string">"Dylan &lt;3664132@163.com&gt;"</span>,</div><div class="line">  <span class="attr">"license"</span>: <span class="string">"MIT"</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些值的含义分别是（这个文件你可以按照自己的意愿修改）：</p>
<p>name：包的唯一标识，如果你这个包可以被别人使用，就必须确认这个名字是唯一的。</p>
<p>version：当前的版本，发布更新必须更改这个值。</p>
<p>description：包的描述，不是必须的值，这个用来帮助用户理解你的库的作用。</p>
<p>main：入口文件</p>
<p>repository：git仓库的地址，以后源代码也是存放在这里的。</p>
<p>author：作者，是有格式的，例如<code>dylan &lt;dylan@china.com&gt; (http://wilddylan.github.io)</code>。</p>
<p>license：规定了大家使用你代码的权限。</p>
<h4 id="Additional-fields"><a href="#Additional-fields" class="headerlink" title="Additional fields"></a>Additional fields</h4><p>在<code>package.json</code>中你还有可能希望添加以下的一些字段：</p>
<figure class="highlight json"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">"name"</span>: <span class="string">"RockSocket"</span>,</div><div class="line">  <span class="attr">"..."</span>: <span class="string">"..."</span>,</div><div class="line">  <span class="attr">"keywords"</span>: [<span class="string">"cool"</span>, <span class="string">"useful"</span>, <span class="string">"stuff"</span>],</div><div class="line">  <span class="attr">"homepage"</span>: <span class="string">"https://RockSocket.com"</span>,</div><div class="line">  <span class="attr">"bugs"</span>: <span class="string">"https://github.com/you/RockSocket/issues"</span>,</div><div class="line">  <span class="attr">"contributors"</span>: [</div><div class="line">    <span class="string">"Your Friend &lt;their-email@example.com&gt; (http://their-website.com)"</span>,</div><div class="line">    <span class="string">"Another Friend &lt;another-email@example.com&gt; (https://another-website.org)"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"files"</span>: [</div><div class="line">    <span class="string">"index.js"</span>,</div><div class="line">    <span class="string">"lib/*.js"</span>,</div><div class="line">    <span class="string">"bin/*.js"</span></div><div class="line">  ],</div><div class="line">  <span class="attr">"bin"</span>: &#123;</div><div class="line">    <span class="attr">"rock-socket-cli"</span>: <span class="string">"bin/rock-socket-cli.js"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>他们分别的含义是：</p>
<p>keywords：别的开发者可以通过这些关键字搜索到你的项目。</p>
<p>homepage：项目的主页，提供一些文档、说明等。</p>
<p>bugs：项目出现的问题，一般是github的issue的地址，可以引导大家去查看。</p>
<p><strong>contributors</strong>：项目成员，可以被定义在这里。</p>
<p>files：文件的列表，可以用*来表示所有，规则跟shell的一样。</p>
<p>bin：yarn在安装时可以使用的图形化界面。</p>
<h4 id="项目说明"><a href="#项目说明" class="headerlink" title="项目说明"></a>项目说明</h4><p>一般写入到gith中ReadMe.md中，供大家参考。在创建项目的时候，保证库的简洁，同样需要注意你的库所依赖的库。</p>
<h4 id="项目发布"><a href="#项目发布" class="headerlink" title="项目发布"></a>项目发布</h4><p>首先要在npm注册一个account，<a href="https://www.npmjs.com/signup" target="_blank" rel="external">注册地址</a>，紧接着，在当前文件夹下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn login</div></pre></td></tr></table></figure>
<p>会要求你提供刚刚输入的帐号以及邮箱，会在publish的时候问你询问密码，现在还不需要。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn publish</div></pre></td></tr></table></figure>
<p>首先会让你输入自己的版本号，然后会要求输入刚刚帐号的密码，最后提示成功。</p>
<h4 id="使用你上传的项目"><a href="#使用你上传的项目" class="headerlink" title="使用你上传的项目"></a>使用你上传的项目</h4><p>在新的项目中：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn add RockSocket</div></pre></td></tr></table></figure>
<p>也可以通过：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">yarn info RockSocket</div></pre></td></tr></table></figure>
<p>来查看自己库的信息，当然，在npmjs.com上也是可以看的到的。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;环境&quot;&gt;&lt;a href=&quot;#环境&quot; class=&quot;headerlink&quot; title=&quot;环境&quot;&gt;&lt;/a&gt;环境&lt;/h5&gt;&lt;p&gt;MAC OSX&lt;/p&gt;
&lt;p&gt;工具：Yarn （&lt;code&gt;npm install yarnpkg -g&lt;/code&gt;），git&lt;/p&gt;
&lt;h4 id=&quot;创建你的第一个NPM库&quot;&gt;&lt;a href=&quot;#创建你的第一个NPM库&quot; class=&quot;headerlink&quot; title=&quot;创建你的第一个NPM库&quot;&gt;&lt;/a&gt;创建你的第一个NPM库&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;在创建你的第一个库之前，你需要了解什么是yarn。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打开终端，首先创建一个git仓库&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;git init RockSocket&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;进入&lt;code&gt;RockSocket&lt;/code&gt;文件夹，执行：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yarn init&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这将会询问你以下几个问题：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Node" scheme="https://wilddylan.github.io/tags/Node/"/>
    
  </entry>
  
  <entry>
    <title>算法开篇课</title>
    <link href="https://wilddylan.github.io/2016/10/14/%E7%AE%97%E6%B3%95%E5%BC%80%E7%AF%87%E8%AF%BE/"/>
    <id>https://wilddylan.github.io/2016/10/14/算法开篇课/</id>
    <published>2016-10-14T05:13:53.000Z</published>
    <updated>2017-02-04T08:40:24.000Z</updated>
    
    <content type="html"><![CDATA[<p>算法开篇介绍：<code>Algorithm</code>，是指解题方案的准确而完整的描述，代表着用系统的方法描述解决问题的策略机制。</p>
<h4 id="最快最简单的排序"><a href="#最快最简单的排序" class="headerlink" title="最快最简单的排序"></a>最快最简单的排序</h4><p>首先看题：</p>
<p>班上有5位同学，分别考了5分，3分，5分，8分，2分，将分数从大到小排序是8，5，5，3，2。有什么好的办法可以编写一段程序，让计算机随机读入5个分数然后将这5个分数从大到小输出。老道的程序员可能各种冒泡，打擂台，这都比较深入了，先往下看：</p>
<p>我们借助一个一维数组就可以解决这个问题，创建一个a[11]的数组，这样下标分别为a[0]-&gt;a[10]，分别表示0分，1分…10分，每当有一个分数出现，就在对应的下标位置+1，最后打印即可满足我们现在的要求。</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">int</span> a[<span class="number">11</span>];</div><div class="line">  <span class="keyword">int</span> scannedNumber;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">11</span>; i ++) &#123;</div><div class="line">    a[i] = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;scannedNumber);</div><div class="line">    a[scannedNumber] ++;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">10</span>; k &gt;= <span class="number">0</span>; k --) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; a[k]; l ++) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d"</span>, k);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这种排序算法，我们称为<strong>桶排序</strong>，每个分数都好比一个桶，每出现一次，就在桶中加一点东西。接下来，我们尝试着对数据范围在0~100之间的任意数量数字进行从大到小的排序：</p>
<a id="more"></a>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> book[<span class="number">101</span>], scannedNumber;</div><div class="line">  <span class="keyword">int</span> inputCount;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">101</span>; i ++) &#123;</div><div class="line">    book[i] = <span class="number">0</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="built_in">printf</span>(<span class="string">"Enter numbers you want:"</span>);</div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;inputCount);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; inputCount; j ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;scannedNumber);</div><div class="line">    book[scannedNumber] ++;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">100</span>; k &gt;= <span class="number">0</span>; k --) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">0</span>; l &lt; book[k]; l ++) &#123;</div><div class="line">      <span class="built_in">printf</span>(<span class="string">"%d "</span>, k);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>同样没有什么问题的，我们接下来考虑时间复杂度的问题：代码中第6行，循环了M次（M为桶的个数），第14行循环了N次（输入的数字个数），19行循环了M+N次，所以我们得到时间复杂度为O(2*(M+N))，在说时间复杂度的时候，可以忽略较小的常数，所以最终的时间复杂度为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(M+<span class="keyword">N</span>)</div></pre></td></tr></table></figure>
<p>这是一个非常快的排序算法，其实这还不是真正的桶排序，桶排序实际要更复杂，这个只能算简化版。基本上还不能算是一个真正意义的算法，上边的处理如果碰到输出得该分数的同学的信息就显得有点问题了，因为我们只是输出了分数。所以引出第二节：冒泡排序</p>
<h4 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h4><p>简化版的桶排序，不仅仅有使用范围的限制，更是浪费空间，如果我们需要排序的范围是0~2100000000，那就要申请2100000001个变量，我们要用这么多的桶来存储每一个数字出现的次数。即时，你只给3个数字（1， 19999， 1999999）排序，也需要2000001个桶，太浪费了。还不止，如果是浮点型呢？那我们接触一个新的算法，<strong>冒泡排序</strong>！它可以很好的解决这2个问题。冒泡排序的基本思想是，相邻的2个元素，如果顺序错误就把他们位置互换。如果我们要将</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">12, 35, 99, 18, 76</div></pre></td></tr></table></figure>
<p>这几个数从大到小进行排序，越小的越靠后。</p>
<p>首先：比较第1位和第2位的大小，我们发现12要比35小，所以交换位置，交换后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">35, 12, 99, 18, 76</div></pre></td></tr></table></figure>
<p>然后：按照上述的方法，继续往下比较，第2位与第3位….</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">35, 99, 12, 18, 76</div></pre></td></tr></table></figure>
<p>继续：第3位和第4位：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">35, 99, 18, 12, 76</div></pre></td></tr></table></figure>
<p>继续：第4位和第5位：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">35, 99, 18, 76, 12</div></pre></td></tr></table></figure>
<p>经过4次比较之后，最小的数字已经到了最后一位，一位一位的比，大的就往前换，就像一个气泡，所以称为<code>冒泡</code>。到这里，我们只是将其中的一个数字归位了，继续重复上面的过程：继续比较第1位与第2位，第2位与第3位，第3位与第4位，你会发现，第5位不需要比较了，因为他已经是最小的了。第二次比较后：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">99, 35, 76, 18, 12</div></pre></td></tr></table></figure>
<p>接下来的几次都是这样，有几个数字，比较的次数是n-1趟。冒泡的原则是，每次比较只将1个数组归位。接下来我们代码实现：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  <span class="keyword">int</span> a[<span class="number">20</span>], scannedNumber, input;</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;input);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= input; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;scannedNumber);</div><div class="line">    a[i] = scannedNumber;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 共有INPUT个数字，所以只需要排INPUT-1次即可</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= input - <span class="number">1</span>; i ++) &#123;</div><div class="line">    </div><div class="line">    <span class="comment">// INPUT-I 意味着，每一次外层循环后，都有一个数字归位</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= input - i ; j ++) &#123;</div><div class="line">      </div><div class="line">      <span class="comment">// 交换</span></div><div class="line">      <span class="keyword">if</span> ( a[j] &lt; a[j + <span class="number">1</span>] ) &#123;</div><div class="line">        <span class="keyword">int</span> temp = a[j];</div><div class="line">        a[j] = a[j + <span class="number">1</span>];</div><div class="line">        a[j + <span class="number">1</span>] = temp;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= input; i ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[i]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>将上边的代码稍稍修改，就可以解决前面桶排序无法做到的输出学生信息以及浮点数的问题：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">struct</span> Student &#123;</div><div class="line">  <span class="keyword">char</span> name[<span class="number">20</span>];</div><div class="line">  <span class="keyword">float</span> score;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">struct</span> Student s[<span class="number">100</span>];</div><div class="line">  <span class="keyword">int</span> scannedNumber;</div><div class="line">  </div><div class="line">  <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;scannedNumber);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= scannedNumber; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%s %f"</span>, s[i].name, &amp;s[i].score);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 控制排序次数</span></div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= scannedNumber - <span class="number">1</span>; j ++) &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">1</span>; k &lt;= scannedNumber - j; k ++) &#123;</div><div class="line">      <span class="keyword">if</span> (s[k].score &lt; s[k+<span class="number">1</span>].score) &#123;</div><div class="line">        <span class="keyword">struct</span> Student temp = s[k];</div><div class="line">        s[k] = s[k + <span class="number">1</span>];</div><div class="line">        s[k + <span class="number">1</span>] = temp;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> l = <span class="number">1</span>; l &lt;= scannedNumber; l ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%s, %.2f\n"</span>, s[l].name, s[l].score);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>完美搞定了。输入：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">dylan <span class="number">81.5</span></div><div class="line">alice <span class="number">64.6</span></div><div class="line">peter <span class="number">91.4</span></div><div class="line">bobo <span class="number">31.9</span></div><div class="line">amy <span class="number">67</span></div></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">peter, <span class="number">91.40</span></div><div class="line">dylan, <span class="number">81.50</span></div><div class="line">amy, <span class="number">67.00</span></div><div class="line">alice, <span class="number">64.60</span></div><div class="line">bobo, <span class="number">31.90</span></div></pre></td></tr></table></figure>
<p>冒泡排序的核心部分是嵌套循环，不难看出，冒泡循环的复杂度是：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(<span class="keyword">N</span>^<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>这是一个很高的时间复杂度，冒泡排序除了它迷人的名字，以时间复杂度来看，没什么好推荐的，想要更好的排序么？</p>
<h4 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h4><p>冒泡排序算是我们学习的第一个算法，但是时间浪费的极多。假定计算机运行10亿次/秒，桶排序需要10亿+1个位置，但只需要0.1s，冒泡排序则需要1千万秒。接下来我们了解快速排序。首先记住快速排序的核心方法：设，基准数为左边第一个数，保证基准数左边全部比它小，右边全部比它大；所以2个起点，最左边、最右边。共同向中间触发，右边先走（注意，左边为基准数，一定要先从右往左，先想想为什么，后面给出解释），先从右边向左边找一个比基准数小的数字，然后从左边向右边找一个比基准数大的数字，交换他们。当左右碰面的时候，交换当前数字与基准数的位置。当基准数确认位置之后，基准数左边、右边分为2个子列（有一点点2分味道，以后讲），在进行设置基准数，寻找。这里用到了递归，所以我们来模拟一下过程，假定有这样一个数列：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">10</span>, <span class="number">8</span></div></pre></td></tr></table></figure>
<p>我们以最左边的6为初始基准数，从左向右找一个大于6的数，从右向左找一个小于6的数字，并交换，我们发现，从右向左第一个小于6的数字是5，从左向右第一个大于6的数字是7，交换他们的位置</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span></div></pre></td></tr></table></figure>
<p>接下来，继续向前寻找，左向右发现了9，右向左发现了4，所以交换他们：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span></div></pre></td></tr></table></figure>
<p>继续往前，糟了，2个人撞一起了，这个时候，把基准数与这个数字交换位置：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span></div></pre></td></tr></table></figure>
<p>这样，基准数字6已经归位，而且左边都是小于6的数字，右边都是大于6的数字。接下来，我们分别处理左边、右边两个数列：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span></div><div class="line"><span class="number">9</span>, <span class="number">7</span>, <span class="number">10</span>, <span class="number">8</span></div></pre></td></tr></table></figure>
<p>先处理第一个序列，3为基准数：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">   i→      ←j</div><div class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">5</span>, <span class="number">4</span></div><div class="line">      得</div><div class="line"><span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">4</span></div><div class="line">      得</div><div class="line">子串<span class="number">1</span>： <span class="number">2</span>, <span class="number">1</span>   -&gt; <span class="number">1</span>, <span class="number">2</span></div><div class="line"></div><div class="line">子串<span class="number">2</span>： <span class="number">5</span>, <span class="number">4</span>   -&gt; <span class="number">4</span>, <span class="number">5</span></div></pre></td></tr></table></figure>
<p>因为是右边先开始，所以在2的位置，会碰撞，交换位置即得到了结果。子串<code>9, 7, 10, 8</code>大家自己去分析一下。最终排序结束了。然后我们按照上边的思想来写代码：</p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">int</span> a[<span class="number">11</span>];</div><div class="line"><span class="keyword">int</span> count = <span class="number">10</span>;</div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span></span>;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> * argv[])</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= count; i ++) &#123;</div><div class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>, &amp;a[i]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  sort(<span class="number">1</span>, count);</div><div class="line">  </div><div class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= count; j ++) &#123;</div><div class="line">    <span class="built_in">printf</span>(<span class="string">"%d "</span>, a[j]);</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> <span class="number">0</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> left, <span class="keyword">int</span> right)</span> </span>&#123;</div><div class="line">  <span class="keyword">if</span> ( left &gt; right ) &#123;</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 设置基准数</span></div><div class="line">  <span class="keyword">int</span> refNum = a[left];</div><div class="line">  </div><div class="line">  <span class="comment">// 设置左右起点</span></div><div class="line">  <span class="keyword">int</span> lPoint = left;</div><div class="line">  <span class="keyword">int</span> rPoint = right;</div><div class="line">  </div><div class="line">  <span class="comment">// 当没有碰撞的时候，不停的交换</span></div><div class="line">  <span class="keyword">while</span> (lPoint != rPoint) &#123;</div><div class="line">    <span class="comment">// 从右边开始找，比基准数小的数字, 然后停止，注意我的判断，如果比基准数大，rPoint向前移动一位，也就是说，如果比基准数字小，rPoint记录的就是这个数字的位置</span></div><div class="line">    <span class="keyword">while</span> (a[rPoint] &gt;= refNum &amp;&amp; lPoint &lt; rPoint) &#123;</div><div class="line">      rPoint --;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 左边找，比基准数大的数字，然后停止</span></div><div class="line">    <span class="keyword">while</span> (a[lPoint] &lt;= refNum &amp;&amp; lPoint &lt; rPoint ) &#123;</div><div class="line">      lPoint ++;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="comment">// 交换位置</span></div><div class="line">    <span class="keyword">if</span> ( lPoint &lt; rPoint ) &#123;</div><div class="line">      <span class="keyword">int</span> temp = a[lPoint];</div><div class="line">      a[lPoint] = a[rPoint];</div><div class="line">      a[rPoint] = temp;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">// 归位基准数字，这个时候，左右标记点处于同一个位置上，也就是基准点应该在的位置</span></div><div class="line">  a[left] = a[lPoint];</div><div class="line">  a[lPoint] = refNum;</div><div class="line">  <span class="comment">// 交换之后，开始处理子串，基准数不需要动位置</span></div><div class="line">  sort(left, lPoint - <span class="number">1</span>);</div><div class="line">  sort(lPoint + <span class="number">1</span>, right);</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> ;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>现在我们来回顾上边的问题<code>左边为基准数，为什么一定要先从右边开始</code>?</p>
<p>基准数字在左边，假设，左边先开始，找的是比基准数字大的数字：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">6</span>, <span class="number">7</span></div></pre></td></tr></table></figure>
<p>如上，找到数字6的时候，左边停下了，右边开始寻找，发现直接碰撞了，变成了：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">6</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">7</span></div></pre></td></tr></table></figure>
<p>但是如果从右边开始就会变成</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="number">2</span>, <span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">7</span></div></pre></td></tr></table></figure>
<h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>排序的算法还有很多，计数、基数、插入、归并、堆排序等，我们在后边会慢慢的涉及到。当然，快排的时间复杂度怎么算呢？我们想想，最差的情况，就是像冒泡一样，相邻的2个数字不停的交换，为：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(<span class="keyword">N</span>^<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>快排的最好时间复杂度为（<a href="http://blog.csdn.net/hn_gsf/article/details/52249621" target="_blank" rel="external">为什么</a>）：</p>
<figure class="highlight mathematica"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">O</span>(NLogN)</div></pre></td></tr></table></figure>
<p>由于关键字的比较和交换是跳跃进行的，因此，快速排序是一种不稳定的排序方法。</p>
<h4 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h4><p>要求对不定数量的数字进行排序，1秒之内完成。</p>
<p>拿到这道题，我们关注的应当是1s之内，数字是不定量的，我们需要按照上边提供的时间复杂度来讲。假如说现在范围超级大，使用桶排序基本不可能的，因为没法申请那么大的数组，如果数字超级多，使用冒泡排序的时间复杂度又是<code>O(N^2)</code>，但是使用快速排序却很好。代码省略了。</p>
<p>本文结束。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;算法开篇介绍：&lt;code&gt;Algorithm&lt;/code&gt;，是指解题方案的准确而完整的描述，代表着用系统的方法描述解决问题的策略机制。&lt;/p&gt;
&lt;h4 id=&quot;最快最简单的排序&quot;&gt;&lt;a href=&quot;#最快最简单的排序&quot; class=&quot;headerlink&quot; title=&quot;最快最简单的排序&quot;&gt;&lt;/a&gt;最快最简单的排序&lt;/h4&gt;&lt;p&gt;首先看题：&lt;/p&gt;
&lt;p&gt;班上有5位同学，分别考了5分，3分，5分，8分，2分，将分数从大到小排序是8，5，5，3，2。有什么好的办法可以编写一段程序，让计算机随机读入5个分数然后将这5个分数从大到小输出。老道的程序员可能各种冒泡，打擂台，这都比较深入了，先往下看：&lt;/p&gt;
&lt;p&gt;我们借助一个一维数组就可以解决这个问题，创建一个a[11]的数组，这样下标分别为a[0]-&amp;gt;a[10]，分别表示0分，1分…10分，每当有一个分数出现，就在对应的下标位置+1，最后打印即可满足我们现在的要求。&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; argc, &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;char&lt;/span&gt; * argv[])&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; a[&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; scannedNumber;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; &lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;; i ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a[i] = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; j = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; j &amp;lt; &lt;span class=&quot;number&quot;&gt;5&lt;/span&gt;; j ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;scanf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, &amp;amp;scannedNumber);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    a[scannedNumber] ++;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; k = &lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;; k &amp;gt;= &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; k --) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; l = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; l &amp;lt; a[k]; l ++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;printf&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;%d&quot;&lt;/span&gt;, k);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这种排序算法，我们称为&lt;strong&gt;桶排序&lt;/strong&gt;，每个分数都好比一个桶，每出现一次，就在桶中加一点东西。接下来，我们尝试着对数据范围在0~100之间的任意数量数字进行从大到小的排序：&lt;/p&gt;
    
    </summary>
    
    
      <category term="算法" scheme="https://wilddylan.github.io/tags/%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>上传Library到JCenter</title>
    <link href="https://wilddylan.github.io/2016/10/14/%E4%B8%8A%E4%BC%A0Library%E5%88%B0JCenter/"/>
    <id>https://wilddylan.github.io/2016/10/14/上传Library到JCenter/</id>
    <published>2016-10-14T03:27:30.000Z</published>
    <updated>2017-02-04T09:02:40.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="确定要上传的Library"><a href="#确定要上传的Library" class="headerlink" title="确定要上传的Library"></a>确定要上传的Library</h3><p>如果你有Library可以忽略此步骤，没有的话添加library。在Android Studio中选择File-&gt;New-&gt;New Module,然后选择一个Library,新建一个Library。这里以新建DemoLibrary为例子。<strong>（注意这里的Library需要后面的Package的名字一致）。</strong><img src="https://static.lufficc.com/image/ad2a895fc8eca0f284fafab1c0ce01d8.png" alt="新建一个Library"></p>
<a id="more"></a>
<p><img src="https://static.lufficc.com/image/a7e0fe6cd124b7e5d4fcf41613bef593.png" alt="新建一个Library"></p>
<p>现在项目的结构如下图，接下来就是添加必要的Jcenter的依赖，为上传做准备。<img src="https://static.lufficc.com/image/d481518bb518b985a5653280b7509ec7.png" alt="项目的结构"></p>
<hr>
<h3 id="注册账号"><a href="#注册账号" class="headerlink" title="注册账号"></a>注册账号</h3><p>首先去<a href="https://bintray.com/" target="_blank" rel="external">bintray官网</a>注册账号，注册完成后验证邮箱，然后登陆进入首页点击View All，选择Maven仓库，新建一个Package，填写Package名字<strong>（注意Package需要和你的Library的名字一致）</strong></p>
<p><img src="https://static.lufficc.com/image/5537a5ba30dbdd49baab5e2b507ea1b7.png" alt="img"></p>
<p>注意点击你的头像-&gt;Your Profile-&gt;Edit-&gt;Api key,这个先记下来，后面上传要用到。<img src="https://static.lufficc.com/image/286181bbe322d773d0c3e489ebf26fb9.png" alt="Api key"></p>
<p>新建一个Package<img src="https://static.lufficc.com/image/6c39acaf0cbf63f4b85a23f7eeb7eac2.png" alt="新建一个Package"><img src="https://static.lufficc.com/image/cdbbf4669ea432e5dc75e0cef161a324.png" alt="新建一个Package"></p>
<hr>
<h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><p>在整个工程的build.gradle文件中添加<code>classpath &#39;com.novoda:bintray-release:0.3.4&#39;</code>,<strong>注意是整个工程的build.gradle</strong>。</p>
<p><img src="https://static.lufficc.com/image/eafea98913c122a593384370fdf8c5f0.png" alt="添加依赖"></p>
<p>接着是在你自己Library（这里是DemoLibrary）的build.gradle的文件中配置自己的信息，复制下面的脚本，改成你自己的信息即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">apply plugin: &apos;com.android.library&apos;</div><div class="line">apply plugin: &apos;com.novoda.bintray-release&apos;</div><div class="line"></div><div class="line">publish &#123;</div><div class="line">    userOrg = &apos;lufficc&apos; //你的用户名</div><div class="line">    groupId = &apos;com.lufficc&apos; //你的唯一的groupId，对应com.squareup.okhttp3:okhttp:3.4.1中的com.squareup.okhttp3</div><div class="line">    artifactId = &apos;DemoLibrary&apos; //你的library的名字，对应com.squareup.okhttp3:okhttp:3.4.1中的okhttp</div><div class="line">    publishVersion = &apos;0.0.1&apos; //版本号</div><div class="line">    desc = &apos;This is a demo library to teach how to publish you own library to jcenter with android studio.&apos;</div><div class="line">    website = &apos;http://lufficc.com/&apos; //建议填写github地址，不过不影响，这里做演示填的自己的网址</div><div class="line"></div><div class="line">    bintrayUser = &apos;lufficc&apos; //你的用户名</div><div class="line">    bintrayKey = &apos;Your api key&apos; //在你的账户里面查找</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>经过上面的配置，上传成功后那么别人引用你的library的代码就为<code>compile &#39;com.lufficc:DemoLibrary:0.0.1&#39;</code>。</p>
<p><img src="https://static.lufficc.com/image/c864b7dae97021dea6660bb743dd0e1d.png" alt="你自己Library的build.gradle的文件中配置自己的信息"></p>
<hr>
<h3 id="上传"><a href="#上传" class="headerlink" title="上传"></a>上传</h3><p>经过上面的配置，现在就可以传了，上传之前记得Sync一下Project,然后打开命令行，输入,回车：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">gradlew clean build bintrayUpload -PdryRun=false</div></pre></td></tr></table></figure>
<p>然后等待几分钟，期间会联网下载依赖的库，最后如果没有问题，会显示BUILD SUCCESSFUL信息，然后去官网查看刚才建的Package，会发现多了你刚才上传的版本号。</p>
<p><img src="https://static.lufficc.com/image/74381d1a6a49480511a2106eea9ed822.png" alt="BUILD SUCCESSFUL"><img src="https://static.lufficc.com/image/ce3209d9745e933b7a49e799a6d26ffe.png" alt="上传成功的Package"></p>
<p>点进去可以看到有三种引用方式：<img src="https://static.lufficc.com/image/cbd39db7be19a0930c6c37e95fe7b18e.png" alt="img"></p>
<p>但是到这里还无法让别人也能引用，目前只是你自己的私人库。下面是添加到Jcenter,非常简单。</p>
<hr>
<h3 id="添加到Jcenter"><a href="#添加到Jcenter" class="headerlink" title="添加到Jcenter"></a>添加到Jcenter</h3><p>在上面的页面中点击Add To JCenter，然后随便填写一下comments，点击send，然后工作人员会审核和，你只需等待几个小时，然后会有站内消息提示你已经发布发到Jcenter，这样别人也可以引用你的Library，有没有很自豪的感觉！<img src="https://static.lufficc.com/image/fe06887af70db608557a387b2e896e58.png" alt="img"><img src="https://static.lufficc.com/image/06321bb78d2bb15d8b10b1afa0c13f31.png" alt="img"></p>
<hr>
<h3 id="更新版本号"><a href="#更新版本号" class="headerlink" title="更新版本号"></a>更新版本号</h3><p>这个非常简单，当你的Libraryd代码更改后，只需要更改一下上面的配置里面的<code>publishVersion</code>，运行<code>gradlew clean build bintrayUpload -PdryRun=false</code>，就可以更新版本号了。这样，整个过程就结束了，遇到什么问题欢迎评论提出或者私信我。</p>
<hr>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><blockquote>
<p>其实上传没那么复杂</p>
</blockquote>
<ol>
<li><p>注册账号</p>
</li>
<li><p>为自己的Library项目添加依赖，配置信息</p>
</li>
<li><p>上传，添加到Jcenter</p>
</li>
<li><p>更新版本号</p>
<hr>
</li>
</ol>
<h3 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h3><ol>
<li><p>如果你的Java doc含有中文导致上传失败，可以尝试在lib的build.gradle添加如下代码：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">allprojects &#123;</div><div class="line">tasks.withType(Javadoc) &#123;</div><div class="line">    options&#123;</div><div class="line">        encoding &quot;UTF-8&quot;</div><div class="line">        charSet &apos;UTF-8&apos;</div><div class="line">        links &quot;http://docs.oracle.com/javase/7/docs/api&quot;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>本教程是基于插件<a href="https://github.com/novoda/bintray-release" target="_blank" rel="external">novoda/bintray-release</a>的，更多问题可以查看<a href="https://github.com/novoda/bintray-release/issues" target="_blank" rel="external">issues</a>或者查看<a href="https://github.com/novoda/bintray-release/wiki" target="_blank" rel="external">Wiki</a>。</p>
</li>
</ol>
<p><a href="https://lufficc.com/blog/step-by-step-teach-you-to-upload-you-own-library-to-jcenter" target="_blank" rel="external">原文地址</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;确定要上传的Library&quot;&gt;&lt;a href=&quot;#确定要上传的Library&quot; class=&quot;headerlink&quot; title=&quot;确定要上传的Library&quot;&gt;&lt;/a&gt;确定要上传的Library&lt;/h3&gt;&lt;p&gt;如果你有Library可以忽略此步骤，没有的话添加library。在Android Studio中选择File-&amp;gt;New-&amp;gt;New Module,然后选择一个Library,新建一个Library。这里以新建DemoLibrary为例子。&lt;strong&gt;（注意这里的Library需要后面的Package的名字一致）。&lt;/strong&gt;&lt;img src=&quot;https://static.lufficc.com/image/ad2a895fc8eca0f284fafab1c0ce01d8.png&quot; alt=&quot;新建一个Library&quot;&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="AndroidLib" scheme="https://wilddylan.github.io/tags/AndroidLib/"/>
    
  </entry>
  
  <entry>
    <title>一些App动态化解决方案</title>
    <link href="https://wilddylan.github.io/2016/10/14/%E4%B8%80%E4%BA%9BApp%E5%8A%A8%E6%80%81%E5%8C%96%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://wilddylan.github.io/2016/10/14/一些App动态化解决方案/</id>
    <published>2016-10-14T02:30:36.000Z</published>
    <updated>2017-02-04T09:02:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>文章持续更新</p>
</blockquote>
<p>App动态化解决方案，说白了就是后台可以控制或更改App的行为。一些常见的做法如：</p>
<ol>
<li>App启动请求配置文件，配置文件中存放着一系列的参数，供App配置</li>
<li>使用一些第三方SDK提供的动态参数（跟第一种类似）</li>
<li>使用App触发与Socket的长连接，时时的调配或者修改应用程序信息</li>
<li>使用HTML</li>
</ol>
<p>使用HTML作为动态界面的App我们又称为<code>Hybrid App</code>（混合性App），是指介于<code>web-app</code>、<code>native-app</code>这两者之间的app，兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。现在有半数以上的App都可以被称为这种类型的App。</p>
<h4 id="热修复"><a href="#热修复" class="headerlink" title="热修复"></a>热修复</h4><p>程序出BUG了，服务端通过程序启动的配置文件或者Socket链接向App下发一段代码进行修复，业界出名的JSPatch使用范围极广。只需配置一段JS代码即可达到运行时替换或者增加方法等操作。是作为热修复的极好选择。还有一些热修复的方案就是通过HTML来替换当前的原生界面，这样的App通常是组件化App，所有界面的打开均通过服务器获取的Map进行路由，服务器只需动态的更新这张Map，替换到出问题的界面即可。但是这种方法仅仅对界面有用，如果某一类的功能出了问题，就无用了（App还是以界面为主的，BUG也多发生与界面，当然高级的BUG略过了）。</p>
<a id="more"></a>
<h4 id="热更新"><a href="#热更新" class="headerlink" title="热更新"></a>热更新</h4><p>热更新与热修复本应该是出现在同一个位置的，热更新多为代码的修改与控制的变更，比如说微信经常在App发布的时候埋一些小功能在里边，然后到了节日通过控制打开等，Hybrid App常用的动态更新分2中，服务端直接更新，动态更新本地的资源Zip包。我之前的公司也有写过一套JSON-&gt;View的方法用于更新界面。</p>
<h4 id="动态调试、实时调试"><a href="#动态调试、实时调试" class="headerlink" title="动态调试、实时调试"></a>动态调试、实时调试</h4><p>首先是与服务器建立链接的方式，一般都会以摇一摇等动作来触发，App与Socket建联之后，实时的监控这VC的<code>didAppear</code>等方法，每当App界面变化，都会为当页截图，处理之后通过长连接上传到服务器，服务器发给后台之后，后台根据一些空间的信息与截图进行绘制，一个同步的App界面就展示到了后台。当然，后台也可以动态的把这些空间的点击事件传回App。</p>
<p>日志的动态获取等完全是代码提前写好的，打开远程调试之后原有的Log组件输出在链路中，后台展示即可。通过socket我们可以做很多的操作。</p>
<h6 id="动态化的实现步骤"><a href="#动态化的实现步骤" class="headerlink" title="动态化的实现步骤"></a>动态化的实现步骤</h6><p>热更新与热修复这2点业界使用比较广泛，知识点也比较基础，所以这里不做讲解；动态界面调试，实时日志可以略微讲解一下。</p>
<ul>
<li>socket服务器的搭建</li>
<li>App.socket服务的编码，web.socket服务的编码</li>
<li>数据格式的制定</li>
<li>数据内容的编解码方式</li>
</ul>
<p>为了方便期间，socket服务从socket.io与webSocket中选择一种即可，我们选择socket.io，应为有很多现成的解决方案与代码。</p>
<p>服务端作为数据的中转站，做好一些基础的日志记录与错误捕获即可，App、Web端的编解码数据的方式要统一，App、Web实时的发送心跳包到服务器维持在服务器的虚拟存活状态。</p>
<p>App：每一个界面根据类名生成唯一的ID，内部的控件使用界面类名+控件类名+控件某一约定的属性内容，获取到之后使用base64编码之后发送到服务器，服务器做路由。</p>
<p>Web：拿到界面之后进行数据解码，首先渲染App传来的界面截图，然后做空间的处理，根据控件ID+控件详细信息（frame，selector&lt;可点击控件拥有&gt;）等，渲染，并可以操作，touch事件知道点击的控件之后，将事件传回App，做的好的可以把手势全部的做进去。</p>
<p>一个完整的界面动态调试模块基本可以做到，所有的手势识别，控件均可挪动，事件可以共同响应等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;文章持续更新&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;App动态化解决方案，说白了就是后台可以控制或更改App的行为。一些常见的做法如：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;App启动请求配置文件，配置文件中存放着一系列的参数，供App配置&lt;/li&gt;
&lt;li&gt;使用一些第三方SDK提供的动态参数（跟第一种类似）&lt;/li&gt;
&lt;li&gt;使用App触发与Socket的长连接，时时的调配或者修改应用程序信息&lt;/li&gt;
&lt;li&gt;使用HTML&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;使用HTML作为动态界面的App我们又称为&lt;code&gt;Hybrid App&lt;/code&gt;（混合性App），是指介于&lt;code&gt;web-app&lt;/code&gt;、&lt;code&gt;native-app&lt;/code&gt;这两者之间的app，兼具“Native App良好用户交互体验的优势”和“Web App跨平台开发的优势”。现在有半数以上的App都可以被称为这种类型的App。&lt;/p&gt;
&lt;h4 id=&quot;热修复&quot;&gt;&lt;a href=&quot;#热修复&quot; class=&quot;headerlink&quot; title=&quot;热修复&quot;&gt;&lt;/a&gt;热修复&lt;/h4&gt;&lt;p&gt;程序出BUG了，服务端通过程序启动的配置文件或者Socket链接向App下发一段代码进行修复，业界出名的JSPatch使用范围极广。只需配置一段JS代码即可达到运行时替换或者增加方法等操作。是作为热修复的极好选择。还有一些热修复的方案就是通过HTML来替换当前的原生界面，这样的App通常是组件化App，所有界面的打开均通过服务器获取的Map进行路由，服务器只需动态的更新这张Map，替换到出问题的界面即可。但是这种方法仅仅对界面有用，如果某一类的功能出了问题，就无用了（App还是以界面为主的，BUG也多发生与界面，当然高级的BUG略过了）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="动态化" scheme="https://wilddylan.github.io/tags/%E5%8A%A8%E6%80%81%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>Swift语法熟悉（四）</title>
    <link href="https://wilddylan.github.io/2016/10/13/Swift%E8%AF%AD%E6%B3%95%E7%86%9F%E6%82%89%EF%BC%88%E5%9B%9B%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/13/Swift语法熟悉（四）/</id>
    <published>2016-10-13T03:31:43.000Z</published>
    <updated>2017-02-04T09:01:56.000Z</updated>
    
    <content type="html"><![CDATA[<p>上期提到了使用<code>Moya</code>作为网络基础模块，但是涉及到了一个<code>sampleData</code>的问题，我们也是即时的提交了一个<a href="https://github.com/Moya/Moya/issues/713" target="_blank" rel="external">issue</a>来质问这样的默认<code>Response data</code>为什么类型竟然是<code>Optional</code>的。<code>Moya</code>的开发者举例：可以将上一次获取到的数据在需要的时候（网络请求失败）传入这里，所以进而给出建议：将<code>var sampleData</code>改为<code>var cachePolicy</code>进行缓存控制即可，缓存过期的时间由Server端使用Cache-control或Expires决定，目前有的回复是，作者觉得这个建议很棒，说不定有机会为<code>Moya</code>加入缓存机制。接下来继续我们的开发计划：</p>
<h6 id="推送服务"><a href="#推送服务" class="headerlink" title="推送服务"></a>推送服务</h6><p>应当明确的是，每家公司用的推送第三方都是不同的（大部分是阿里云、极光、个推），所以继承第三方SDK这个事情不应该出现在框架中。框架仅仅负责申请推送能力即可。测试：在测试之前，Info.plist中所需要申请权限的Key需要自己手动配置。Xcode 8 后打开推送需要在程序中打开选项：</p>
<a id="more"></a>
<p><img src="http://ocef2grmj.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-13%20%E4%B8%8B%E5%8D%8812.04.27.png" alt=""></p>
<p>这样，如果是单单写权限的话，直接用之前我们引入的<code>PermissionScope</code>就可以搞定了，Push的class可以写为open的，因为每个项目对Push的需求不同，所以在Push中我们顺便截获一下信息然后提供给用户，也很简单。所以获得推送权限的需求我们放到Permission.swift中。由于屏幕限制，所以Permission也最多允许大家同时打开3个权限。改写之前的<code>Permission.swift</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> PermissionScope</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">INSPermissionType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> notification(<span class="type">Set</span>&lt;<span class="type">UIUserNotificationCategory</span>&gt;?, <span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> locationAlways(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> locationWhenInUse(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> contact(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> event(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> microphone(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> camera(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> photos(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> reminders(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> bluetooth(<span class="type">String</span>)</div><div class="line">  <span class="keyword">case</span> motion(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Permission</span> </span>&#123;</div><div class="line">  open <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">Permission</span>()</div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> pscope: <span class="type">PermissionScope</span> = &#123;</div><div class="line">    <span class="keyword">let</span> permissionScope = <span class="type">PermissionScope</span>()</div><div class="line">    <span class="comment">// Default customs</span></div><div class="line">    permissionScope.headerLabel.text = <span class="string">"嗨，你好！"</span></div><div class="line">    permissionScope.bodyLabel.text = <span class="string">"在使用我们的应用之前\n我们需要你做一些事情："</span></div><div class="line">    permissionScope.closeButtonTextColor = <span class="type">UIColor</span>.clear</div><div class="line">    permissionScope.permissionButtonΒorderWidth = <span class="number">0.5</span></div><div class="line">    permissionScope.permissionButtonCornerRadius = <span class="number">2</span></div><div class="line">    <span class="comment">/// 如果你希望更改权限开启按钮的英文，就需要自己配置本地化文件</span></div><div class="line">    <span class="comment">/// 参考这里 https://github.com/nickoneill/PermissionScope/pull/12#issuecomment-96428580</span></div><div class="line">    <span class="keyword">return</span> permissionScope</div><div class="line">  &#125;()</div><div class="line">  </div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">requestPermission</span>(<span class="title">_</span> <span class="title">permissionTypes</span>: [<span class="title">INSPermissionType</span>], <span class="title">_</span> <span class="title">authChange</span>: <span class="title">authClosureType</span>? = <span class="title">nil</span>, <span class="title">cancelled</span>: <span class="title">cancelClosureType</span>? = <span class="title">nil</span>) </span>&#123;</div><div class="line">    <span class="keyword">for</span> item <span class="keyword">in</span> permissionTypes &#123;</div><div class="line">      <span class="keyword">switch</span> item &#123;</div><div class="line">      <span class="keyword">case</span> .notification(<span class="keyword">let</span> categories, <span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">NotificationsPermission</span>(notificationCategories: categories), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .locationAlways(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">LocationWhileInUsePermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .locationWhenInUse(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">LocationWhileInUsePermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .contact(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">ContactsPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .event(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">EventsPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .microphone(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">MicrophonePermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .camera(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">CameraPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .photos(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">PhotosPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .reminders(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">RemindersPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .bluetooth(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">BluetoothPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">case</span> .motion(<span class="keyword">let</span> message):</div><div class="line">        pscope.addPermission(<span class="type">MotionPermission</span>(), message: message)</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      <span class="keyword">default</span>:</div><div class="line">        <span class="keyword">continue</span></div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    pscope.show(authChange, cancelled: cancelled)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后测试效果（别忘记在Info.plist中添加相关的请求权限的Key-Desc）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> permissionTypes = [</div><div class="line">  <span class="type">INSPermissionType</span>.notification(<span class="literal">nil</span>, <span class="string">"打开推送服务"</span>),</div><div class="line">  <span class="type">INSPermissionType</span>.camera(<span class="string">"打开相机服务"</span>),</div><div class="line">  <span class="type">INSPermissionType</span>.photos(<span class="string">"希望使用照片"</span>)</div><div class="line">]</div><div class="line">    </div><div class="line"><span class="type">Permission</span>.requestPermission(permissionTypes)</div></pre></td></tr></table></figure>
<p><img src="http://ocef2grmj.bkt.clouddn.com/Simulator%20Screen%20Shot%202016%E5%B9%B410%E6%9C%8813%E6%97%A5%20%E4%B8%8B%E5%8D%883.01.27.png" alt=""></p>
<p>原本计划是要写Push.swift进行截获数据的，但是总感觉这样做貌似不太合理。所以索性我们止只统计一下用户收到推送好了，在Push.swift中仅提供一个方法入口，把推送的内容传进来供我们内部处理。不要干涉AppDelegate处理推送了，而且在iOS10之后要做版本兼容，使用<code>UNUserNotificationCenterDelegate</code>来处理推送，而且大多数第三方SDK都会有自己的处理方式。</p>
<p>所以在我们的<code>Push.swift</code>中，我们先预留一些代码：</p>
<p>等会儿先看个东西：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/2A408F4BC0C4A4890BD6645C07F93DCC.jpg" alt=""></p>
<p>好、继续写代码：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Push</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">Push</span>()</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">DeviceToken</span><span class="params">(<span class="number">_</span> deviceToken: Data)</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">ReceivedPushMessage</span> <span class="params">(<span class="number">_</span> userInfo: [AnyHashable : Any])</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>简单的预留一些方法入口即可，不急着写，接着往下写日志上报（直接改造之前的Logger类）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">INSLogger</span> </span>&#123;</div><div class="line">  <span class="comment">/// 默认为输出全部日志</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">INSLogger</span>()</div><div class="line">  </div><div class="line">  <span class="comment">/// 日志级别</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> level: <span class="type">LogLevel</span> = .all</div><div class="line">  <span class="comment">/// 是否上报崩溃</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> crashCollect: <span class="type">Bool</span> = <span class="literal">true</span></div><div class="line">  </div><div class="line">  <span class="comment">/// 日志输出</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - parameter lev: 日志级别</span></div><div class="line">  <span class="comment">/// - parameter content: 日志内容</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">printLog</span><span class="params">(<span class="number">_</span> lev: LogLevel, <span class="number">_</span> details: String, <span class="number">_</span> items: Any)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> level == .all || level == lev, <span class="type">ModeSwitcher</span>.currentMode == .develope <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(lev.rawValue, details, <span class="string">"\n"</span>, items)</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> exception: <span class="type">NSException</span>? = <span class="literal">nil</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setUncaughtException</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">NSSetUncaughtExceptionHandler</span> &#123;</div><div class="line">      <span class="keyword">let</span> exception = $<span class="number">0</span></div><div class="line">      <span class="keyword">let</span> name = exception.name</div><div class="line">      <span class="keyword">let</span> reason = exception.reason ?? <span class="string">"Without system crash version."</span></div><div class="line">      <span class="keyword">let</span> callStack = exception.callStackSymbols</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"name:\(name)\nreason:\(reason)\ncallStack:\(callStack.joined(separator: "</span>\n<span class="string">"))"</span></div><div class="line">      </div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>获取到崩溃的信息后，我们在这里加一个<code>TODO</code>标签。 这里需要注意的是：<strong>框架外部如果也需要做日志捕获</strong>，那么需要先使用<code>NSGetUncaughtExceptionHandler()</code>获取当前的捕获器，在自己的捕获成功之后也让别人的捕获成功。啊好累啊，这还不是完整的奔溃捕获，于是我们接着写代码（写代码到时无妨，主要是这里有一坑爹的事情，需要自己去查看解决，说明：<a href="http://stackoverflow.com/questions/25441302/how-should-i-use-nssetuncaughtexceptionhandler-in-swift" target="_blank" rel="external">无法把方法传入这些捕获方法</a>，<a href="https://github.com/getsentry/raven-swift/tree/master/Raven" target="_blank" rel="external">也附上气前一个链接中的代码</a>）：</p>
<p><img src="https://camo.githubusercontent.com/8154976fc5aac34a717ebbfbd98727725e1be912/68747470733a2f2f6d656469612e67697068792e636f6d2f6d656469612f31314f4f4151536e55615a54324d2f67697068792e676966" alt=""></p>
<p>慵懒的完善了<code>signal</code>后（上边提到的不能使用C方法的问题自己去解决把，这里仅仅是展示，所以不写那么详细了）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// 设置异常捕获</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setUncaughtException</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">    <span class="type">NSSetUncaughtExceptionHandler</span> &#123;</div><div class="line">      <span class="keyword">let</span> exception = $<span class="number">0</span></div><div class="line">      <span class="keyword">let</span> name = exception.name</div><div class="line">      <span class="keyword">let</span> reason = exception.reason ?? <span class="string">"Without system crash version."</span></div><div class="line">      <span class="keyword">let</span> callStack = exception.callStackSymbols</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"name:\(name)\nreason:\(reason)\ncallStack:\(callStack.joined(separator: "</span>\n<span class="string">"))"</span></div><div class="line">      </div><div class="line">      exception.raise()</div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    signal(<span class="type">SIGILL</span>) &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Illegal instruction (not reset when caught)"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGABRT</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Abort, abort()"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGFPE</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Floating point exception"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGBUS</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Bus Error"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGSEGV</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): segmentation violation"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGSYS</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Bad argument to system call"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">    signal(<span class="type">SIGPIPE</span>)  &#123;</div><div class="line">      <span class="keyword">let</span> crashLog = <span class="string">"SignalRaisedException(\($0)): Write on a pipe with no one to read it"</span></div><div class="line">      <span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">unSetUncaughtException</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">NSSetUncaughtExceptionHandler</span>(<span class="literal">nil</span>)</div><div class="line">    signal(<span class="type">SIGILL</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGABRT</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGFPE</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGBUS</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGSEGV</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGSYS</span>, <span class="type">SIG_DFL</span>);</div><div class="line">    signal(<span class="type">SIGPIPE</span>, <span class="type">SIG_DFL</span>);</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p>这里只捕获了一部分signal，点进去自己看了解下，我之前也写过一篇关于日志捕获的文章，可以去找找。继续往下写：信息收集，新建swift文件<code>Analytics.swift</code>，这里我只给出一部分思路（完整的Analytics又是一个独立的框架，建议参考的是<a href="https://github.com/zhugesdk/zhuge-ios/tree/master/Zhuge" target="_blank" rel="external">开源的ZhugeIO</a>）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> LKDBHelper</div><div class="line"></div><div class="line"><span class="keyword">let</span> <span class="type">AnalyticsManagerFlushedFlagKey</span> = <span class="string">"AnalyticsManagerFlushedFlagKey"</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">AnalyticsItem</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="comment">/// 事件名称</span></div><div class="line">  <span class="keyword">var</span> eventName: <span class="type">String</span></div><div class="line">  <span class="comment">/// 事件数据</span></div><div class="line">  <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]?</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">toAnalytice</span><span class="params">()</span></span> -&gt;[<span class="type">String</span>: <span class="type">String</span>] &#123;</div><div class="line">    <span class="keyword">return</span> [eventName ?? <span class="string">""</span>: <span class="string">"\(parameters ?? ["</span><span class="string">": "</span><span class="string">"])"</span>]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(<span class="number">_</span> eventName: <span class="type">String</span>, <span class="number">_</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? = <span class="literal">nil</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.eventName = eventName</div><div class="line">    <span class="keyword">self</span>.parameters = parameters</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getTableName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"AnalyticsItem"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Analytics</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">Analytics</span>()</div><div class="line">  <span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">FlushHandler</span> = (<span class="number">_</span> info: [<span class="type">String</span>], <span class="number">_</span> analyticsData: [[<span class="type">String</span>: <span class="type">String</span>]])-&gt;()</div><div class="line">  </div><div class="line">  <span class="comment">/// 设备唯一标识，默认是UUID</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> deviceIdentifier: <span class="type">String</span></div><div class="line">  <span class="comment">/// 设备用户标识，以设备标识为准</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> userIdentifier: <span class="type">String</span></div><div class="line">  <span class="comment">/// 上报间隔，会调用上报的方法，外部控制网络请求</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> flushInterval: <span class="type">Int</span> = <span class="number">10</span></div><div class="line">  <span class="comment">/// 上报的回调方法</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> flushHandler: <span class="type">FlushHandler</span>?</div><div class="line">  </div><div class="line">  <span class="comment">/// 存储准备上报的数组</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> analyticsItems: [<span class="type">AnalyticsItem</span>] = []</div><div class="line">  <span class="comment">/// 是否已经上报，通过检查本地值来确定</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> flushed: <span class="type">Bool</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">var</span> timer: <span class="type">Timer</span>? = <span class="literal">nil</span></div><div class="line">  </div><div class="line">  <span class="comment">/// 追踪事件</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">track</span><span class="params">(<span class="number">_</span> eventName: String, <span class="number">_</span> parameters: [String: Any]? = <span class="literal">nil</span>)</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> analyticsItems.<span class="built_in">count</span> == <span class="number">0</span> &#123;</div><div class="line">      startTimer()</div><div class="line">    &#125;</div><div class="line">    analyticsItems.append(<span class="type">AnalyticsItem</span>(eventName, parameters))</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 主动上报到服务器</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">flush</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> analyticsItems.<span class="built_in">count</span> &gt; <span class="number">0</span>, <span class="keyword">let</span> handler = flushHandler <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    handler([deviceIdentifier, userIdentifier], analyticsItems.<span class="built_in">map</span> &#123; <span class="keyword">return</span> $<span class="number">0</span>.toAnalytice() &#125;)</div><div class="line">    stopTimer()</div><div class="line">    flushed = <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">startTimer</span><span class="params">()</span></span> &#123;</div><div class="line">    stopTimer()</div><div class="line">    timer = <span class="type">Timer</span>.<span class="keyword">init</span>(timeInterval: <span class="type">TimeInterval</span>(flushInterval), target: <span class="keyword">self</span>, selector: <span class="string">"flush"</span>, userInfo: <span class="literal">nil</span>, repeats: <span class="literal">true</span>)</div><div class="line">    <span class="type">RunLoop</span>.current.add(timer!, forMode: .commonModes)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">stopTimer</span><span class="params">()</span></span> &#123;</div><div class="line">    timer?.invalidate()</div><div class="line">    timer = <span class="literal">nil</span></div><div class="line">    analyticsItems.removeAll()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">getLocalAnalyticsItem</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">AnalyticsItem</span>.search(withWhere: <span class="literal">nil</span>).forEach &#123;</div><div class="line">      [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">      <span class="keyword">self</span>.analyticsItems.append($<span class="number">0</span> <span class="keyword">as</span>! <span class="type">AnalyticsItem</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">let</span> dbHelper = <span class="type">AnalyticsItem</span>.getUsingLKDBHelper()!</div><div class="line">    dbHelper.dropTable(with: <span class="type">AnalyticsItem</span>.<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">setNeedsRestoreItems</span><span class="params">()</span></span> &#123;</div><div class="line">    analyticsItems.forEach &#123; $<span class="number">0</span>.saveToDB() &#125;</div><div class="line">    analyticsItems.removeAll()</div><div class="line">    <span class="type">UserDefaults</span>.standard.<span class="keyword">set</span>(<span class="literal">false</span>, forKey: <span class="type">AnalyticsManagerFlushedFlagKey</span>)</div><div class="line">    <span class="type">UserDefaults</span>.standard.synchronize()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">restoreItems</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">if</span> flushed == <span class="literal">false</span> &#123;</div><div class="line">      getLocalAnalyticsItem()</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">UIApplicationDidEnterBackground</span><span class="params">()</span></span> &#123;</div><div class="line">    setNeedsRestoreItems()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">UIApplicationDidBecomeActive</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">self</span>.flushed = <span class="type">UserDefaults</span>.standard.bool(forKey: <span class="type">AnalyticsManagerFlushedFlagKey</span>)</div><div class="line">    restoreItems()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">addListener</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: <span class="string">"UIApplicationDidEnterBackground"</span>, name: .<span class="type">UIApplicationDidEnterBackground</span>, object: <span class="literal">nil</span>)</div><div class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.addObserver(<span class="keyword">self</span>, selector: <span class="string">"UIApplicationDidBecomeActive"</span>, name: .<span class="type">UIApplicationDidBecomeActive</span>, object: <span class="literal">nil</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">removeListener</span><span class="params">()</span></span> &#123;</div><div class="line">    stopTimer()</div><div class="line">    <span class="type">NotificationCenter</span>.<span class="keyword">default</span>.removeObserver(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">init</span>() &#123;</div><div class="line">    <span class="keyword">self</span>.deviceIdentifier = <span class="type">UUID</span>().uuidString</div><div class="line">    <span class="keyword">self</span>.userIdentifier = <span class="string">"iOS Device"</span></div><div class="line">    <span class="keyword">self</span>.flushed = <span class="type">UserDefaults</span>.standard.bool(forKey: <span class="type">AnalyticsManagerFlushedFlagKey</span>)</div><div class="line">    restoreItems()</div><div class="line">    addListener()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">deinit</span> &#123;</div><div class="line">    removeListener()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> <span class="type">AnalyticsManager</span> = <span class="type">Analytics</span>.<span class="keyword">default</span></div></pre></td></tr></table></figure>
<p>完成之前的奔溃时日志上报</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// <span class="doctag">TODO:</span> 上报</span></div><div class="line"><span class="type">AnalyticsManager</span>.track(<span class="string">"CRASH"</span>, [<span class="string">"info"</span>: crashLog])</div><div class="line"><span class="comment">// 程序奔溃需要调用标记未上传</span></div><div class="line"><span class="type">AnalyticsManager</span>.setNeedsRestoreItems()</div></pre></td></tr></table></figure>
<p>写到这里，框架其实只有30%，只有结合业务才能做出与业务相匹配的框架，接下来就是Cache，我只给出代码框架：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//存储引擎</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IDPStorageType</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> disk</div><div class="line">  <span class="keyword">case</span> sql</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//缓存策略</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">IDPCacheStoragePolicy</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> memory</div><div class="line">  <span class="keyword">case</span> disk</div><div class="line">  <span class="keyword">case</span> memoryAndDisk</div><div class="line">&#125;</div><div class="line"></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">INSCache</span> </span>&#123;</div><div class="line">  open <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">INSCache</span>()</div><div class="line">  </div><div class="line">  open <span class="keyword">var</span> _nameSpace: <span class="type">String</span> = <span class="string">"INSCache"</span></div><div class="line">  open <span class="keyword">var</span> _cacheStoragePolicy: <span class="type">IDPCacheStoragePolicy</span> = .memoryAndDisk</div><div class="line">  open <span class="keyword">var</span> _memoryCapacity: <span class="type">Float</span> = <span class="number">0</span></div><div class="line">  open <span class="keyword">var</span> _memoryTotalCost: <span class="type">Float</span> = <span class="number">0</span></div><div class="line">  open <span class="keyword">var</span> _diskExpiredTime: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">existCacheForKey</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt;<span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">clearMemory</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">existCacheForKeyInMemory</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt;<span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">existCacheForKeyOnDisk</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt;<span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">setObject</span><span class="params">(<span class="number">_</span> data: AnyObject, <span class="keyword">for</span> key: String)</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">getObject</span><span class="params">(<span class="keyword">for</span> key: String)</span></span> -&gt;<span class="type">AnyObject</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">objectForKeyOnlyInMemory</span><span class="params">(<span class="number">_</span> key: String)</span></span> -&gt;<span class="type">AnyObject</span>? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">asyncObject</span><span class="params">(forKey key: String, <span class="number">_</span> handler: <span class="params">(AnyObject)</span></span></span>-&gt;()) &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">removeObjcet</span><span class="params">(<span class="keyword">for</span> key: String)</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">removeObjcetForKeyOnlyInMemory</span><span class="params">(<span class="number">_</span> key: String)</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">removeAll</span> <span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">removeAllInMemory</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">removeAllInDisk</span><span class="params">()</span></span> &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">removeNameSpace</span>(<span class="title">_</span> <span class="title">spaceName</span>: <span class="title">String</span>) </span>&#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>包括模型的基类：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Model</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  open <span class="keyword">var</span> _ModelIdentifier: <span class="type">String</span>?</div><div class="line">  </div><div class="line">  open <span class="keyword">var</span> _ModelUpdatedAt: <span class="type">Date</span>?</div><div class="line">  open <span class="keyword">var</span> _ModelCreatedAt: <span class="type">Date</span>?</div><div class="line">  open <span class="keyword">var</span> _ModelExpiredAt: <span class="type">Date</span>?</div><div class="line">  open <span class="keyword">var</span> _ModelNeedsCache: <span class="type">Bool</span>?</div><div class="line">  </div><div class="line">  open <span class="keyword">var</span> _CurrentPage: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  open <span class="keyword">var</span> _PageSize: <span class="type">Int</span> = <span class="number">10</span></div><div class="line">  open <span class="keyword">var</span> _TotalCount: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  open <span class="keyword">var</span> _StartAt: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">load</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">refresh</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">cancel</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">goNextPage</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">goPrevPage</span><span class="params">()</span></span> &#123; &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">hasPrev</span><span class="params">()</span></span> -&gt;<span class="type">Bool</span>&#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">hasNext</span><span class="params">()</span></span> -&gt;<span class="type">Bool</span>&#123; <span class="keyword">return</span> <span class="literal">false</span> &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">    </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>框架到这里就不说了，接下来有时间就会实际的在使用中一步步的优化框架，让框架适应业务。最近有点忙，开了算法课程，所以框架上边大部分东西都是懒得写，但是使用到的第三方库都建议大家去阅读源码（除ASDK以外）。希望会有所提升。<a href="https://github.com/WildDylan/INSSwift.git" target="_blank" rel="external">代码地址</a>。仅供作为Swift的语言熟悉，不作为框架教学。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;上期提到了使用&lt;code&gt;Moya&lt;/code&gt;作为网络基础模块，但是涉及到了一个&lt;code&gt;sampleData&lt;/code&gt;的问题，我们也是即时的提交了一个&lt;a href=&quot;https://github.com/Moya/Moya/issues/713&quot;&gt;issue&lt;/a&gt;来质问这样的默认&lt;code&gt;Response data&lt;/code&gt;为什么类型竟然是&lt;code&gt;Optional&lt;/code&gt;的。&lt;code&gt;Moya&lt;/code&gt;的开发者举例：可以将上一次获取到的数据在需要的时候（网络请求失败）传入这里，所以进而给出建议：将&lt;code&gt;var sampleData&lt;/code&gt;改为&lt;code&gt;var cachePolicy&lt;/code&gt;进行缓存控制即可，缓存过期的时间由Server端使用Cache-control或Expires决定，目前有的回复是，作者觉得这个建议很棒，说不定有机会为&lt;code&gt;Moya&lt;/code&gt;加入缓存机制。接下来继续我们的开发计划：&lt;/p&gt;
&lt;h6 id=&quot;推送服务&quot;&gt;&lt;a href=&quot;#推送服务&quot; class=&quot;headerlink&quot; title=&quot;推送服务&quot;&gt;&lt;/a&gt;推送服务&lt;/h6&gt;&lt;p&gt;应当明确的是，每家公司用的推送第三方都是不同的（大部分是阿里云、极光、个推），所以继承第三方SDK这个事情不应该出现在框架中。框架仅仅负责申请推送能力即可。测试：在测试之前，Info.plist中所需要申请权限的Key需要自己手动配置。Xcode 8 后打开推送需要在程序中打开选项：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift语法熟悉（三）</title>
    <link href="https://wilddylan.github.io/2016/10/11/Swift%E8%AF%AD%E6%B3%95%E7%86%9F%E6%82%89%EF%BC%88%E4%B8%89%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/11/Swift语法熟悉（三）/</id>
    <published>2016-10-11T04:16:46.000Z</published>
    <updated>2017-02-04T09:01:58.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>为什么将数据模块与网络模块一起编写？紧密相关的2者，也是应用程序最常见的组合：请求数据-存储数据-展示数据。</p>
</blockquote>
<h6 id="数据模块（JSON、Model、DB）"><a href="#数据模块（JSON、Model、DB）" class="headerlink" title="数据模块（JSON、Model、DB）"></a>数据模块（JSON、Model、DB）</h6><p>数据持久层其实有很多杂乱的选择，文件做为持久层的基础类型，又被分为sql、xml等等类型，我们可选的范围也很广阔，也可以自己动手来完善整个持久层模块，但这似乎对于很懒的程序员来说太浪费玩耍的时间了。所以我们索性在一些完善的开源库中挑选一类供我们做上层的封装。我们姑且确定选择FMDB作为我们的数据库支撑，但是联想到一般情况下，把JSON转换为Model直接存向数据库是常用需求，所以在数据模块这一层貌似扩展的很大了。我们首先引入<a href="https://github.com/SwiftyJSON/SwiftyJSON" target="_blank" rel="external">SwiftyJSON</a>作为JSON解析，不仅供框架使用也供外层使用，但是SwiftJSON解析后的数据仅是JSON对象，看来我们要亲自把JSON对象转换为Model了，写好之后，就是数据的存储。</p>
<a id="more"></a>
<p>通常情况下，iOS App中常用的存储：UserDefault、WriteToFile、SQL、钥匙串等。为了框架的通用性，只选择完善SQL，即Model-&gt;DB，至于别的存储让App在框架外层随意。如果你的团队不是足够成熟的话， 并不建议在项目中使用CoreData。</p>
<p>想想这个模块比较大，所以单开一个文件夹：<code>Model</code>吧。</p>
<p>首先引入SwiftJSON作为JSON解析的模块。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'SwiftyJSON'</span></div></pre></td></tr></table></figure>
<p>明确目标1：</p>
<ul>
<li>JSON对象转换为模型</li>
<li>模型转换为JSON对象</li>
</ul>
<p>要实现我们这2个功能，必须遵守协议，在协议的方法中返回Mapping供我们赋值，类似：[属性名：JSON对象的Key]。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ModelMap</span> </span>&#123;</div><div class="line">  <span class="comment">/// 提供属性的对应Map</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - returns: 字典，为：属性名称：(JSON对象中名称，类型)</span></div><div class="line">  <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">keyMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, (<span class="type">String</span>, <span class="type">String</span>)&gt;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>首先我们要了解一些关于Swift runtime的东西，在纯Swift类中的属性在未添加<code>dynamic</code>修饰之前是不可以被运行时获取到属性的，之前我写过一篇有关Swift运行时的<a href="http://www.jianshu.com/p/9c36a5b7820a" target="_blank" rel="external">文章</a>，可以细阅。</p>
<p>在这里有一个缺陷，就是我们这个库不允许你的模型是继承来的，因为static关键字代替了<code>class final</code>，在子类中不可以被覆盖，使用Extension又不能很好的解决方便程度上的问题而且需要写基类。所以在考虑了很多很多之后，还是决定写扩展！并且不对纯Swift类进行处理，只处理NSObject类。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="comment">/// 提供属性的对应Map</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - returns: 字典，为：属性名称：JSON对象中名称</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">keyMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 提供的类对应Map</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">classMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">AnyClass</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 忽略的属性的名称</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - returns: 数组，忽略的属性名称数组</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">ignoredKey</span>() -&gt;[<span class="title">String</span>]? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这样所有需要被转换的类都需要继承Model类。但是使用的时候就比较尴尬了，必须要提供一个初始值，下面是我们的测试类：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"><span class="keyword">import</span> INSSwift</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span> = <span class="string">""</span></div><div class="line">  <span class="keyword">var</span> gender : <span class="type">Bool</span> = <span class="literal">false</span></div><div class="line">  <span class="keyword">var</span> array: <span class="type">Array</span> = [<span class="string">""</span>]</div><div class="line">  <span class="keyword">var</span> dictionary: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Any</span>&gt; = [<span class="string">""</span>: <span class="string">""</span>]</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> student: <span class="type">Student</span> = <span class="type">Student</span>()</div><div class="line">  <span class="keyword">var</span> teachers: [<span class="type">Teacher</span>] = []</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> ignored: <span class="type">String</span> = <span class="string">""</span></div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">keyMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">      <span class="string">"gender"</span>: <span class="string">"dictionary, gender"</span>,</div><div class="line">      <span class="string">"teachers"</span>: <span class="string">"student, t"</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">classMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">AnyClass</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> [</div><div class="line">      <span class="string">"student"</span>: <span class="type">Student</span>.<span class="keyword">self</span>,</div><div class="line">      <span class="string">"teachers"</span>: <span class="type">Teacher</span>.<span class="keyword">self</span></div><div class="line">    ]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">ignoredKey</span>() -&gt;[<span class="title">String</span>]? </span>&#123;</div><div class="line">    <span class="keyword">return</span> [<span class="string">"ignored"</span>]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> sname: <span class="type">String</span> = <span class="string">""</span></div><div class="line">  <span class="keyword">var</span> sage: <span class="type">Int</span> = <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> tname: <span class="type">String</span> = <span class="string">""</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果<code>dynamic var name: String?</code>的话，后果自负…会提示错误不能转换为OC类型。这里我附上完整的Model处理的代码以及测试代码，在Model文件夹下新建文件<code>Model.swift</code>：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> SwiftyJSON</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">PropertyType</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> tString = <span class="string">"T@\"NSString\""</span></div><div class="line">  <span class="keyword">case</span> tNSArray = <span class="string">"T@\"NSArray\""</span></div><div class="line">  <span class="keyword">case</span> tNSDictionary = <span class="string">"T@\"NSDictionary\""</span></div><div class="line">  <span class="keyword">case</span> tBool = <span class="string">"TB"</span></div><div class="line">  <span class="keyword">case</span> tClass = <span class="string">"T@\"_TtC"</span></div><div class="line">  <span class="keyword">case</span> tDouble = <span class="string">"Td"</span></div><div class="line">  <span class="keyword">case</span> tFloat = <span class="string">"Tf"</span></div><div class="line">  <span class="keyword">case</span> tInt = <span class="string">"Tq"</span></div><div class="line">  <span class="keyword">case</span> tInt8 = <span class="string">"Tc"</span></div><div class="line">  <span class="keyword">case</span> tInt16 = <span class="string">"Ts"</span></div><div class="line">  <span class="keyword">case</span> tInt32 = <span class="string">"Ti"</span></div><div class="line">  <span class="keyword">case</span> tUInt = <span class="string">"TQ"</span></div><div class="line">  <span class="keyword">case</span> tUInt8 = <span class="string">"TC"</span></div><div class="line">  <span class="keyword">case</span> tUInt16 = <span class="string">"TS"</span></div><div class="line">  <span class="keyword">case</span> tUInt32 = <span class="string">"TI"</span></div><div class="line">  <span class="keyword">case</span> unknow = <span class="string">"UNKNOWTYPE"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="comment">/// 提供属性的对应Map</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - returns: 字典，为：属性名称：JSON对象中名称</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">keyMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 提供的类对应Map</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">classMapping</span>() -&gt;<span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">AnyClass</span>&gt;? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 忽略的属性的名称</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - returns: 数组，忽略的属性名称数组</span></div><div class="line">  open <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">ignoredKey</span>() -&gt;[<span class="title">String</span>]? </span>&#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 模型生成工厂</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModelFactory</span> </span>&#123;</div><div class="line">  </div><div class="line">  <span class="comment">// MARK: - 对象生成</span></div><div class="line">  </div><div class="line">  <span class="comment">/// 转换JSON-&gt;Model</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - parameter json: JSON对象</span></div><div class="line">  <span class="comment">/// - parameter cls: 类型</span></div><div class="line">  <span class="comment">/// - returns: AnyObject</span></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">Convert</span>(<span class="title">JSON</span> <span class="title">json</span>: <span class="title">JSON</span>?, <span class="title">to</span> <span class="title">cls</span>: <span class="title">AnyClass</span>) -&gt;<span class="title">AnyObject</span>? </span>&#123;</div><div class="line">    <span class="keyword">let</span> model = cls.alloc()</div><div class="line">    <span class="keyword">let</span> keyMapping = cls.keyMapping()</div><div class="line">    <span class="keyword">let</span> classMapping = cls.classMapping()</div><div class="line">    </div><div class="line">    setValue(with: fullPropertyFor(<span class="class"><span class="keyword">class</span>: <span class="title">cls</span>), <span class="title">for</span>: <span class="title">model</span>, <span class="title">with</span>: <span class="title">classMapping</span>, <span class="title">with</span>: <span class="title">keyMapping</span>, <span class="title">data</span>: <span class="title">json</span>)</span></div><div class="line">    <span class="title">return</span> <span class="title">model</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  // <span class="title">MARK</span>: - <span class="title">Private</span> <span class="title">methods</span></div><div class="line">  </div><div class="line">  /// 赋值</div><div class="line">  /// - <span class="title">parameter</span> <span class="title">props</span>: 属性对应字典</div><div class="line">  /// - <span class="title">parameter</span> <span class="title">object</span>: 赋值的对象</div><div class="line">  /// - <span class="title">parameter</span> <span class="title">clsMap</span>: 类型映射字典</div><div class="line">  /// - <span class="title">parameter</span> <span class="title">mapping</span>: 属性映射字典</div><div class="line">  /// - <span class="title">parameter</span> <span class="title">data</span>: <span class="title">JSON</span>对象</div><div class="line">  <span class="title">public</span> <span class="title">class</span> <span class="title">func</span> <span class="title">setValue</span>(<span class="title">with</span> <span class="title">props</span>: <span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;?,</div><div class="line">                             <span class="title">for</span> <span class="title">object</span>: <span class="title">AnyObject</span>,</div><div class="line">                             <span class="title">with</span> <span class="title">clsMap</span>: <span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">AnyClass</span>&gt;?,</div><div class="line">                             <span class="title">with</span> <span class="title">mapping</span>: <span class="title">Dictionary</span>&lt;<span class="title">String</span>, <span class="title">String</span>&gt;?,</div><div class="line">                             <span class="title">data</span> <span class="title">data</span>: <span class="title">JSON</span>?) &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> fullInfos = props, fullInfos.<span class="built_in">count</span> != <span class="number">0</span>, <span class="keyword">let</span> json = data <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">/// 将所有的Info取出来</span></div><div class="line">    <span class="keyword">for</span> (key, typeString) <span class="keyword">in</span> fullInfos &#123;</div><div class="line">      <span class="comment">/// 首先从Mapping中检测是否有对应的Mapper</span></div><div class="line">      <span class="keyword">let</span> <span class="type">JSONKey</span> = mapping?[key] ?? key</div><div class="line">      <span class="keyword">var</span> <span class="type">JSONValue</span> = json[<span class="type">JSONKey</span>]</div><div class="line">      <span class="keyword">if</span> <span class="type">JSONKey</span>.<span class="built_in">contains</span>(<span class="string">","</span>) &#123;</div><div class="line">        <span class="keyword">var</span> items: <span class="type">Array</span>&lt;<span class="type">String</span>&gt; = []</div><div class="line">        <span class="keyword">for</span> item <span class="keyword">in</span> <span class="type">JSONKey</span>.components(separatedBy: <span class="string">","</span>) &#123;</div><div class="line">          items.append(item.replacingOccurrences(of: <span class="string">" "</span>, with: <span class="string">""</span>))</div><div class="line">        &#125;</div><div class="line">        <span class="type">JSONValue</span> = json[items]</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">let</span> propType = <span class="type">PropertyType</span>(rawValue: typeString)</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> classMapping = clsMap, <span class="keyword">let</span> pointedClass = classMapping[key] &#123;</div><div class="line">        <span class="comment">// 该属性实现了类型Map</span></div><div class="line">        <span class="keyword">if</span> propType == .tClass &#123;</div><div class="line">          <span class="keyword">let</span> sweetObject = <span class="type">Convert</span>(<span class="type">JSON</span>: <span class="type">JSONValue</span>, to: pointedClass)</div><div class="line">          object.setValue(sweetObject, forKey: key)</div><div class="line">          <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> propType == .tNSArray &#123;</div><div class="line">          <span class="keyword">let</span> list: <span class="type">Array</span>&lt;<span class="type">JSON</span>&gt; = <span class="type">JSONValue</span>.arrayValue</div><div class="line">          <span class="keyword">var</span> objectArray: <span class="type">Array</span>&lt;<span class="type">AnyObject</span>&gt; = []</div><div class="line">          <span class="keyword">for</span> item <span class="keyword">in</span> list &#123;</div><div class="line">            <span class="keyword">guard</span> <span class="keyword">let</span> arrayObject = <span class="type">Convert</span>(<span class="type">JSON</span>: item, to: pointedClass) <span class="keyword">else</span> &#123;</div><div class="line">              <span class="keyword">continue</span></div><div class="line">            &#125;</div><div class="line">            objectArray.append(arrayObject)</div><div class="line">          &#125;</div><div class="line">          object.setValue(objectArray, forKey: key)</div><div class="line">          <span class="keyword">continue</span></div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">var</span> value: <span class="type">Any</span>? = <span class="type">JSONValue</span></div><div class="line">      <span class="keyword">if</span> propType == .tString &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.stringValue</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tInt || propType == .tInt8 || propType == .tInt16 || propType == .tInt32 ||</div><div class="line">         propType == .tUInt || propType == .tUInt8 || propType == .tUInt16 || propType == .tUInt32 &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.intValue</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tDouble &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.doubleValue</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tFloat &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.floatValue</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tBool &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.boolValue</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tNSArray &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.arrayObject</div><div class="line">      &#125;</div><div class="line">      <span class="keyword">if</span> propType == .tNSDictionary &#123;</div><div class="line">        value = <span class="type">JSONValue</span>.dictionaryObject</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      object.setValue(value, forKey: key)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 获得子类与父类叠加后的属性列表</span></div><div class="line">  <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">func</span> <span class="title">fullPropertyFor</span>(<span class="title">class</span> <span class="title">cls</span>: <span class="title">AnyClass</span>) -&gt;[<span class="title">String</span>: <span class="title">String</span>]? </span>&#123;</div><div class="line">    <span class="keyword">var</span> currentCls: <span class="type">AnyClass</span> = cls</div><div class="line">    <span class="keyword">var</span> infoDict = [<span class="type">String</span>: <span class="type">String</span>]()</div><div class="line">    </div><div class="line">    <span class="keyword">while</span> <span class="keyword">let</span> parent: <span class="type">AnyClass</span> = currentCls.superclass() &#123;</div><div class="line">      infoDict.merge(dict: propertyFor(<span class="class"><span class="keyword">class</span>: <span class="title">currentCls</span>))</span></div><div class="line">      <span class="title">currentCls</span> = <span class="title">parent</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="title">return</span> <span class="title">infoDict</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  /// 获取类的全部属性</div><div class="line">  <span class="title">public</span> <span class="title">class</span> <span class="title">func</span> <span class="title">propertyFor</span>(<span class="title">class</span> <span class="title">cls</span>: <span class="title">AnyClass</span>) -&gt;[<span class="title">String</span>: <span class="title">String</span>]? &#123;</div><div class="line">    <span class="keyword">var</span> <span class="built_in">count</span>: <span class="type">UInt32</span> = <span class="number">0</span></div><div class="line">    <span class="keyword">let</span> properties = class_copyPropertyList(cls, &amp;<span class="built_in">count</span>)</div><div class="line">    <span class="keyword">let</span> ignoredKeys = cls.ignoredKey() ?? []</div><div class="line">    </div><div class="line">    <span class="keyword">var</span> infoDict = [<span class="type">String</span>: <span class="type">String</span>]()</div><div class="line">    <span class="keyword">for</span> index <span class="keyword">in</span> <span class="number">0</span>..&lt;<span class="built_in">numericCast</span>(<span class="built_in">count</span>) &#123;</div><div class="line">      <span class="keyword">let</span> prop = properties?[<span class="type">Int</span>(index)]</div><div class="line">      </div><div class="line">      <span class="keyword">let</span> pname = <span class="type">String</span>(cString: property_getName(prop))</div><div class="line">      <span class="keyword">let</span> ptype = <span class="type">String</span>(cString: property_getAttributes(prop))</div><div class="line">      </div><div class="line">      <span class="keyword">var</span> propertyRealType: <span class="type">PropertyType</span></div><div class="line">      <span class="keyword">let</span> index = ptype.index(ptype.startIndex, offsetBy: <span class="number">2</span>)</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> <span class="keyword">let</span> type = <span class="type">PropertyType</span>.<span class="keyword">init</span>(rawValue: ptype.substring(to: index)) &#123;</div><div class="line">        propertyRealType = type</div><div class="line">      &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="keyword">if</span> ptype.hasPrefix(<span class="type">PropertyType</span>.tString.rawValue) &#123;</div><div class="line">          propertyRealType = <span class="type">PropertyType</span>.tString</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ptype.hasPrefix(<span class="type">PropertyType</span>.tNSArray.rawValue) &#123;</div><div class="line">          propertyRealType = <span class="type">PropertyType</span>.tNSArray</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ptype.hasPrefix(<span class="type">PropertyType</span>.tNSDictionary.rawValue) &#123;</div><div class="line">          propertyRealType = <span class="type">PropertyType</span>.tNSDictionary</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">else</span> <span class="keyword">if</span> ptype.hasPrefix(<span class="type">PropertyType</span>.tClass.rawValue) &#123;</div><div class="line">          propertyRealType = <span class="type">PropertyType</span>.tClass</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">          propertyRealType = <span class="type">PropertyType</span>.unknow</div><div class="line">        &#125;</div><div class="line">      &#125;</div><div class="line">      </div><div class="line">      <span class="keyword">if</span> !ignoredKeys.<span class="built_in">contains</span>(pname) &#123;</div><div class="line">        infoDict[pname] = propertyRealType.rawValue</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    free(properties)</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> infoDict.<span class="built_in">count</span> != <span class="number">0</span> <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> infoDict</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Dictionary</span> </span>&#123;</div><div class="line">  <span class="keyword">mutating</span> <span class="function"><span class="keyword">func</span> <span class="title">merge</span>&lt;K, V&gt;<span class="params">(dict: [K: V]?)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> d = dict, d != <span class="literal">nil</span>, d.<span class="built_in">count</span> != <span class="number">0</span> <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> (k, v) <span class="keyword">in</span> d &#123;</div><div class="line">      <span class="keyword">self</span>.updateValue(v <span class="keyword">as</span>! <span class="type">Value</span>, forKey: k <span class="keyword">as</span>! <span class="type">Key</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>测试代码（测试的类在上边给出了）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> json: <span class="type">JSON</span> =  [<span class="string">"name"</span>: <span class="string">"Jack"</span>,</div><div class="line">                       <span class="string">"ignored"</span>: <span class="string">"test ignored"</span>,</div><div class="line">                       <span class="string">"array"</span>:</div><div class="line">                        [</div><div class="line">                          <span class="string">"1"</span>, <span class="string">"2"</span>,</div><div class="line">                          <span class="string">"3"</span>, <span class="string">"4"</span></div><div class="line">                        ],</div><div class="line">                       <span class="string">"dictionary"</span>:</div><div class="line">                                  [</div><div class="line">                                    <span class="string">"2"</span>: <span class="literal">true</span>,</div><div class="line">                                    <span class="string">"options"</span>: <span class="number">666</span>,</div><div class="line">                                    <span class="string">"gender"</span>: <span class="literal">true</span></div><div class="line">                                  ],</div><div class="line">                       <span class="string">"student"</span>: [</div><div class="line">                                    <span class="string">"sname"</span>: <span class="string">"JACK"</span>,</div><div class="line">                                    <span class="string">"sage"</span>: <span class="number">10</span>,</div><div class="line">                                    <span class="string">"t"</span>: [</div><div class="line">                                      [<span class="string">"tname"</span>: <span class="string">"teacher1"</span>],</div><div class="line">                                      [<span class="string">"tname"</span>: <span class="string">"teacher2"</span>],</div><div class="line">                                      [<span class="string">"tname"</span>: <span class="string">"teacher3"</span>]</div><div class="line">                                    ]</div><div class="line">                                  ]</div><div class="line">                      ]</div><div class="line"><span class="keyword">let</span> object: <span class="type">Person</span> = <span class="type">ModelFactory</span>.<span class="type">Convert</span>(<span class="type">JSON</span>: json, to: <span class="type">Person</span>.<span class="keyword">self</span>) <span class="keyword">as</span>! <span class="type">Person</span></div><div class="line"><span class="comment">// 使用filter答应、、</span></div><div class="line"><span class="keyword">let</span> s = object.teachers.<span class="built_in">filter</span> &#123;</div><div class="line">  <span class="keyword">let</span> teacher: <span class="type">Teacher</span> = $<span class="number">0</span></div><div class="line">  <span class="built_in">print</span>(teacher.tname)</div><div class="line">  <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"><span class="comment">// 在32行之前加一个断点查看对象属性！</span></div><div class="line"><span class="type">ILog</span>(.debug, object)</div></pre></td></tr></table></figure>
<p>注：其实在实现Model提供Mapping的时候，期望还是使用Protocol的方式来做，但是不能解决static fun这个问题，static 代表着final class，所以会出现子类无法覆盖的问题。如果有解决方法还请告知，当然，这上边是我们自己手写的代码，在正真环境中，我还是选择了<code>YYModel</code>，前边仅是为了让大家了解一下转换代码。记得去掉SwiftJSON，等下我们的操作是<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>-&gt;YYModel-&gt;LKDBHelper，是不是很懒。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod '<span class="type">YYModel'</span></div></pre></td></tr></table></figure>
<p>明确目标2：</p>
<ul>
<li>模型-数据库中的操作（数据库的基本语法在这里不做介绍）</li>
</ul>
<p>说到模型-数据库中的操作，其实特别想把<code>LKDBHelper</code>拿来直接使用，这里比较懒，因为代码其实和上边差不多，多个数据库操作而已，所以不写了。LKDBHelper是一套OC的代码而且在Swift上测试没有问题。但是他的Demo是4个月前更新的，应该是Swift2.3版本，所以我们决定，fork一份代码并切转换到Swift3.0做测试，如果没问题，直接拿来用，以减少我们框架模块的编写时间。</p>
<p>好了，测试没有问题，并且提交了<a href="https://github.com/li6185377/LKDBHelper-SQLite-ORM/pull/83" target="_blank" rel="external">PR</a>。我们现在拉过来使用，作者目前还没有合并到master，大家可以先来<a href="https://github.com/WildDylan/LKDBHelper-SQLite-ORM" target="_blank" rel="external">我的仓库</a>查看使用的Demo。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'LKDBHelper'</span></div></pre></td></tr></table></figure>
<p>这样我们JSON-模型-数据库的代码基本完成了30%。剩下的都是后期的针对业务的修改。</p>
<h6 id="网络请求模块"><a href="#网络请求模块" class="headerlink" title="网络请求模块"></a>网络请求模块</h6><p>使用<a href="https://github.com/Alamofire/Alamofire" target="_blank" rel="external">Alamofire</a>，写到这里，读者肯定说我这个框架没有什么技术含量；要知道，这些库的成长经历了多少人的洗礼，而我只有3个人的小团队，创业公司的项目压力各位应该知道。所以合理的使用第三方库也是一个好的选择！如果你在一个大的团队，那么就可以为了晋升去写一点东西了。知道原理就好了，知道原理不写的原因是没有人家那么考虑的全面、构思的缜密。</p>
<p>新建文件<code>Request.swift</code>，Request对象作为在网络层流动的对象，Alamofire作为支撑。</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Alamofire'</span></div></pre></td></tr></table></figure>
<p>但是你真的以为我会这么做么？这么做太麻烦了，我很懒的。我们使用<code>Moya</code>+<code>Alamofire</code>。直接上使用流程：可以选择继承INSRequest来实现自己的Request类，也可以直接下一个枚举统一管理，但是Moya这里有个问题是：实现Moya的协议必须要实现所有的方法，该协议中所有的属性全部是required（而且让我不理解的是，sampleData这种非必须数据竟然不是<code>？</code>，已经提了一个issue提问，因为文档没有很明确），对其中的一些属性做解释：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'Moya'</span></div></pre></td></tr></table></figure>
<p>记得把<strong>开发环境</strong>调整到iOS 9.0</p>
<p>baseURL： 根地址</p>
<p>path：网络请求路径</p>
<p>method：网络请求方法</p>
<p>parameters： 参数</p>
<p>sampleData：默认的Response data</p>
<p>task：当前任务的形态，一般为request，还有upload和download</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="keyword">import</span> Moya</div><div class="line"></div><div class="line"><span class="comment">/// 在这里完成API的名称定义</span></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">MMAPI</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> launch</div><div class="line">  <span class="keyword">case</span> signin(mobilePhoneNumber: <span class="type">String</span>, password: <span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 在这里完成API所需信息补全</span></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">MMAPI</span>: <span class="title">TargetType</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> baseURL: <span class="type">URL</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">URL</span>(string: <span class="string">"http://leaf.leanapp.cn/api/"</span>)!</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> path: <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .launch:</div><div class="line">      <span class="keyword">return</span> <span class="string">"launch.json"</span></div><div class="line">    <span class="keyword">case</span> .signin:</div><div class="line">      <span class="keyword">return</span> <span class="string">"login"</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> method: <span class="type">Moya</span>.<span class="type">Method</span> &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .signin:</div><div class="line">      <span class="keyword">return</span> .<span class="type">POST</span></div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> .<span class="type">GET</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> parameters: [<span class="type">String</span>: <span class="type">Any</span>]? &#123;</div><div class="line">    <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">    <span class="keyword">case</span> .signin(<span class="keyword">let</span> number, <span class="keyword">let</span> password):</div><div class="line">      <span class="keyword">return</span> [<span class="string">"phone"</span>: number, <span class="string">"passwd"</span>: password]</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">var</span> sampleData: <span class="type">Data</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">Data</span>(base64Encoded: <span class="string">""</span>)!</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">var</span> task: <span class="type">Task</span> &#123;</div><div class="line">    <span class="keyword">return</span> .request</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在使用时候（顺便贴上<a href="https://github.com/Moya/Moya/blob/master/Demo/Demo/GitHubAPI.swift" target="_blank" rel="external">官方Demo</a>的地址）：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> provider = <span class="type">MoyaProvider</span>&lt;<span class="type">MMAPI</span>&gt;()</div><div class="line">provider.request(.launch) &#123; result <span class="keyword">in</span></div><div class="line">  <span class="keyword">switch</span> result &#123;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .success(response):</div><div class="line">      <span class="keyword">do</span> &#123;</div><div class="line">        <span class="keyword">if</span> <span class="keyword">let</span> json = <span class="keyword">try</span> response.mapJSON() <span class="keyword">as</span>? <span class="type">NSArray</span> &#123;</div><div class="line">          <span class="type">ILog</span>(.debug, <span class="string">"\(json) \n \(response.statusCode)"</span>)</div><div class="line">        &#125; <span class="keyword">else</span> &#123;&#125;</div><div class="line">        &#125; <span class="keyword">catch</span> &#123;&#125;</div><div class="line">    <span class="keyword">case</span> <span class="keyword">let</span> .failure(error):</div><div class="line">      <span class="type">ILog</span>(.debug, error.localizedDescription)</div><div class="line">    &#125;</div><div class="line">  &#125;</div></pre></td></tr></table></figure>
<p><img src="http://ocef2grmj.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-12%20%E4%B8%8B%E5%8D%881.25.29.png" alt=""></p>
<p>也是看到成功了，这个时候，我们把开始写的-&gt;Model-&gt;DB顺便测试一下：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> <span class="keyword">let</span> json = <span class="keyword">try</span> response.mapJSON() <span class="keyword">as</span>? <span class="type">NSDictionary</span> &#123;</div><div class="line">  <span class="comment">// 转换成对象</span></div><div class="line">  <span class="keyword">let</span> launchModel = <span class="type">LaunchModel</span>.yy_model(withJSON: json)</div><div class="line">  <span class="type">ILog</span>(.debug, <span class="string">"\(launchModel?.imageUri) \n \(response.statusCode)"</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 存储到数据库</span></div><div class="line">  <span class="type">ILog</span>(.debug, <span class="string">"Save to DB result \(launchModel?.saveToDB())"</span>)</div><div class="line">  </div><div class="line">  <span class="comment">// 查询</span></div><div class="line">  <span class="keyword">let</span> searchedObject = <span class="type">LaunchModel</span>.searchSingle(withWhere: <span class="literal">nil</span>, orderBy: <span class="literal">nil</span>) <span class="keyword">as</span>! <span class="type">LaunchModel</span></div><div class="line">  <span class="type">ILog</span>(.debug, <span class="string">"Searched result \(searchedObject.imageUri)"</span>)</div><div class="line">            </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">⚒[DEBUG] [ViewController.swift: viewDidLoad(): 33] </div><div class="line"> Save to DB result Optional(true)</div><div class="line"></div><div class="line">⚒[DEBUG] [ViewController.swift: viewDidLoad(): 36] </div><div class="line"> Searched result Optional(&quot;http://static.zhaogeshi.com&quot;)</div></pre></td></tr></table></figure>
<p>这里有一个坑大家注意： 在Swift上使用LKDB的时候，必须重写返回类名的方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LaunchModel</span>: <span class="title">Model</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> bizUri: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> domains: <span class="type">NSArray</span>?</div><div class="line">  <span class="keyword">var</span> hotFixJS: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> imageUri:<span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> learningURL: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> status: <span class="type">String</span>?</div><div class="line">  <span class="keyword">var</span> version: <span class="type">String</span>?</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getPrimaryKey</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"version"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="keyword">static</span> <span class="function"><span class="keyword">func</span> <span class="title">getTableName</span><span class="params">()</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"LaunchModel"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>否则，Swift这边读出的表名称会有问题，导致数据存储失败。</p>
<p>这样，借助第三方之手，我们美美的解决了领导给的2大块任务，数据模块与网络模块。依旧只能说，这2大功能模块只是提供了基础的功能，上层的封装还需要我们在接触业务的时候定制。所以这里只说，2大模块只完成了30%。</p>
<p>下一节开始写日志上报、异常捕获与处理、推送、位置、数据打点等。</p>
]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;为什么将数据模块与网络模块一起编写？紧密相关的2者，也是应用程序最常见的组合：请求数据-存储数据-展示数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;数据模块（JSON、Model、DB）&quot;&gt;&lt;a href=&quot;#数据模块（JSON、Model、DB）&quot; class=&quot;headerlink&quot; title=&quot;数据模块（JSON、Model、DB）&quot;&gt;&lt;/a&gt;数据模块（JSON、Model、DB）&lt;/h6&gt;&lt;p&gt;数据持久层其实有很多杂乱的选择，文件做为持久层的基础类型，又被分为sql、xml等等类型，我们可选的范围也很广阔，也可以自己动手来完善整个持久层模块，但这似乎对于很懒的程序员来说太浪费玩耍的时间了。所以我们索性在一些完善的开源库中挑选一类供我们做上层的封装。我们姑且确定选择FMDB作为我们的数据库支撑，但是联想到一般情况下，把JSON转换为Model直接存向数据库是常用需求，所以在数据模块这一层貌似扩展的很大了。我们首先引入&lt;a href=&quot;https://github.com/SwiftyJSON/SwiftyJSON&quot;&gt;SwiftyJSON&lt;/a&gt;作为JSON解析，不仅供框架使用也供外层使用，但是SwiftJSON解析后的数据仅是JSON对象，看来我们要亲自把JSON对象转换为Model了，写好之后，就是数据的存储。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift语法熟悉（二）</title>
    <link href="https://wilddylan.github.io/2016/10/11/Swift%E8%AF%AD%E6%B3%95%E7%86%9F%E6%82%89%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/11/Swift语法熟悉（二）/</id>
    <published>2016-10-11T03:49:34.000Z</published>
    <updated>2017-02-04T09:02:01.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="功能编写"><a href="#功能编写" class="headerlink" title="功能编写"></a>功能编写</h4><h6 id="环境管理-ModeSwitch"><a href="#环境管理-ModeSwitch" class="headerlink" title="环境管理 ModeSwitch"></a>环境管理 ModeSwitch</h6><p>新建<code>ModeSwitch.swift</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="comment">/// 开发模式</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Mode</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="comment">/// 开发模式，打印日志，不上报日志</span></div><div class="line">  <span class="keyword">case</span> develope = <span class="string">"[DEVELOPE MODE]"</span></div><div class="line">  <span class="comment">/// 调试模式，关闭日志打印，上报日志</span></div><div class="line">  <span class="keyword">case</span> prepared = <span class="string">"[PREPARED MODE]"</span></div><div class="line">  <span class="comment">/// 生产模式，关闭日志打印，上报日志</span></div><div class="line">  <span class="keyword">case</span> production = <span class="string">"[PRODUCTION MODE]"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 模式控制</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">INSModeSwitch</span> </span>&#123;</div><div class="line">  <span class="comment">/// 默认为调试模式</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">INSModeSwitch</span>(.develope)</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> currentMode: <span class="type">Mode</span> &#123;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  <span class="comment">/// 私有初始化方法</span></div><div class="line">  <span class="keyword">private</span> <span class="keyword">init</span>(<span class="number">_</span> mode: <span class="type">Mode</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.currentMode = mode</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 模式选择器</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> <span class="type">ModeSwitcher</span> = <span class="type">INSModeSwitch</span>.<span class="keyword">default</span></div></pre></td></tr></table></figure>
<p>目前这是一个极其简单的模式控制，毫无别的作用，以后扩展功能</p>
<a id="more"></a>
<h6 id="日志模块-基础日志-Console"><a href="#日志模块-基础日志-Console" class="headerlink" title="日志模块-基础日志 Console"></a>日志模块-基础日志 Console</h6><p>第一步我们先完成日志输出，新建<code>Logger.swift</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="comment">/// 日志级别</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">LogLevel</span>: <span class="title">String</span> </span>&#123;</div><div class="line">  <span class="comment">/// 打印所有类型日志</span></div><div class="line">  <span class="keyword">case</span> all = <span class="string">"🛢[ALL]"</span></div><div class="line">  <span class="comment">/// 仅打印调试日志</span></div><div class="line">  <span class="keyword">case</span> debug = <span class="string">"⚒[DEBUG]"</span></div><div class="line">  <span class="comment">/// 仅打印警告日志</span></div><div class="line">  <span class="keyword">case</span> warning = <span class="string">"❗️[WARN]"</span></div><div class="line">  <span class="comment">/// 仅打印信息日志</span></div><div class="line">  <span class="keyword">case</span> information = <span class="string">"📢[INFO]"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">INSLogger</span> </span>&#123;</div><div class="line">  <span class="comment">/// 默认为输出全部日志</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">INSLogger</span>(.all)</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> level: <span class="type">LogLevel</span> &#123;</div><div class="line">    <span class="keyword">didSet</span> &#123;</div><div class="line">      </div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 日志输出</span></div><div class="line">  <span class="comment">///</span></div><div class="line">  <span class="comment">/// - parameter lev: 日志级别</span></div><div class="line">  <span class="comment">/// - parameter content: 日志内容</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">printLog</span><span class="params">(<span class="number">_</span> lev: LogLevel, <span class="number">_</span> details: String, <span class="number">_</span> items: Any)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> level == .all || level == lev, <span class="type">ModeSwitcher</span>.currentMode == .develope <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="built_in">print</span>(lev.rawValue, details, <span class="string">"\n"</span>, items)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">init</span>(<span class="number">_</span> level: <span class="type">LogLevel</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.level = level</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 公开日志打印模块</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> <span class="type">Logger</span> = <span class="type">INSLogger</span>.<span class="keyword">default</span></div><div class="line"><span class="comment">/// 公开便捷调用方法</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">ILog</span><span class="params">(<span class="number">_</span> lev: LogLevel, <span class="number">_</span> items: Any, <span class="number">_</span> function: StaticString = #function, <span class="number">_</span> line: Int = #line, <span class="number">_</span> file: StaticString = #file)</span></span> &#123;</div><div class="line">  <span class="keyword">var</span> details = <span class="string">"[\("</span>\(file)<span class="string">".components(separatedBy: "</span>/<span class="string">").last!): \(function): \(line)]"</span></div><div class="line">  <span class="type">Logger</span>.printLog(lev, details, items)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候，我们对前2部分进行简单的测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="type">ModeSwitcher</span>.currentMode = .develope</div><div class="line"><span class="built_in">print</span>(<span class="type">ModeSwitcher</span>.currentMode)</div><div class="line">    </div><div class="line"><span class="type">Logger</span>.level = .warning</div><div class="line">    </div><div class="line"><span class="type">ILog</span>(.all, <span class="string">"Hello world! Current Mode is \(Logger.level)"</span>)</div><div class="line"><span class="type">ILog</span>(.debug, <span class="string">"Hello world! Current Mode is \(Logger.level)"</span>)</div><div class="line"><span class="type">ILog</span>(.warning, <span class="string">"Hello world! Current Mode is \(Logger.level)"</span>)</div><div class="line"><span class="type">ILog</span>(.information, <span class="string">"Hello world! Current Mode is \(Logger.level)"</span>)</div></pre></td></tr></table></figure>
<p><code>.developer</code>情况下会输出相应的日志，<code>.all</code>为输出所有日志，预发、生产模式下不会输出日志。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">🛢 [<span class="type">WARN</span>] [<span class="type">ViewController</span>.swift: viewDidLoad(): <span class="number">24</span>] </div><div class="line"> [<span class="string">"2"</span>: <span class="string">"3"</span>, <span class="string">"4"</span>: <span class="string">"5"</span>]</div></pre></td></tr></table></figure>
<p>分别为文件，方法，行号，内容。</p>
<h6 id="功能扩展，界面扩展"><a href="#功能扩展，界面扩展" class="headerlink" title="功能扩展，界面扩展"></a>功能扩展，界面扩展</h6><p>一些<code>Foundation</code>，<code>UIKit</code>的扩展。新建2个文件夹，分别为FoundationExtension，UIKitExtension。在文件夹内添加这些扩展方法。这一块内容暂时省略，接着往下写功能模块。</p>
<p>UISDK这里我依旧支持<code>AsyncDisplayKit</code>，从这个库诞生我就开始一直使用，所以对于我来说，用这个比UIKit顺手：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">"AsyncDisplayKit"</span></div></pre></td></tr></table></figure>
<p>Foundation扩展先添加Keychain的帮助模块</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'KeychainAccess'</span></div></pre></td></tr></table></figure>
<h6 id="权限服务"><a href="#权限服务" class="headerlink" title="权限服务"></a>权限服务</h6><p>权限服务：获得一些系统的权限，新建<code>Permission.swift</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="keyword">import</span> CoreBluetooth</div><div class="line"><span class="keyword">import</span> AddressBook;</div><div class="line"><span class="keyword">import</span> AVFoundation;</div><div class="line"><span class="keyword">import</span> CoreBluetooth;</div><div class="line"><span class="keyword">import</span> CoreLocation;</div><div class="line"><span class="keyword">import</span> CoreMotion;</div><div class="line"><span class="keyword">import</span> EventKit;</div><div class="line"><span class="keyword">import</span> Photos</div><div class="line"></div><div class="line"><span class="comment">/// 当前的状态</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">kPermissionAccess</span> </span>&#123;</div><div class="line">  <span class="comment">/// 用户拒绝</span></div><div class="line">  <span class="keyword">case</span> denied</div><div class="line">  <span class="comment">/// 用户同意</span></div><div class="line">  <span class="keyword">case</span> granted</div><div class="line">  <span class="comment">/// 系统设置拉黑等错误</span></div><div class="line">  <span class="keyword">case</span> restricted</div><div class="line">  <span class="comment">/// 未知错误</span></div><div class="line">  <span class="keyword">case</span> unknown</div><div class="line">  <span class="comment">/// 设备不支持</span></div><div class="line">  <span class="keyword">case</span> unsupported</div><div class="line">  <span class="comment">/// 开发者没有导入相应的库</span></div><div class="line">  <span class="keyword">case</span> missingFramework</div><div class="line">  <span class="comment">/// 用户没选</span></div><div class="line">  <span class="keyword">case</span> notDetermined</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToBluetoothLE</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  <span class="keyword">switch</span> <span class="type">CBCentralManager</span>().state &#123;</div><div class="line">    <span class="keyword">case</span> .unsupported:</div><div class="line">    <span class="keyword">return</span> .unsupported;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">case</span> .unauthorized:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">    <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToCalendar</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  </div><div class="line">  <span class="keyword">switch</span> <span class="type">EKEventStore</span>.authorizationStatus(<span class="keyword">for</span>: .event) &#123;</div><div class="line">  <span class="keyword">case</span> .authorized:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .denied:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .restricted:</div><div class="line">    <span class="keyword">return</span> .restricted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .notDetermined:</div><div class="line">    <span class="keyword">return</span> .notDetermined;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .unknown;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToContacts</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  <span class="keyword">switch</span> (<span class="type">ABAddressBookGetAuthorizationStatus</span>()) &#123;</div><div class="line">  <span class="keyword">case</span> .authorized:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .denied:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .restricted:</div><div class="line">    <span class="keyword">return</span> .restricted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .notDetermined:</div><div class="line">    <span class="keyword">return</span> .notDetermined;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .unknown;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToLocation</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  <span class="keyword">switch</span> <span class="type">CLLocationManager</span>.authorizationStatus() &#123;</div><div class="line">  <span class="keyword">case</span> .authorizedAlways:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .authorizedWhenInUse:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .denied:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .restricted:</div><div class="line">    <span class="keyword">return</span> .restricted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .notDetermined:</div><div class="line">    <span class="keyword">return</span> .notDetermined;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .unknown;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToPhotos</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  </div><div class="line">  <span class="keyword">switch</span> <span class="type">PHPhotoLibrary</span>.authorizationStatus() &#123;</div><div class="line">  <span class="keyword">case</span> .authorized:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .denied:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .restricted:</div><div class="line">    <span class="keyword">return</span> .restricted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .notDetermined:</div><div class="line">    <span class="keyword">return</span> .notDetermined;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .unknown;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">hasAccessToReminders</span><span class="params">()</span></span> -&gt;kPermissionAccess &#123;</div><div class="line">  <span class="keyword">switch</span> <span class="type">EKEventStore</span>.authorizationStatus(<span class="keyword">for</span>: .reminder) &#123;</div><div class="line">  <span class="keyword">case</span> .authorized:</div><div class="line">    <span class="keyword">return</span> .granted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .denied:</div><div class="line">    <span class="keyword">return</span> .denied;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .restricted:</div><div class="line">    <span class="keyword">return</span> .restricted;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">case</span> .notDetermined:</div><div class="line">    <span class="keyword">return</span> .notDetermined;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">    </div><div class="line">  <span class="keyword">default</span>:</div><div class="line">    <span class="keyword">return</span> .unknown;</div><div class="line">    <span class="keyword">break</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> requestAccessHandler = (<span class="type">Bool</span>?, <span class="type">Any</span>?) -&gt;()</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToCalendarWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="type">EKEventStore</span>().requestAccess(to: .event) &#123;</div><div class="line">    handler($<span class="number">0</span>, $<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToContactsWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> addressBook = <span class="type">ABAddressBookCreateWithOptions</span>(<span class="literal">nil</span>, <span class="literal">nil</span>) &#123;</div><div class="line">    <span class="type">ABAddressBookRequestAccessWithCompletion</span>(addressBook <span class="keyword">as</span> <span class="type">ABAddressBook</span>!) &#123;</div><div class="line">      handler($<span class="number">0</span>, $<span class="number">1</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToMicrophoneWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> session = <span class="type">AVAudioSession</span>.sharedInstance()</div><div class="line">  session.requestRecordPermission &#123;</div><div class="line">    handler($<span class="number">0</span>, <span class="literal">nil</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToPhotosWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="type">PHPhotoLibrary</span>.requestAuthorization &#123;</div><div class="line">    <span class="keyword">if</span> $<span class="number">0</span> == .authorized &#123;</div><div class="line">      handler(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      handler(<span class="literal">false</span>, <span class="literal">nil</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToRemindersWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="type">EKEventStore</span>().requestAccess(to: .reminder) &#123;</div><div class="line">    handler($<span class="number">0</span>, $<span class="number">1</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 获取位置访问权限</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - parameter whenInUse: 如果为False，则请求总是需要的权限</span></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToLocationWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler, <span class="number">_</span> whenInUse: Bool = <span class="literal">true</span>)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> locationManager = <span class="type">CLLocationManager</span>()</div><div class="line">  <span class="keyword">if</span> whenInUse, <span class="keyword">let</span> content = <span class="type">Bundle</span>.main.object(forInfoDictionaryKey: <span class="string">"NSLocationWhenInUseUsageDescription"</span>) &#123;</div><div class="line">    locationManager.requestWhenInUseAuthorization()</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    locationManager.requestAlwaysAuthorization()</div><div class="line">  &#125;</div><div class="line">  handler(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">requestAccessToMotionWithSuccess</span><span class="params">(<span class="number">_</span> handler: @escaping requestAccessHandler)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> motionManager = <span class="type">CMMotionActivityManager</span>()</div><div class="line">  <span class="keyword">let</span> motionQueue = <span class="type">OperationQueue</span>()</div><div class="line">  motionManager.startActivityUpdates(to: motionQueue) &#123;<span class="number">_</span> <span class="keyword">in</span> </div><div class="line">    handler(<span class="literal">true</span>, <span class="literal">nil</span>)</div><div class="line">    motionManager.stopActivityUpdates()</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>可是你们忘记了，我很懒，所以这段代码不需要了，直接：</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">'PermissionScope'</span></div></pre></td></tr></table></figure>
<p>来嗨吧！</p>
<p><img src="https://camo.githubusercontent.com/b3aadf6f7486413749922757a42d863132f836d6/687474703a2f2f726171756f2e6e65742f696d616765732f7065726d697373696f6e73636f70652e676966" alt=""></p>
<h6 id="组件处理（核心模块）"><a href="#组件处理（核心模块）" class="headerlink" title="组件处理（核心模块）"></a>组件处理（核心模块）</h6><p>要解决的问题暂时有：</p>
<ol>
<li>如何成为组件（实现协议与方法即可）</li>
<li>如何启动组件（调用组件必须实现的启动方法）</li>
<li>组件之间如何数据传输（实现Router模拟HTTP请求数据传递）</li>
<li>组件之间如何做界面跳转（利用上述Router模拟OpenURL方式调起）</li>
<li>组件服务如何停止（调用协议实现的方法并从组件管理中心移除注册）</li>
</ol>
<p>规则1：只有已经注册了的组件才可以成为Router的操作对象，想成为组件则必须有单独类实现组件协议。</p>
<p>规则2：Router仅负责数据传递与获取视图实例（可传值，后者拥有前者的弱引用）</p>
<p>规则3：仅在每个模块的组件中心的代理方法中注册相应的URL供被调用</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"><span class="comment">/// 数据流</span></div><div class="line"><span class="keyword">public</span> <span class="keyword">typealias</span> <span class="type">INSDataFlowHandler</span> = (<span class="type">Any</span>...) -&gt;<span class="type">Any</span></div><div class="line"><span class="comment">/// 错误的Scheme</span></div><div class="line">fileprivate <span class="keyword">let</span> <span class="type">INSDataUnknowedScheme</span> = <span class="string">"INSDataUnknowedScheme_Key"</span></div><div class="line"></div><div class="line"><span class="comment">/// 插件协议</span></div><div class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">INSPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> pluginLoaded: <span class="type">Bool</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">  <span class="comment">/// 插件唯一标识</span></div><div class="line">  <span class="comment">/// - returns: 插件标识，用来获取插件</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">pluginScheme</span><span class="params">()</span></span> -&gt;<span class="type">String</span>!</div><div class="line">  </div><div class="line">  <span class="comment">// MARK: - Mappings</span></div><div class="line">  </div><div class="line">  <span class="comment">/// 视图控制器Map</span></div><div class="line">  <span class="comment">/// - returns: 视图控制器的对应字典</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">classMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">AnyClass</span>&gt;?</div><div class="line">  <span class="comment">/// 数据流Map</span></div><div class="line">  <span class="comment">/// - returns: 数据流字典</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">dataflowMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">INSDataFlowHandler</span>&gt;?</div><div class="line">  </div><div class="line">  <span class="comment">// MARK: - Plugin status</span></div><div class="line">  </div><div class="line">  <span class="comment">/// 当插件注册成功的时候会调用这个方法</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">serviceStarted</span><span class="params">()</span></span></div><div class="line">  <span class="comment">/// 当插件取消注册的时候会调用这个方法</span></div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">serviceStopped</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">INSPlugin</span> </span>&#123;</div><div class="line">  <span class="comment">/// 插件加载状态</span></div><div class="line">  <span class="keyword">public</span> <span class="keyword">var</span> pluginLoaded: <span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">return</span> (<span class="type">ModuleCenter</span>.getPlugin(<span class="keyword">for</span>: pluginScheme()) != <span class="literal">nil</span>)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 插件基类，成为模块插件管理器则必须继承该类，并实现方法</span></div><div class="line">open <span class="class"><span class="keyword">class</span> <span class="title">Plugin</span>: <span class="title">INSPlugin</span> </span>&#123;</div><div class="line">  <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">registePlugin</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">ModuleCenter</span>.registePlugin(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">final</span> <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">deRegistePlugin</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">ModuleCenter</span>.deRegistePlugin(<span class="keyword">self</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">pluginScheme</span><span class="params">()</span></span> -&gt; <span class="type">String</span>! &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">serviceStopped</span><span class="params">()</span></span> &#123;&#125;</div><div class="line">  </div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">serviceStarted</span><span class="params">()</span></span> &#123;&#125;</div><div class="line"></div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">dataflowMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">INSDataFlowHandler</span>&gt;? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line"></div><div class="line">  open <span class="function"><span class="keyword">func</span> <span class="title">classMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">AnyClass</span>&gt;? &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">public</span> <span class="keyword">init</span>() &#123;</div><div class="line">    <span class="comment">// I'm a plug-in manager 🏵</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/// 插件控制中心</span></div><div class="line"><span class="keyword">final</span> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ModuleManager</span>: <span class="title">NSObject</span> </span>&#123;</div><div class="line">  <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">ModuleManager</span>()</div><div class="line">  <span class="comment">/// 已经加载的插件</span></div><div class="line">  <span class="keyword">private</span>(<span class="keyword">set</span>) <span class="keyword">var</span> loadedPlugins: <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">Plugin</span>&gt; = [:]</div><div class="line">  </div><div class="line">  <span class="comment">/// 注册新的插件</span></div><div class="line">  @discardableResult</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">registePlugin</span><span class="params">(<span class="number">_</span> item: Plugin)</span></span> -&gt;<span class="type">Bool</span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> scheme = item.pluginScheme(), loadedPlugins[scheme] == <span class="literal">nil</span> <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span> <span class="literal">false</span></div><div class="line">    &#125;</div><div class="line">    loadedPlugins[scheme] = item</div><div class="line">    <span class="comment">/// 注册组件</span></div><div class="line">    item.serviceStarted()</div><div class="line">    <span class="keyword">return</span> <span class="literal">true</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 取消注册插件</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">deRegistePlugin</span><span class="params">(<span class="number">_</span> item: Plugin)</span></span> &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> scheme = item.pluginScheme() <span class="keyword">else</span> &#123;</div><div class="line">      <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">    loadedPlugins.removeValue(forKey: scheme)</div><div class="line">    <span class="comment">/// 移除组件</span></div><div class="line">    item.serviceStopped()</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 根据唯一标识获取插件</span></div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">getPlugin</span><span class="params">(<span class="keyword">for</span> scheme: String)</span></span> -&gt;<span class="type">Plugin</span>? &#123;</div><div class="line">    <span class="keyword">return</span> loadedPlugins[scheme]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 数据流</span></div><div class="line">  @discardableResult</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">send</span><span class="params">(to url: String, and param: Any...)</span></span> -&gt;<span class="type">Any</span>? &#123;</div><div class="line">    <span class="keyword">let</span> (scheme, host) = validateURL(url)</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> pluginItem = getPlugin(<span class="keyword">for</span>: scheme!), <span class="keyword">let</span> dataMapping = pluginItem.dataflowMapping() <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">ILog</span>(.warning, <span class="string">"找不到scheme对应的插件或插件没有dataMapping!"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> sendHandler = dataMapping[host!] <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">ILog</span>(.warning, <span class="string">"该路径没有对应的Handler"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> sendHandler(param)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="comment">/// 视图流</span></div><div class="line">  @discardableResult</div><div class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> `<span class="title">class</span>`<span class="params">(<span class="keyword">for</span> url: String)</span></span> -&gt;<span class="type">AnyClass</span>? &#123;</div><div class="line">    <span class="keyword">let</span> (scheme, host) = validateURL(url)</div><div class="line">    </div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> pluginItem = getPlugin(<span class="keyword">for</span>: scheme!), <span class="keyword">let</span> dataMapping = pluginItem.classMapping() <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">ILog</span>(.warning, <span class="string">"找不到scheme对应的插件或插件没有classMapping!"</span>)</div><div class="line">      <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">return</span> dataMapping[host!]</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  @discardableResult</div><div class="line">  <span class="keyword">private</span> <span class="function"><span class="keyword">func</span> <span class="title">validateURL</span><span class="params">(<span class="number">_</span> url:String)</span></span> -&gt;(<span class="type">String</span>?, <span class="type">String</span>?) &#123;</div><div class="line">    <span class="keyword">guard</span> <span class="keyword">let</span> <span class="type">URLObject</span> = <span class="type">URL</span>(string: url), <span class="keyword">let</span> scheme = <span class="type">URLObject</span>.scheme <span class="keyword">else</span> &#123;</div><div class="line">      <span class="type">ILog</span>(.warning, <span class="string">"输入的url不能转换为URL对象或URL对象没有Scheme!"</span>)</div><div class="line">      <span class="keyword">return</span> (<span class="type">INSDataUnknowedScheme</span>, <span class="string">""</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> (scheme, <span class="type">URLObject</span>.host)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">private</span> <span class="keyword">override</span> <span class="keyword">init</span>() &#123;</div><div class="line">    <span class="comment">// I'm a module manager 🏵</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">public</span> <span class="keyword">let</span> <span class="type">ModuleCenter</span> = <span class="type">ModuleManager</span>.<span class="keyword">default</span></div></pre></td></tr></table></figure>
<p>接下来，我们实现一个小的插件继承自Plugin并实现一些代理方法：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> UIKit</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">NetworkPlugin</span>: <span class="title">Plugin</span> </span>&#123;</div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">serviceStarted</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">ILog</span>(.debug, <span class="string">"Network service started"</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">serviceStopped</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="type">ILog</span>(.debug, <span class="string">"Network service stopped"</span>)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">pluginScheme</span><span class="params">()</span></span> -&gt; <span class="type">String</span>! &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"Network"</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">dataflowMapping</span><span class="params">()</span></span> -&gt;<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">INSDataFlowHandler</span>&gt;? &#123;</div><div class="line">    <span class="keyword">let</span> mapping: [<span class="type">String</span>: <span class="type">INSDataFlowHandler</span>] = [</div><div class="line">      <span class="string">"getData"</span>: &#123;</div><div class="line">        <span class="type">ILog</span>(.warning, <span class="string">"receive call \($0)"</span>)</div><div class="line">        <span class="keyword">return</span> <span class="string">"Custom data"</span></div><div class="line">      &#125;,</div><div class="line">      <span class="string">"supportMethod"</span>: &#123;</div><div class="line">        <span class="type">ILog</span>(.warning, <span class="string">"receive call \($0)"</span>)</div><div class="line">        <span class="keyword">return</span> [</div><div class="line">          <span class="string">"GET"</span>,</div><div class="line">          <span class="string">"POST"</span>,</div><div class="line">          <span class="string">"PUT"</span>,</div><div class="line">          <span class="string">"DELETE"</span></div><div class="line">          ]</div><div class="line">      &#125;</div><div class="line">    ]</div><div class="line">    <span class="keyword">return</span> mapping</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">classMapping</span><span class="params">()</span></span> -&gt; <span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">AnyClass</span>&gt;? &#123;</div><div class="line">    <span class="keyword">let</span> mapping: [<span class="type">String</span>: <span class="type">AnyClass</span>] = [</div><div class="line">      <span class="string">"vc1"</span>: <span class="type">UIViewController</span>.<span class="keyword">self</span>,</div><div class="line">      <span class="string">"vc2"</span>: <span class="type">NSObject</span>.<span class="keyword">self</span></div><div class="line">    ]</div><div class="line">    <span class="keyword">return</span> mapping</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">static</span> <span class="keyword">let</span> `<span class="keyword">default</span>` = <span class="type">NetworkPlugin</span>()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后在ViewController.swift中测试：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="type">ModeSwitcher</span>.currentMode = .develope</div><div class="line"><span class="type">Logger</span>.level = .all</div><div class="line">    </div><div class="line"><span class="keyword">let</span> sharedNetwork = <span class="type">NetworkPlugin</span>.<span class="keyword">default</span></div><div class="line">sharedNetwork.registePlugin()</div><div class="line">    </div><div class="line"><span class="type">ILog</span>(.information, <span class="type">ModuleCenter</span>.send(to: <span class="string">"Network://getData"</span>, and: <span class="string">"Hello World"</span>))</div><div class="line"><span class="type">ILog</span>(.information, <span class="type">ModuleCenter</span>.send(to: <span class="string">"Network://supportMethod"</span>, and: <span class="string">"Hello World"</span>, <span class="string">"Hello real world!"</span>, [<span class="string">"a"</span>: <span class="string">"b"</span>]))</div><div class="line"><span class="type">ILog</span>(.information, <span class="type">ModuleCenter</span>.<span class="keyword">class</span>(<span class="keyword">for</span>: <span class="string">"Network://vc1"</span>))</div><div class="line"><span class="type">ILog</span>(.information, <span class="type">ModuleCenter</span>.<span class="keyword">class</span>(<span class="keyword">for</span>: <span class="string">"Network://vc2"</span>))</div><div class="line">    </div><div class="line">sharedNetwork.deRegistePlugin()</div></pre></td></tr></table></figure>
<p>看到输出为：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-11%20%E4%B8%8A%E5%8D%8811.45.15.png" alt=""></p>
<p>说明功能已经基本的完成了。这里并没有将打开界面写入到当前模块，还是感觉直接获取类好一点，所以直接把OpenURL的方式改成了获取类型，然后由使用者自己去创建对象分情况使用，这样自定义的程度也高一点。 如果写为OpenURL的方式，那我们又要分很多种了，push还是present，是否需要导航，考虑到仅获取不使用的情况，要写控制器基类，还有必要统一一个初始化方法供使用。但是这些似乎已经不是一个框架应该做的事情了（仅鉴于我对Swift框架的理解，框架不干涉业务，框架不干涉UI）。</p>
<p>文章篇幅过长并且均为代码，所以本文只写到这里。</p>
<p>下篇文章会开始编写数据模块、网络模块。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;功能编写&quot;&gt;&lt;a href=&quot;#功能编写&quot; class=&quot;headerlink&quot; title=&quot;功能编写&quot;&gt;&lt;/a&gt;功能编写&lt;/h4&gt;&lt;h6 id=&quot;环境管理-ModeSwitch&quot;&gt;&lt;a href=&quot;#环境管理-ModeSwitch&quot; class=&quot;headerlink&quot; title=&quot;环境管理 ModeSwitch&quot;&gt;&lt;/a&gt;环境管理 ModeSwitch&lt;/h6&gt;&lt;p&gt;新建&lt;code&gt;ModeSwitch.swift&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight swift&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Foundation&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 开发模式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Mode&lt;/span&gt;: &lt;span class=&quot;title&quot;&gt;String&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 开发模式，打印日志，不上报日志&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; develope = &lt;span class=&quot;string&quot;&gt;&quot;[DEVELOPE MODE]&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 调试模式，关闭日志打印，上报日志&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; prepared = &lt;span class=&quot;string&quot;&gt;&quot;[PREPARED MODE]&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 生产模式，关闭日志打印，上报日志&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;case&lt;/span&gt; production = &lt;span class=&quot;string&quot;&gt;&quot;[PRODUCTION MODE]&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 模式控制&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;INSModeSwitch&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 默认为调试模式&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; `&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;` = &lt;span class=&quot;type&quot;&gt;INSModeSwitch&lt;/span&gt;(.develope)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; currentMode: &lt;span class=&quot;type&quot;&gt;Mode&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;didSet&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;/// 私有初始化方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;init&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;_&lt;/span&gt; mode: &lt;span class=&quot;type&quot;&gt;Mode&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;self&lt;/span&gt;.currentMode = mode&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/// 模式选择器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; &lt;span class=&quot;type&quot;&gt;ModeSwitcher&lt;/span&gt; = &lt;span class=&quot;type&quot;&gt;INSModeSwitch&lt;/span&gt;.&lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;目前这是一个极其简单的模式控制，毫无别的作用，以后扩展功能&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Swift语法熟悉（一）</title>
    <link href="https://wilddylan.github.io/2016/10/09/Swift%E8%AF%AD%E6%B3%95%E7%86%9F%E6%82%89%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://wilddylan.github.io/2016/10/09/Swift语法熟悉（一）/</id>
    <published>2016-10-09T10:56:43.000Z</published>
    <updated>2017-02-04T09:01:47.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="知识储备"><a href="#知识储备" class="headerlink" title="知识储备"></a>知识储备</h4><p>就像从零搭建OC项目<code>Service</code>支撑一样，要在一定量知识储备的情况下才可以让框架质量得到保证。 <code>Service</code>：项目支撑服务。每个公司的项目都会依赖一定量的组件，每一个组件作为项目的独立模块提供本身的功能供使用。一般来讲，大公司的项目均为组件化项目，一方面为了方便安排开发，另一方面方面集成管理与扩展。小公司的项目则是依赖某一个私有库作为项目的支撑。建议每一个项目都按照组件化项目的思想来从零构造，便于以后核心服务代码抽出进行组件化拆分。</p>
<h6 id="Swift知识储备与框架需求"><a href="#Swift知识储备与框架需求" class="headerlink" title="Swift知识储备与框架需求"></a>Swift知识储备与框架需求</h6><p>知识储备即熟悉Swift编码思想，基础知识，进阶知识与细节知识，这里不做赘述。编码能力不能做衡量，即便知识储备不够，也可以慢慢的学习。给出的建议是：多阅读源码，不是大型开源项目的源码，而是小而精的功能性项目源码。</p>
<a id="more"></a>
<p>框架需求：按照开发步骤</p>
<ul>
<li>[ ] 环境管理 ModeSwitch</li>
</ul>
<p>控制当前环境，开发，预发，正式</p>
<ul>
<li>[ ] 日志模块-基础日志 Console </li>
</ul>
<p>完成基础日志模块，日志打印即可</p>
<ul>
<li>[ ] 功能扩展 Foundation</li>
</ul>
<p>Foundation常用的扩展</p>
<ul>
<li>[ ] 界面扩展 UIKit</li>
</ul>
<p>UIKit常用的扩展</p>
<ul>
<li>[ ] 权限服务 Permission</li>
</ul>
<p>获得应用程序权限</p>
<ul>
<li>[ ] 组件处理/链接模块 Plug-in</li>
</ul>
<p>组件化方案，组件加载，组件衔接（Router）</p>
<ul>
<li>[ ] 数据模块 DataBase</li>
</ul>
<p>数据持久层，暂定使用数据库</p>
<ul>
<li>[ ] 网络模块 Network</li>
</ul>
<p>网络层，网络请求，缓存控制，图片缓存等</p>
<ul>
<li>[ ] 日志模块-日志上报 Console </li>
</ul>
<p>完成日志上报功能（一般为奔溃上报）</p>
<ul>
<li>[ ] 推送服务 Push</li>
</ul>
<p>远程推送与本地推送服务</p>
<ul>
<li>[ ] 位置服务 Location</li>
</ul>
<p>位置获取服务</p>
<ul>
<li>[ ] 数据收集服务 Monitor</li>
</ul>
<p>数据打点与用户信息上报等</p>
<h4 id="规范、知识-（仅了解基础的开发者阅读-lt-知识回顾-gt-）"><a href="#规范、知识-（仅了解基础的开发者阅读-lt-知识回顾-gt-）" class="headerlink" title="规范、知识 （仅了解基础的开发者阅读&lt;知识回顾&gt;）"></a>规范、知识 （仅了解基础的开发者阅读&lt;知识回顾&gt;）</h4><p>别急着入手写代码，先制定一系列的规范，了解一些知识。</p>
<h6 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h6><p>Swift版本：3.0</p>
<p>Xcode版本：8.0+</p>
<p>支撑版本：iOS 8.0+</p>
<p>缩进： 2</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/TabWith2" alt=""></p>
<p>单例写法与命名规范：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/sharedinstance" alt=""></p>
<p> 闭包预定义：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/%E5%B1%8F%E5%B9%95%E5%BF%AB%E7%85%A7%202016-10-09%20%E4%B8%8B%E5%8D%881.34.36.png" alt=""></p>
<p>函数参数与规范：</p>
<p>使用 <code>_</code>来忽略参数描述，使用<code>@discardableResult</code>来标记该函数可以忽略返回值，尽量不要使用关键字。尽量避免函数复杂程度（不要写内部函数等）。命名明确，可选参数要写默认值。</p>
<p>注释规范：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// MARK: Initializing</span></div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/// Returns a matched view controller from a specified URL.</span></div><div class="line"><span class="comment">///</span></div><div class="line"><span class="comment">/// - parameter url: The URL to find view controllers.</span></div><div class="line"><span class="comment">/// - returns: A match view controller or `nil` if not matched.</span></div></pre></td></tr></table></figure>
<p>MARK、TODO等使用<code>//</code>开头，默认注释使用<code>///</code>开头。</p>
<blockquote>
<p>好的规范可以提高代码的可读性与统一性</p>
</blockquote>
<p>上边只是一些简单的规范。还有很多好的建议，我们慢慢聊。</p>
<h6 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h6><ol>
<li>空值合并</li>
</ol>
<p><code>a ?? b</code> 中的 <code>??</code> 就是是空值合并运算符，会对 <code>a</code> 进行判断，如果不为 <code>nil</code> 则解包，否则就返回 <code>b</code> 。使用的时候有以下两点要求：</p>
<ul>
<li>a 必须是 optional 的</li>
<li>b 必须和 a 类型一致</li>
</ul>
<p>当然如果你觉得这样可读性不高，我们可以自定义运算符来实现</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">infix</span> <span class="keyword">operator</span> |-&gt;| &#123;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> |-&gt;|&lt;T&gt; <span class="params">(<span class="keyword">left</span>: T?, <span class="keyword">right</span>: T)</span></span> -&gt;<span class="type">T</span> &#123;</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> l = <span class="keyword">left</span> &#123;</div><div class="line">    <span class="keyword">return</span> l</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">right</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a: <span class="type">String</span>?</div><div class="line"><span class="keyword">var</span> b = <span class="string">"Hello world!"</span></div><div class="line"><span class="keyword">var</span> <span class="built_in">c</span> = a |-&gt;| b</div></pre></td></tr></table></figure>
<ol>
<li>关于字符串</li>
</ol>
<p>String传递的时候会进行拷贝，NSString通常为引用，使用<code>countElements</code>计算String数量与同样NSString.length计算的结果可能不同，因为 <code>length</code> 利用的是 UTF-16 类型的值，而不是 Unicode 字符。比如 emoji 表情加进去之后，UTF-16 算的结果是2，而 Unicode 的计算结果是1。</p>
<ol>
<li>数组</li>
</ol>
<p>除了普通的初始化方法，我们可以通过 <code>init(count: Int, repeatedValue: T)</code> 来初始化一个数组并填充上重复的值：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// [0.0, 0.0, 0.0]</span></div><div class="line"><span class="keyword">var</span> threeDoubles = [<span class="type">Double</span>](repeating:<span class="number">0.0</span>, <span class="built_in">count</span>:<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>按某种规则获得新数组，使用map方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldArray = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</div><div class="line"><span class="keyword">var</span> newArray = oldArray.<span class="built_in">map</span> &#123; (money: <span class="type">Int</span>) <span class="keyword">in</span></div><div class="line">  <span class="string">"￥\(money)"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(newArray)</div></pre></td></tr></table></figure>
<p>当然也可以简写</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> newArray = oldArray.<span class="built_in">map</span>(&#123; <span class="string">"￥\($0)"</span> &#125;)</div></pre></td></tr></table></figure>
<p>数组过滤：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldArray = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">45</span>, <span class="number">32</span>]</div><div class="line"><span class="keyword">var</span> filteredArray : <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = []</div><div class="line"><span class="keyword">for</span> money <span class="keyword">in</span> oldArray &#123;</div><div class="line">  <span class="keyword">if</span> (money &gt; <span class="number">30</span>) &#123;</div><div class="line">    filteredArray += [money]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">print</span>(filteredArray)</div></pre></td></tr></table></figure>
<p>不过这个方法看起来很笨重，我们使用新方法</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> filtered = oldArray.<span class="built_in">filter</span> &#123;</div><div class="line">  <span class="keyword">return</span> $<span class="number">0</span> &gt; <span class="number">30</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>计算数组的和</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> array: <span class="type">Array</span>&lt;<span class="type">Int</span>&gt; = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</div><div class="line"><span class="keyword">var</span> result = array.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div></pre></td></tr></table></figure>
<ol>
<li>解包技巧：</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> num: Int?)</span></span> -&gt;<span class="type">Int</span>? &#123;</div><div class="line">  <span class="keyword">if</span> <span class="keyword">let</span> n = num &#123;</div><div class="line">    <span class="keyword">return</span> n + <span class="number">1</span></div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="literal">nil</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">1</span>)</div><div class="line">add(<span class="literal">nil</span>)</div><div class="line"></div><div class="line"><span class="comment">// -&gt; Map</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">madd</span><span class="params">(<span class="number">_</span> num: Int?)</span></span> -&gt;<span class="type">Int</span>? &#123;</div><div class="line">  <span class="keyword">return</span> num.<span class="built_in">map</span> &#123;n <span class="keyword">in</span> n + <span class="number">1</span>&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">madd(<span class="number">1</span>)</div><div class="line">madd(<span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<p>字符串也可以进行容错</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">madd</span><span class="params">(<span class="number">_</span> s: String?)</span></span> -&gt;<span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">return</span> s.<span class="built_in">map</span>&#123;</div><div class="line">    sss <span class="keyword">in</span> <span class="string">"Hello \(sss)!"</span></div><div class="line">  &#125; ?? <span class="string">"default value"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">madd(<span class="string">"c"</span>)</div><div class="line">madd(<span class="literal">nil</span>)</div></pre></td></tr></table></figure>
<ol>
<li>Switch中巧用where</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> point = (<span class="number">1</span>, -<span class="number">1</span>)</div><div class="line"></div><div class="line"><span class="keyword">switch</span> point &#123;</div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == y:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"1"</span>)</div><div class="line">  <span class="keyword">break</span></div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> (x, y) <span class="keyword">where</span> x == -y:</div><div class="line">  <span class="built_in">print</span>(<span class="string">"2"</span>)</div><div class="line">  <span class="keyword">break</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="keyword">break</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>fallthrough - 在 switch 中，将代码引至下一个 case 而不是默认的跳出 switch。不过要注意的是，fallthrough不能用在定义了变量的case内，只能用在直接的判断中</p>
</blockquote>
<ol>
<li>控制流语法大全</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// for loop (array)</span></div><div class="line"><span class="keyword">let</span> myArray = [<span class="number">1</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>]</div><div class="line"><span class="keyword">for</span> value <span class="keyword">in</span> myArray &#123;</div><div class="line">    <span class="keyword">if</span> value == <span class="number">1</span> &#123;</div><div class="line">        <span class="built_in">println</span>(<span class="string">"One!"</span>)</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        <span class="built_in">println</span>(<span class="string">"Not one!"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for loop (dictionary)</span></div><div class="line"><span class="keyword">var</span> dict = [</div><div class="line">    <span class="string">"name"</span>: <span class="string">"Steve Jobs"</span>,</div><div class="line">    <span class="string">"title"</span>: <span class="string">"CEO"</span>,</div><div class="line">    <span class="string">"company"</span>: <span class="string">"Apple"</span></div><div class="line">]</div><div class="line"><span class="keyword">for</span> (key, value) <span class="keyword">in</span> dict &#123;</div><div class="line">    <span class="built_in">println</span>(<span class="string">"\(key): \(value)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// for loop (range)</span></div><div class="line"><span class="keyword">for</span> i <span class="keyword">in</span> -<span class="number">1</span>...<span class="number">1</span> &#123; <span class="comment">// [-1, 0, 1]</span></div><div class="line">    <span class="built_in">println</span>(i)</div><div class="line">&#125;</div><div class="line"><span class="comment">// use .. to exclude the last number</span></div><div class="line"></div><div class="line"><span class="comment">// for loop (ignoring the current value of the range on each iteration of the loop)</span></div><div class="line"><span class="keyword">for</span> <span class="number">_</span> <span class="keyword">in</span> <span class="number">1</span>...<span class="number">3</span> &#123;</div><div class="line">    <span class="comment">// Do something three times.</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// while loop</span></div><div class="line"><span class="keyword">var</span> i = <span class="number">1</span></div><div class="line"><span class="keyword">while</span> i &lt; <span class="number">1000</span> &#123;</div><div class="line">    i *= <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// do-while loop</span></div><div class="line"><span class="keyword">do</span> &#123;</div><div class="line">    <span class="built_in">println</span>(<span class="string">"hello"</span>)</div><div class="line">&#125; <span class="keyword">while</span> <span class="number">1</span> == <span class="number">2</span></div><div class="line"></div><div class="line"><span class="comment">// Switch</span></div><div class="line"><span class="keyword">let</span> vegetable = <span class="string">"red pepper"</span></div><div class="line"><span class="keyword">switch</span> vegetable &#123;</div><div class="line"><span class="keyword">case</span> <span class="string">"celery"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Add some raisins and make ants on a log."</span></div><div class="line"><span class="keyword">case</span> <span class="string">"cucumber"</span>, <span class="string">"watercress"</span>:</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"That would make a good tea sandwich."</span></div><div class="line"><span class="keyword">case</span> <span class="keyword">let</span> x <span class="keyword">where</span> x.hasSuffix(<span class="string">"pepper"</span>):</div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Is it a spicy \(x)?"</span></div><div class="line"><span class="keyword">default</span>: <span class="comment">// required (in order to cover all possible input)</span></div><div class="line">    <span class="keyword">let</span> vegetableComment = <span class="string">"Everything tastes good in soup."</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// Switch to validate plist content</span></div><div class="line"><span class="keyword">let</span> city:<span class="type">Dictionary</span>&lt;<span class="type">String</span>, <span class="type">AnyObject</span>&gt; = [</div><div class="line">    <span class="string">"name"</span> : <span class="string">"Qingdao"</span>,</div><div class="line">    <span class="string">"population"</span> : <span class="number">2_721_000</span>,</div><div class="line">    <span class="string">"abbr"</span> : <span class="string">"QD"</span></div><div class="line">]</div><div class="line"><span class="keyword">switch</span> (city[<span class="string">"name"</span>], city[<span class="string">"population"</span>], city[<span class="string">"abbr"</span>]) &#123;</div><div class="line">    <span class="keyword">case</span> (.<span class="type">Some</span>(<span class="keyword">let</span> cityName <span class="keyword">as</span> <span class="type">NSString</span>),</div><div class="line">        .<span class="type">Some</span>(<span class="keyword">let</span> pop <span class="keyword">as</span> <span class="type">NSNumber</span>),</div><div class="line">        .<span class="type">Some</span>(<span class="keyword">let</span> abbr <span class="keyword">as</span> <span class="type">NSString</span>))</div><div class="line">    <span class="keyword">where</span> abbr.length == <span class="number">2</span>:</div><div class="line">        <span class="built_in">println</span>(<span class="string">"City Name: \(cityName) | Abbr.:\(abbr) Population: \(pop)"</span>)</div><div class="line">    <span class="keyword">default</span>:</div><div class="line">        <span class="built_in">println</span>(<span class="string">"Not a valid city"</span>)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>函数</li>
</ol>
<p>可选的参数请提供默认值</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(<span class="number">_</span> a: Int = <span class="number">1</span>, <span class="number">_</span> b: Int = <span class="number">2</span>)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(<span class="number">3</span>) <span class="comment">// 3 + 2</span></div></pre></td></tr></table></figure>
<p>可变参数</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(nums: Int ...)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> nums.<span class="built_in">reduce</span>(<span class="number">0</span>, +)</div><div class="line">&#125;</div><div class="line"></div><div class="line">add(nums: <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>) <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p>如果不止一个参数，需要把可变参数放在最后，否则会报错。</p>
<p>通过函数修改原始值需要 <code>inout</code> ：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">( v:<span class="keyword">inout</span> Int)</span></span> &#123;</div><div class="line">  v = v + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">1</span></div><div class="line"></div><div class="line">add(v: &amp;a)</div></pre></td></tr></table></figure>
<p>泛型函数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">value</span>&lt;T&gt;<span class="params">( value1:<span class="keyword">inout</span> T, oldValue: <span class="keyword">inout</span> T)</span></span> &#123;</div><div class="line">  <span class="keyword">let</span> temp = value1</div><div class="line">  value1 = oldValue</div><div class="line">  oldValue = temp</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> n1 = <span class="string">"mr r"</span></div><div class="line"><span class="keyword">var</span> n2 = <span class="string">"ms s"</span></div><div class="line"></div><div class="line">value(value1: &amp;n1, oldValue: &amp;n2)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(n1)</div><div class="line"><span class="built_in">print</span>(n2)</div><div class="line"></div><div class="line"><span class="keyword">var</span> i1 = <span class="number">1</span></div><div class="line"><span class="keyword">var</span> i2 = <span class="number">2</span></div><div class="line"></div><div class="line">value(value1: &amp;i1, oldValue: &amp;i2)</div><div class="line"></div><div class="line"><span class="built_in">print</span>(i1)</div><div class="line"><span class="built_in">print</span>(i2)</div></pre></td></tr></table></figure>
<p>变量：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">functionAdd</span><span class="params">(<span class="number">_</span> a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + <span class="number">2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> funcalias = functionAdd</div><div class="line"></div><div class="line">funcalias(<span class="number">2</span>)</div></pre></td></tr></table></figure>
<p>函数既然是类型的一种，那么显然也是可以作为参数传递的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">addFunc</span><span class="params">(<span class="number">_</span> a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">withFunc</span><span class="params">(addingFunc: <span class="params">(Int)</span></span></span> -&gt;<span class="type">Int</span>, a: <span class="type">Int</span>) &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"R: \(addingFunc(a))"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">withFunc(addingFunc: addFunc, a: <span class="number">4</span>) <span class="comment">// 7</span></div></pre></td></tr></table></figure>
<p>函数也是可以作为结果返回的。比如返回的值是一个参数为 Int 返回值为 Int 的函数，就是这样定义：<code>func foo() -&gt; (Int) -&gt; Int</code></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">rev</span><span class="params">(a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a - <span class="number">1</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">choose</span><span class="params">(a2r: Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt;<span class="type">Int</span> &#123;</div><div class="line">  <span class="keyword">return</span> a2r ? add: rev</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> functionForUse = choose(a2r: <span class="literal">false</span>)</div><div class="line">functionForUse(<span class="number">3</span>) <span class="comment">// rev   2</span></div></pre></td></tr></table></figure>
<p>用多了会发现在一大串 <code>()-&gt;</code> 中又穿插各种 <code>()-&gt;</code> 是一个非常蛋疼的事情。我们可以用 <code>typealias</code> 定义函数别名，其功能和 OC 中的 typedef 以及 shell 中的 alias 的作用基本是一样的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typealias</span> handler = (<span class="type">Bool</span>, <span class="type">String</span>) -&gt;<span class="type">String</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">requetsWithHandler</span> <span class="params">(<span class="number">_</span> completeHandler: handler)</span></span> -&gt; <span class="type">String</span> &#123;</div><div class="line">  <span class="keyword">return</span> completeHandler(<span class="literal">false</span>, <span class="string">"Hello"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line">requetsWithHandler &#123; (a:<span class="type">Bool</span>, s:<span class="type">String</span>) -&gt; <span class="type">String</span> <span class="keyword">in</span></div><div class="line">  <span class="keyword">if</span> a &#123;</div><div class="line">    <span class="keyword">return</span> s</div><div class="line">  &#125; <span class="keyword">else</span> &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"World!"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>函数嵌套：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">choose</span><span class="params">(a2r: Bool)</span></span> -&gt; (<span class="type">Int</span>) -&gt;<span class="type">Int</span> &#123;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a + <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="function"><span class="keyword">func</span> <span class="title">rev</span><span class="params">(a: Int)</span></span> -&gt;<span class="type">Int</span> &#123;</div><div class="line">    <span class="keyword">return</span> a - <span class="number">1</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">return</span> a2r ? add: rev</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> functionForUse = choose(a2r: <span class="literal">true</span>)</div><div class="line">functionForUse(<span class="number">3</span>)</div></pre></td></tr></table></figure>
<p>柯里化（简单提及）<a href="https://oleb.net/blog/2014/07/swift-instance-methods-curried-functions/" target="_blank" rel="external">文</a></p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(b:Int)</span></span>(a:<span class="type">Int</span>) -&gt; <span class="type">Int</span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b ;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> addOne = add(<span class="number">1</span>)</div><div class="line"><span class="keyword">let</span> addTwo = add(<span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">var</span> a = <span class="number">0</span></div><div class="line"></div><div class="line">a = addOne(a: a)    <span class="comment">// 1</span></div><div class="line">a = addTwo(a: a)    <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<ol>
<li>闭包</li>
</ol>
<p>闭包的完整形态是这个样子的：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;(parameters) -&gt; (returnType) <span class="keyword">in</span> statements&#125;</div></pre></td></tr></table></figure>
<p>闭包有3种形态</p>
<ol>
<li>全局的函数都是闭包，它们有自己的名字，但是没有捕获任何值。</li>
<li>内嵌的函数都是闭包，它们有自己的名字，而且从包含他们的函数里捕获值。</li>
<li>闭包表达式都是闭包，它们没有自己的名字，通过轻量级的语法定义并且可以从上下文中捕获值。</li>
</ol>
<p>我们可以直接用 <code>$0 $1 $2</code> 这种来依次定义闭包的参数。比如 <code>sorted</code> 函数：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reversed = sorted([<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>], &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125;)   <span class="comment">// d c b a</span></div></pre></td></tr></table></figure>
<p>如果闭包是函数的最后一个参数，Swift 提供了尾随闭包 (Trailing Closures) 解决这个审美问题：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 以下是不使用尾随闭包进行函数调用</span></div><div class="line">someFunc(<span class="number">0</span>, &#123;</div><div class="line">    <span class="comment">// 闭包主体部分</span></div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 以下是使用尾随闭包进行函数调用</span></div><div class="line">someFunc(<span class="number">0</span>) &#123;</div><div class="line">  <span class="comment">// 闭包主体部分</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用尾随，之前的函数改写为：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> reversed = sorted([<span class="string">"c"</span>,<span class="string">"a"</span>,<span class="string">"d"</span>,<span class="string">"b"</span>]) &#123; $<span class="number">0</span> &gt; $<span class="number">1</span> &#125; <span class="comment">// d c b a</span></div></pre></td></tr></table></figure>
<p>如果除了闭包没有其他参数了，甚至可以把小括号也去掉。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> oldArray = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>]</div><div class="line"></div><div class="line"><span class="keyword">var</span> filteredArray = oldArray.<span class="built_in">filter</span>&#123;</div><div class="line">  <span class="keyword">return</span> $<span class="number">0</span> &gt; <span class="number">30</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p> <code>closure</code> 的变形大致有以下几种形态：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span>( &#123; (i: <span class="type">Int</span>) -&gt;<span class="type">Int</span> <span class="keyword">in</span> <span class="keyword">return</span> i * <span class="number">2</span> &#125; )</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span>( &#123; i <span class="keyword">in</span> <span class="keyword">return</span> i * <span class="number">2</span> &#125; )</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span>( &#123; i <span class="keyword">in</span> i * <span class="number">2</span> &#125; )</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span>( &#123; $<span class="number">0</span> * <span class="number">2</span> &#125; )</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span>() &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;</div><div class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].<span class="built_in">map</span> &#123; $<span class="number">0</span> * <span class="number">2</span> &#125;</div></pre></td></tr></table></figure>
<p>一个活生生的例子：</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> canvas = <span class="type">UIView</span>(frame: <span class="type">CGRect</span>(x: <span class="number">0</span>, y: <span class="number">0</span>, width: <span class="number">50</span>, height: <span class="number">50</span>))</div><div class="line">canvas.backgroundColor = <span class="type">UIColor</span>.red</div><div class="line"></div><div class="line"><span class="type">UIView</span>.animate(withDuration: <span class="number">4</span>, animations: &#123;</div><div class="line">  canvas.backgroundColor = <span class="type">UIColor</span>.blue</div><div class="line">&#125;) &#123;</div><div class="line">  <span class="built_in">print</span>(<span class="string">"Result \($0)"</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="type">PlaygroundPage</span>.current.liveView = canvas</div></pre></td></tr></table></figure>
<p>常见形态</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 作为变量</span></div><div class="line"><span class="keyword">var</span> closureName: (parameterTypes) -&gt; (returnType)</div><div class="line"></div><div class="line"><span class="comment">// 作为可选类型的变量</span></div><div class="line"><span class="keyword">var</span> closureName: ((parameterTypes) -&gt; (returnType))?</div><div class="line"></div><div class="line"><span class="comment">// 做为一个别名</span></div><div class="line"><span class="keyword">typealias</span> closureType = (parameterTypes) -&gt; (returnType)</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数</span></div><div class="line"><span class="function"><span class="keyword">func</span><span class="params">(&#123;<span class="params">(parameterTypes)</span></span></span> -&gt; (returnType) <span class="keyword">in</span> statements&#125;)</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数</span></div><div class="line">array.<span class="built_in">sort</span>(&#123; (item1: <span class="type">Int</span>, item2: <span class="type">Int</span>) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> item1 &lt; item2 &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 隐含参数类型</span></div><div class="line">array.<span class="built_in">sort</span>(&#123; (item1, item2) -&gt; <span class="type">Bool</span> <span class="keyword">in</span> <span class="keyword">return</span> item1 &lt; item2 &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 隐含返回类型</span></div><div class="line">array.<span class="built_in">sort</span>(&#123; (item1, item2) <span class="keyword">in</span> <span class="keyword">return</span> item1 &lt; item2 &#125;)</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 尾随闭包</span></div><div class="line">array.<span class="built_in">sort</span> &#123; (item1, item2) <span class="keyword">in</span> <span class="keyword">return</span> item1 &lt; item2 &#125;</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 通过数字表示参数</span></div><div class="line">array.<span class="built_in">sort</span> &#123; <span class="keyword">return</span> $<span class="number">0</span> &lt; $<span class="number">1</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 尾随闭包且隐含返回类型</span></div><div class="line">array.<span class="built_in">sort</span> &#123; $<span class="number">0</span> &lt; $<span class="number">1</span> &#125;</div><div class="line"></div><div class="line"><span class="comment">// 作为函数的参数 - 引用已存在的函数</span></div><div class="line">array.<span class="built_in">sort</span>(&lt;)</div></pre></td></tr></table></figure>
<ol>
<li>枚举</li>
</ol>
<p>Swift 中的相关值有点像是 F# 中的 <a href="http://msdn.microsoft.com/en-us/library/dd233226.aspx" target="_blank" rel="external">Discriminated Unions</a>，它允许在枚举中存储额外的数据。</p>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">BarCode</span> </span>&#123;</div><div class="line">  <span class="keyword">case</span> <span class="type">UPCA</span>(<span class="type">Int</span>, <span class="type">Int</span>)</div><div class="line">  <span class="keyword">case</span> <span class="type">QRCode</span>(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> productBar = <span class="type">BarCode</span>.<span class="type">QRCode</span>(<span class="string">"abc"</span>)</div><div class="line">productBar = .<span class="type">UPCA</span>(<span class="number">1</span>, <span class="number">2</span>)</div><div class="line"></div><div class="line"><span class="keyword">switch</span> productBar &#123;</div><div class="line"><span class="keyword">case</span> .<span class="type">UPCA</span>(<span class="keyword">let</span> a, <span class="keyword">let</span> b):</div><div class="line">  <span class="built_in">print</span>(<span class="string">"\(a) \(b)"</span>)</div><div class="line">  <span class="keyword">break</span></div><div class="line"><span class="keyword">default</span>:</div><div class="line">  <span class="keyword">break</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p><a href="http://brettbukowski.github.io/SwiftExamples/" target="_blank" rel="external">Swift代码块</a></p>
</blockquote>
<ol>
<li>懒加载</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="keyword">var</span> name: <span class="type">String</span></div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> greeting: <span class="type">String</span> = &#123;</div><div class="line">    [<span class="keyword">unowned</span> <span class="keyword">self</span>] <span class="keyword">in</span></div><div class="line">    <span class="keyword">return</span> <span class="string">"Hello, \(self.name)!"</span></div><div class="line">    &#125;()</div><div class="line">  </div><div class="line">  <span class="keyword">init</span>(name: <span class="type">String</span>) &#123;</div><div class="line">    <span class="keyword">self</span>.name = name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="type">Person</span>(name: <span class="string">"World!"</span>)</div><div class="line">p.greeting</div></pre></td></tr></table></figure>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">ViewController</span>: <span class="title">UIViewController</span> </span>&#123;</div><div class="line">  <span class="built_in">lazy</span> <span class="keyword">var</span> animator: <span class="type">UIDynamicAnimator</span> = &#123;</div><div class="line">    <span class="keyword">return</span> <span class="type">UIDynamicAnimator</span>(referenceView: <span class="keyword">self</span>.view)</div><div class="line">  &#125;()</div><div class="line">  </div><div class="line">  <span class="keyword">required</span> <span class="keyword">init</span>?(coder aDecoder: <span class="type">NSCoder</span>) &#123;</div><div class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>(coder: aDecoder)</div><div class="line">  &#125;</div><div class="line">  </div><div class="line">  <span class="keyword">override</span> <span class="function"><span class="keyword">func</span> <span class="title">viewDidLoad</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">super</span>.viewDidLoad()</div><div class="line">    </div><div class="line">    animator.addBehavior(<span class="type">UIGravityBehavior</span>())</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>其他类型</li>
</ol>
<ul>
<li>Any 可以表示任何类型</li>
<li>AnyObject 可以代表任何class类型的实例</li>
</ul>
<ol>
<li>类型设计</li>
</ol>
<figure class="highlight swift"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Foundation</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Github</span> </span>&#123;</div><div class="line">   <span class="keyword">case</span> <span class="type">Zen</span></div><div class="line">   <span class="keyword">case</span> <span class="type">UserProfile</span>(<span class="type">String</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Path</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> path : <span class="type">String</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Github</span> : <span class="title">Path</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> path: <span class="type">String</span> &#123;</div><div class="line">       <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">       <span class="keyword">case</span> .<span class="type">Zen</span>: <span class="keyword">return</span> <span class="string">"/zen"</span></div><div class="line">       <span class="keyword">case</span> .<span class="type">UserProfile</span>(<span class="keyword">let</span> name): <span class="keyword">return</span> <span class="string">"/users/\(name)"</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> sample = <span class="type">Github</span>.<span class="type">UserProfile</span>(<span class="string">"ashfurrow"</span>)</div><div class="line"></div><div class="line"><span class="built_in">println</span>(sample.path) <span class="comment">// Prints "/users/ashfurrow"</span></div><div class="line"></div><div class="line"><span class="comment">// So far, so good</span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">Moya</span> : <span class="title">Path</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> baseURL: <span class="type">NSURL</span> &#123; <span class="keyword">get</span> &#125;</div><div class="line">   <span class="keyword">var</span> sampleData: <span class="type">String</span> &#123; <span class="keyword">get</span> &#125; <span class="comment">// Probably JSON would be better than AnyObject</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">extension</span> <span class="title">Github</span> : <span class="title">Moya</span> </span>&#123;</div><div class="line">   <span class="keyword">var</span> baseURL: <span class="type">NSURL</span> &#123; <span class="keyword">return</span> <span class="type">NSURL</span>(string: <span class="string">"https://api.github.com"</span>)! &#125;</div><div class="line">   <span class="keyword">var</span> sampleData: <span class="type">String</span> &#123;</div><div class="line">       <span class="keyword">switch</span> <span class="keyword">self</span> &#123;</div><div class="line">       <span class="keyword">case</span> .<span class="type">Zen</span>: <span class="keyword">return</span> <span class="string">"Half measures are as bad as nothing at all."</span></div><div class="line">       <span class="keyword">case</span> .<span class="type">UserProfile</span>(<span class="keyword">let</span> name): <span class="keyword">return</span> <span class="string">"&#123;login: \"\(name)\", id: 100&#125;"</span></div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">url</span><span class="params">(route: Moya)</span></span> -&gt; <span class="type">NSURL</span> &#123;</div><div class="line">   <span class="keyword">return</span> route.baseURL.<span class="type">URLByAppendingPathComponent</span>(route.path)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">println</span>(url(sample)) <span class="comment">// prints https://api.github.com/users/ashfurrow</span></div></pre></td></tr></table></figure>
<blockquote>
<p>插曲：<a href="http://www.raywenderlich.com/94302/implement-circular-image-loader-animation-cashapelayer" target="_blank" rel="external">实践一下写个动画</a></p>
</blockquote>
<p>大部分知识块儿内容来自<a href="https://segmentfault.com/u/callmewhy" target="_blank" rel="external">这个粗心的开发者，不过我很喜欢</a></p>
<p>熟悉并回顾了这些杂乱的东西之后，都跃跃欲试了吧？下篇文章开始正式的写代码。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;知识储备&quot;&gt;&lt;a href=&quot;#知识储备&quot; class=&quot;headerlink&quot; title=&quot;知识储备&quot;&gt;&lt;/a&gt;知识储备&lt;/h4&gt;&lt;p&gt;就像从零搭建OC项目&lt;code&gt;Service&lt;/code&gt;支撑一样，要在一定量知识储备的情况下才可以让框架质量得到保证。 &lt;code&gt;Service&lt;/code&gt;：项目支撑服务。每个公司的项目都会依赖一定量的组件，每一个组件作为项目的独立模块提供本身的功能供使用。一般来讲，大公司的项目均为组件化项目，一方面为了方便安排开发，另一方面方面集成管理与扩展。小公司的项目则是依赖某一个私有库作为项目的支撑。建议每一个项目都按照组件化项目的思想来从零构造，便于以后核心服务代码抽出进行组件化拆分。&lt;/p&gt;
&lt;h6 id=&quot;Swift知识储备与框架需求&quot;&gt;&lt;a href=&quot;#Swift知识储备与框架需求&quot; class=&quot;headerlink&quot; title=&quot;Swift知识储备与框架需求&quot;&gt;&lt;/a&gt;Swift知识储备与框架需求&lt;/h6&gt;&lt;p&gt;知识储备即熟悉Swift编码思想，基础知识，进阶知识与细节知识，这里不做赘述。编码能力不能做衡量，即便知识储备不够，也可以慢慢的学习。给出的建议是：多阅读源码，不是大型开源项目的源码，而是小而精的功能性项目源码。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Swift" scheme="https://wilddylan.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>IAP</title>
    <link href="https://wilddylan.github.io/2016/09/23/IAP/"/>
    <id>https://wilddylan.github.io/2016/09/23/IAP/</id>
    <published>2016-09-23T02:08:53.000Z</published>
    <updated>2017-02-04T09:02:06.000Z</updated>
    
    <content type="html"><![CDATA[<p>前言：应用内支付（IAP）一直是苹果<strong>尽力强迫</strong>大家使用的在线支付方式, 用以获利。</p>
<p>进入主题，如何将IAP继承至自己的应用中。我们使用到了开源库<code>APKit</code>，github地址：</p>
<p><a href="https://github.com/WildDylan/APKit" target="_blank" rel="external">APKit</a>的Github仓库主页，包含了本地校验。</p>
<h4 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h4><p><code>In-App Purchase</code>， 简称IAP，允许在iOS app与macOS app中出售商品，如果你想将IAP加入自己的应用中，需要在集成之前做一些配置，下边将会一步一步的教大家配置相关的信息。</p>
<blockquote>
<p>IAP在iOS 3.0 和 macOS 10.7之后有效。</p>
</blockquote>
<h6 id="Agreements-Tax-and-Banking-Information"><a href="#Agreements-Tax-and-Banking-Information" class="headerlink" title="Agreements, Tax, and Banking Information"></a>Agreements, Tax, and Banking Information</h6><p>必须完成以下步骤：</p>
<a id="more"></a>
<ol>
<li>在创建IAP之前必须要先同意最近的开发者协议（Developer Program License Agreement）。</li>
<li>完成一些必须的信息：协议、税务、银行信息。<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ManagingContractsandBanking.html#//apple_ref/doc/uid/TP40011225-CH21-SW1" target="_blank" rel="external">更多关于协议、税务、银行的资料</a>。</li>
</ol>
<p>第一步，打开 <a href="https://developer.apple.com/account" target="_blank" rel="external">https://developer.apple.com/account</a>，如果协议有更新的话, 需要先同意最新的协议：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/UpdateLicences" alt=""></p>
<p>第二部，打开<a href="https://itunesconnect.apple.com" target="_blank" rel="external">https://itunesconnect.apple.com</a>，点击协议、税务与银行，编辑并完成信息：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/Banking" alt=""></p>
<p>通常我们对Contact info，Bank info，Tax info进行编辑，我这里已经有了合同号，新用户打开界面后，合同号为空。完善这一部分信息比较杂乱，而本文的重点还是在集成，所以协议税务和银行这里大家参考<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/ManagingContractsandBanking.html#//apple_ref/doc/uid/TP40011225-CH21-SW1" target="_blank" rel="external">配置协议、税务、银行的信息</a>来完成。</p>
<h6 id="Certificates-Identifiers-amp-Profiles"><a href="#Certificates-Identifiers-amp-Profiles" class="headerlink" title="Certificates, Identifiers &amp; Profiles"></a>Certificates, Identifiers &amp; Profiles</h6><p>配置IAP应用的App ID与描述文件，必须完成以下步骤：</p>
<ol>
<li>注册一个新的App ID（这一部分对于iOS开发者来说不需要赘述，小白参考<a href="https://developer.apple.com/library/content/documentation/IDEs/Conceptual/AppDistributionGuide/MaintainingProfiles/MaintainingProfiles.html" target="_blank" rel="external">官网关于这一部分的介绍</a>）。</li>
</ol>
<p>注册一个App ID为<code>com.hack.app</code>的应用。目前创建的App ID默认是勾选了IAP。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/AppIdSelect" alt=""></p>
<h6 id="iTunes-Connect"><a href="#iTunes-Connect" class="headerlink" title="iTunes Connect"></a>iTunes Connect</h6><p>为了后续测试IAP，需要创建商品以及用于测试的帐号，<code>iTunes Connect</code>提供了这些操作，需要完成以下步骤：</p>
<ol>
<li>创建测试账户</li>
</ol>
<p>苹果提供的测试环境，被称为沙箱（sandbox），可用来对IAP应用进行测试，模拟真实交易流程。不明真像的吃瓜群众可以看一下<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnect_Guide/Chapters/SettingUpUserAccounts.html#//apple_ref/doc/uid/TP40011225-CH25-SW9" target="_blank" rel="external">如何创建Sandbox tester</a>。</p>
<ol>
<li>创建IAP商品</li>
</ol>
<p>手先创建一个App，然后才可以为该App创建内购商品。依旧，小白用户看一下如何<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectInAppPurchase_Guide/Chapters/CreatingInAppPurchaseProducts.html" target="_blank" rel="external">创建内购商品</a>。</p>
<p>再次动手实践：</p>
<p>步骤1： 打开<a href="https://itunesconnect.apple.com" target="_blank" rel="external">iTunes Connect</a>，点击用户和职能，Tab栏点击沙箱技术测试员，点击<code>+</code>号添加；</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/SandBoxTester" alt=""></p>
<p>比较坑的事是已经注册成为苹果用户的邮箱帐号在这里会被显示为占用。</p>
<p>步骤2：创建新的App，并且创建新的内购商品；</p>
<p>建议读一下<a href="https://developer.apple.com/library/content/documentation/LanguagesUtilities/Conceptual/iTunesConnectInAppPurchase_Guide/Chapters/CreatingInAppPurchaseProducts.html#//apple_ref/doc/uid/TP40013727-CH3-SW8" target="_blank" rel="external">内购商品的区别与创建</a>这篇官方文档。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/createApp" alt=""></p>
<p>套装ID选择刚创建的App ID，SKU是一个你希望的唯一App的标识，不会出现在AppStore中。</p>
<p>创建成功之后，Tab选择功能，默认选中的项目就是App内购项目，点击添加之后，会先弹窗告诉你内购商品的4中类型的特性，选择一种，一般游戏币充值类似的选择消耗类；游戏场景开通类似的选择非消耗类；陌陌会员类似的选择自动续订，每月自动扣费；VPN年限内有效类似的选择非续订。</p>
<p>选择创建消耗类项目，进入创建界面后，每一个项目后边都有一个查看提示信息的问号。审核信息以及审核信息暂时不需要配置，在提交App审核之前，需要先提交内购商品审核，那个时候再上传截图也可以。产品的ID一般存储与服务器中，App从服务器获取到商品列表之后进行选择购买。</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/ProductList" alt=""></p>
<p>创建2个商品供未来测试购买。</p>
<p>至此，准备工作告一段落，接下来进入集成工作。</p>
<h4 id="集成"><a href="#集成" class="headerlink" title="集成"></a>集成</h4><p>完成以下步骤</p>
<ol>
<li>创建新的Xcode工程，使用OC作为开发语言。</li>
<li>修改bundleIdentifier为我们创建的App ID。</li>
<li>配置需要的证书以及描述文件，但是在Xcode8中为了测试便捷，自动管理。</li>
<li>打开IAP功能支持。</li>
<li>编码前须知。</li>
</ol>
<p>完成步骤1，2，3：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/XcodeAppConfig" alt=""></p>
<p>这里作者使用的Xcode8，Xcode7.3界面与稍有区别。</p>
<p>完成步骤4：</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/openInApp" alt=""></p>
<p>步骤5，须知：</p>
<p>注：macOS开发需在didFinishLaunch要先获取一下凭证</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">if ( ![NSData dataWithContentsOfURL:[NSBundle mainBundle].appStoreReceiptURL] ) &#123;</div><div class="line">  exit(173);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>如果不存在的话直接让程序退掉就好了。</p>
<p>注：测试之前，先退出当前登录的AppStore帐号，选择真机测试，需要支付的时候登录配置好的测试帐号。</p>
<h4 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h4><p>工程目录下，<code>pod init</code>，Podfile中加入</p>
<figure class="highlight ruby"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">pod <span class="string">"APKit"</span>, <span class="string">"~&gt;1.1"</span></div></pre></td></tr></table></figure>
<p>执行<code>pod update --no-repo-update</code>，如果是第一次使用，<code>pod install --no-repo-update</code>。</p>
<h6 id="STEP1"><a href="#STEP1" class="headerlink" title="STEP1"></a>STEP1</h6><p>打开<code>AppDelegate.m</code>配置<code>APKit</code>接收商店购买回调：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#import &lt;StoreKit/StoreKit.h&gt;</div><div class="line">#import &lt;APKit/APKit.h&gt;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions &#123;</div><div class="line">#warning Add transaction observer</div><div class="line">    [[SKPaymentQueue defaultQueue] addTransactionObserver:[APStoreObserver sharedInstance]];</div><div class="line">    </div><div class="line">    return YES;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void)applicationWillTerminate:(UIApplication *)application &#123;</div><div class="line">#warning Remove transaction observer</div><div class="line">    [[SKPaymentQueue defaultQueue] removeTransactionObserver: [APStoreObserver sharedInstance]];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>设置与移除监听，要在购买操作之前。</p>
<h6 id="STEP2"><a href="#STEP2" class="headerlink" title="STEP2"></a>STEP2</h6><p>设置商品获取与商品购买结果监听（这里是测试，所以放到了一起）：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (instancetype)init &#123;</div><div class="line">    self = [super init];</div><div class="line">    if ( self ) &#123;</div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">                                                 selector:@selector(handleProductRequestNotification:)</div><div class="line">                                                     name:APProductRequestNotification</div><div class="line">                                                   object:[APProductManager sharedInstance]];</div><div class="line">        </div><div class="line">        [[NSNotificationCenter defaultCenter] addObserver:self</div><div class="line">                                                 selector:@selector(handlePurchasesNotification:)</div><div class="line">                                                     name:APPurchaseNotification</div><div class="line">                                                   object:[APStoreObserver sharedInstance]];</div><div class="line">    &#125;</div><div class="line">    return self;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>第一个监听会在收到iTunes Connect商品获取成功之后，第二个监听是支付或者恢复购买的结果。</p>
<h6 id="SETP3"><a href="#SETP3" class="headerlink" title="SETP3"></a>SETP3</h6><p>请求商品，这里建议从服务器获取商品唯一标识，然后请求。这里测试写的是上边创建的ID，并写了一个不存在的商品标识以供测试（01， 02存在，03不存在）。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">- (void)viewDidLoad &#123;</div><div class="line">    [super viewDidLoad];</div><div class="line">    </div><div class="line">    NSArray *productIdentifiers = @[</div><div class="line">                                    @&quot;1994101101&quot;,</div><div class="line">                                    @&quot;1994101102&quot;,</div><div class="line">                                    @&quot;1994101103&quot;</div><div class="line">                                    ];</div><div class="line">    </div><div class="line">    APProductManager *productManager = [APProductManager sharedInstance];</div><div class="line">    [productManager</div><div class="line">     fetchProductInformationForIds:productIdentifiers];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>fetchProductInformationForIds</code>即根据商品唯一标识获取商品信息。在通知里我们可以收到一些信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">-(void)handleProductRequestNotification: (NSNotification *)notification &#123;</div><div class="line">    APProductManager *productRequestNotification = (APProductManager*)notification.object;</div><div class="line">    APProductRequestStatus result = (APProductRequestStatus)productRequestNotification.status;</div><div class="line">    </div><div class="line">    if (result == APProductRequestSuccess) &#123;</div><div class="line">        NSLog(@&quot;VALID: %@&quot;, productRequestNotification.availableProducts);</div><div class="line">        NSLog(@&quot;INVALID: %@&quot;, productRequestNotification.invalidProductIds);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>VALID: 可以使用的数组</p>
<p>INVALID：不正确的商品标识</p>
<p><img src="http://ocef2grmj.bkt.clouddn.com/productResult" alt=""></p>
<p>1994101103不是正确的标识。</p>
<h6 id="STEP4"><a href="#STEP4" class="headerlink" title="STEP4"></a>STEP4</h6><p>发起购买请求：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">NSArray *productArray = productRequestNotification.availableProducts;</div><div class="line">if ( productArray.count &gt; 0 ) &#123;</div><div class="line">    SKProduct *product_1 = productArray.firstObject;</div><div class="line">  </div><div class="line">    APStoreObserver *storeObs = [APStoreObserver sharedInstance];</div><div class="line">    [storeObs buy:product_1];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>使用<code>buy</code>方法轻松的开始购买商品，要注意的是，一定要先设置APStoreObserver为IAP的处理（在AppDelegate.m中的设置，当然也可以在你需要的位置），并设置结果监听（在上边的init方法中）。</p>
<p>在通知里我们可以收到一些信息：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">#pragma mark - Handle purchase notification</div><div class="line"></div><div class="line">-(void)handlePurchasesNotification: (NSNotification *)notification &#123;</div><div class="line">    APStoreObserver *purchasesNotification = (APStoreObserver *)notification.object;</div><div class="line">    APPurchaseStatus status = (APPurchaseStatus)purchasesNotification.status;</div><div class="line">    </div><div class="line">    switch ( status ) &#123;</div><div class="line">#pragma - Purchase</div><div class="line">        case APPurchaseSucceeded: &#123;</div><div class="line">            NSLog(@&quot;Purchase-Success: %@&quot;, purchasesNotification.productsPurchased);</div><div class="line">            // Verify receipts step.</div><div class="line">            [self verifyReceipts];</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case APPurchaseFailed: &#123;</div><div class="line">            NSLog(@&quot;Purchase-Failed %@&quot;, purchasesNotification.errorMessage);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case APPurchaseCancelled: &#123;</div><div class="line">            NSLog(@&quot;Purchase-Cancelled!&quot;);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">#pragma - Restore</div><div class="line">        case APRestoredSucceeded: &#123;</div><div class="line">            NSLog(@&quot;Restored-Success: %@&quot;, purchasesNotification.productsRestored);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case APRestoredFailed: &#123;</div><div class="line">            NSLog(@&quot;Restored-Failed %@&quot;, purchasesNotification.errorMessage);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        case APRestoredCancelled: &#123;</div><div class="line">            NSLog(@&quot;Restored-Cancelled!&quot;);</div><div class="line">            break;</div><div class="line">        &#125;</div><div class="line">        default:</div><div class="line">            break;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这些枚举值都很清晰的表达了意思，不做赘述。需要注意的是第12行<code>[self verifyReceipts];</code>，这个是很重要的一步，用于验证凭证（验证是否合法的完成的购买）。</p>
<h6 id="STEP5"><a href="#STEP5" class="headerlink" title="STEP5"></a>STEP5</h6><p>凭证验证：</p>
<p>在macOS中，凭证有可能丢失</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSURL *localReceiptURL = [[NSBundle mainBundle] appStoreReceiptURL];</div></pre></td></tr></table></figure>
<p>URL是否存在的判断，在文章准备工作的步骤5中有提到过。</p>
<p>目前，在iPhone非越狱设备下，我没有碰到过凭证丢失的情况（我们直接抛弃了越狱用户）。所以文中不做赘述。</p>
<p>凭证校验出错可以使用<code>SKReceiptRefreshRequest</code>刷新，<a href="https://developer.apple.com/reference/storekit/skreceiptrefreshrequest" target="_blank" rel="external">阅读SKReceiptRefreshRequest官方文档</a>。</p>
<p>获得凭证：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">NSURL *localReceiptURL = [[NSBundle mainBundle] appStoreReceiptURL];</div><div class="line">NSData *data = [NSData dataWithContentsOfURL:localReceiptURL];</div><div class="line">NSString *receiptStr = [data base64EncodedStringWithOptions:NSDataBase64EncodingEndLineWithLineFeed];</div></pre></td></tr></table></figure>
<p>将<code>receiptStr</code>发送到服务器，由服务器与苹果通信进行验证。</p>
<p>这里提供2种验证路径：</p>
<ol>
<li>通过与苹果通信进行验证，还没有了解过的开发小伙伴<a href="https://developer.apple.com/library/content/releasenotes/General/ValidateAppStoreReceipt/Introduction.html#//apple_ref/doc/uid/TP40010573" target="_blank" rel="external">阅读一下验证相关的文档</a>。</li>
<li>服务器做本地验证，实现苹果验证的规则，没有了解过的小伙伴<a href="https://github.com/WildDylan/iap-local-receipt" target="_blank" rel="external">了解一下用python做本地凭证校验</a>。这种校验方式是可以直接用到生产环境的，某知名公司已经在使用了，这是取来的经，放心尝试吧。我把它Fork到了自己的仓库里，希望各路的服务端大牛可以依据思路贡献多个版本的本地验证库，我也会抽时间用Node.js实现一遍以供使用。</li>
</ol>
<blockquote>
<p>验证的<a href="http://openfibers.github.io/blog/2015/02/28/in-app-purchase-walk-through/" target="_blank" rel="external">参考文章</a>，也涵盖了基础的一些配置以及基本的编码等等。</p>
</blockquote>
<h4 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h4><p>至此，IAP开发结束了，感谢大家的阅读。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;前言：应用内支付（IAP）一直是苹果&lt;strong&gt;尽力强迫&lt;/strong&gt;大家使用的在线支付方式, 用以获利。&lt;/p&gt;
&lt;p&gt;进入主题，如何将IAP继承至自己的应用中。我们使用到了开源库&lt;code&gt;APKit&lt;/code&gt;，github地址：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/WildDylan/APKit&quot;&gt;APKit&lt;/a&gt;的Github仓库主页，包含了本地校验。&lt;/p&gt;
&lt;h4 id=&quot;准备&quot;&gt;&lt;a href=&quot;#准备&quot; class=&quot;headerlink&quot; title=&quot;准备&quot;&gt;&lt;/a&gt;准备&lt;/h4&gt;&lt;p&gt;&lt;code&gt;In-App Purchase&lt;/code&gt;， 简称IAP，允许在iOS app与macOS app中出售商品，如果你想将IAP加入自己的应用中，需要在集成之前做一些配置，下边将会一步一步的教大家配置相关的信息。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;IAP在iOS 3.0 和 macOS 10.7之后有效。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h6 id=&quot;Agreements-Tax-and-Banking-Information&quot;&gt;&lt;a href=&quot;#Agreements-Tax-and-Banking-Information&quot; class=&quot;headerlink&quot; title=&quot;Agreements, Tax, and Banking Information&quot;&gt;&lt;/a&gt;Agreements, Tax, and Banking Information&lt;/h6&gt;&lt;p&gt;必须完成以下步骤：&lt;/p&gt;
    
    </summary>
    
    
      <category term="支付与IAP" scheme="https://wilddylan.github.io/tags/%E6%94%AF%E4%BB%98%E4%B8%8EIAP/"/>
    
  </entry>
  
  <entry>
    <title>CFNetwork</title>
    <link href="https://wilddylan.github.io/2016/08/31/CFNetwork/"/>
    <id>https://wilddylan.github.io/2016/08/31/CFNetwork/</id>
    <published>2016-08-31T08:01:14.000Z</published>
    <updated>2017-02-04T09:02:11.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="CFNetwork"><a href="#CFNetwork" class="headerlink" title="CFNetwork"></a>CFNetwork</h4><p>存在于<code>CoreFoundation</code>中的一个地级别但高性能的网络框架。<a href="http://blog.csdn.net/blueman2012/article/details/6693605" target="_blank" rel="external">BSD套接字</a>的扩展，<code>CFNetwork</code>物理上和理论上都基于BSD套接字。有大量的Cocoa框架依赖于<code>CFNetwork</code>。</p>
<p><code>CFNetwork</code>更侧重与网络协议，Foundation则更倾向于API数据请求等，虽然框架也提供了一些操作，但是远不如<code>CFNetwork</code>丰富。在学习<code>CFNetwork</code>之前，需要先了解2个基础API框架： <code>CFSocket</code>、<code>CFStream</code>。</p>
<h6 id="CFSocket-API"><a href="#CFSocket-API" class="headerlink" title="CFSocket API"></a>CFSocket API</h6><p>套接字是网络通信的底层，一个套接字类似于电话的插孔，他允许链接到另外一个电话插孔并传输一些信息过去。最常见的套接字是BSD套接字。<code>CFSocket</code>是BSD套接字的一个抽象概念，在很小开销的情况下，几乎提供了全部BSD套接字的功能，并将套接字集成到一个Loop中。并且，<code>CFSocket</code>可以处理任何类型的套接字。</p>
<a id="more"></a>
<h6 id="CFStream-API"><a href="#CFStream-API" class="headerlink" title="CFStream API"></a>CFStream API</h6><p>读写流，提供一种简单的方法进行媒体数据的交换，与设备无关。你可以为内存中、文件中或者网络中的数据创建流，并且你可以在不把数据加载到内存中的情况下使用流。流是一个字节序列串行传输的通信路径，流是单向的，通常情况下，为了双向通信，需要输入（CFReadStream）、输出流（CFWriteStream）。除了基于文件的流，你不能寻找一个流，一旦数据流被提供或者被消耗，就不能从流中重新取出。</p>
<hr>
<p><code>CFStream</code>构建在<code>CFSocket</code>之上，在<code>CFHTTP</code>和<code>CFFTP</code>之下。如图可以看出，尽管<code>CFStream</code>不是<code>CFNetwork</code>正式的部分，但它是几乎所有<code>CFNetwork</code>的基础。<code>CFNetwork</code>框架的层级设计：</p>
<p><img src="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/Art/framework_layers_2x.png" alt="图1-1"></p>
<h5 id="CFNetwork-API"><a href="#CFNetwork-API" class="headerlink" title="CFNetwork API"></a>CFNetwork API</h5><p>CFNetwork又分成了几个单独的API，分别负责一个特定的的网络协议，这些API可以结合或分开使用，这取决于App的实际需要。</p>
<h6 id="CFFTP"><a href="#CFFTP" class="headerlink" title="CFFTP"></a>CFFTP</h6><p>CFFTP使与FTP服务器通信更加便利。创建写入流与读取流，使用读写流，你可以进行的操作包括：</p>
<ul>
<li>从FTP服务器下载文件</li>
<li>上传文件到FTP服务器</li>
<li>获得FTP服务器下目录</li>
<li>创建目录到FTP服务器</li>
</ul>
<h6 id="CFHTTP"><a href="#CFHTTP" class="headerlink" title="CFHTTP"></a>CFHTTP</h6><p>发送和接受HTTP消息，CFFTP是FTP协议的抽象，CFHTTP是HTTP协议的抽象。超文本传输协议（HTTP）是一种客户端/服务端的请求/响应协议，客户端创建请求消息，请求消息被序列化，转换为原始字节流，发送字节流到服务器，服务器收到进行反序列化处理并响应。</p>
<p>要创建一个HTTP请求，需指定一些基础的内容：</p>
<ul>
<li>请求的方法，比如GET、POST、HEAD等</li>
<li>URL 资源定位，比如<a href="http://www.apple.com" target="_blank" rel="external">http://www.apple.com</a></li>
<li>HTTP版本，比如1.0、2.0</li>
<li>消息主题，字节流</li>
<li>消息头</li>
</ul>
<p>消息创建后，需将其序列化后进行传递，序列化后一般的请求样式为：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">GET / HTTP/1.0\r\nUser-Agent: UserAgent\r\nContent-Length: 0\r\n\r\n</div></pre></td></tr></table></figure>
<h6 id="CFHTTPAuthentication"><a href="#CFHTTPAuthentication" class="headerlink" title="CFHTTPAuthentication"></a>CFHTTPAuthentication</h6><p>完成身份验证。</p>
<h6 id="CFHost"><a href="#CFHost" class="headerlink" title="CFHost"></a>CFHost</h6><p>获取主机信息，包括名称、地址、可达性信息等。获取信息的过程被称为<code>解析</code>。</p>
<p>所有的CFNetwork、CFHost都兼容IPv4与IPv6，使用CFHost，可以透明的使用代码对IPv4、IPv6进行处理。</p>
<h6 id="CFNetServices"><a href="#CFNetServices" class="headerlink" title="CFNetServices"></a>CFNetServices</h6><p>如果你想让你的应用使用<code>Bonjour</code>注册一个服务或发现服务可以使用CFNetServices。Bonjour是苹果零配置网络（ZEROCONF）的实现，它允许你发布、发现和解析网络服务。</p>
<h6 id="CFNetDiagnostics"><a href="#CFNetDiagnostics" class="headerlink" title="CFNetDiagnostics"></a>CFNetDiagnostics</h6><p>连接到网络的应用依赖于一个稳定的链接。如果网络不稳定，这将导致应用程序的问题。采用CFNetDiagnostics  API，用户可以自己诊断如下网络问题：</p>
<ul>
<li>物理连接失败（例如，未插入电缆）</li>
<li>网络故障（例如，DNS或DHCP服务器不再响应）</li>
<li>配置失败（例如，代理配置不正确）</li>
</ul>
<hr>
<p>由下至上的进行学习</p>
<h4 id="CFSocket"><a href="#CFSocket" class="headerlink" title="CFSocket"></a>CFSocket</h4><p><a href="https://developer.apple.com/library/ios/documentation/CoreFoundation/Reference/CFSocketRef/index.html#//apple_ref/doc/c_ref/CFSocketCreate" target="_blank" rel="external">官方文档</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">#import &lt;CFNetwork/CFNetwork.h&gt;</div><div class="line">#import &lt;sys/socket.h&gt;</div><div class="line">#import &lt;netinet/in.h&gt;</div><div class="line">#import &lt;arpa/inet.h&gt;</div><div class="line">#import &lt;unistd.h&gt;</div></pre></td></tr></table></figure>
<p>进入第一个socket程序:</p>
<ol>
<li>添加2个全局变量供下面</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFSocketRef socket; // socket引用</div><div class="line">CFDataRef dataRef; 	// 存储服务器地址信息</div></pre></td></tr></table></figure>
<ol>
<li>创建socket并发送、接收消息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 创建socket连接</div><div class="line">CFSocketContext context = &#123;</div><div class="line">    0,                          // 结构体的版本，必须为0</div><div class="line">    (__bridge void *)(self),    // 一个任意指针的数据，可以用在创建时CFSocket对象相关联。这个指针被传递给所有的上下文中定义的回调。</div><div class="line">    NULL,                       // 一个定义在上面指针中的retain的回调， 可以为NULL</div><div class="line">    NULL,</div><div class="line">    NULL</div><div class="line">&#125;;</div><div class="line"></div><div class="line">// 创建socket引用</div><div class="line">socket = CFSocketCreate(</div><div class="line">                        kCFAllocatorDefault,  // 为新对象分配内存，可以为nil</div><div class="line">                        PF_INET, // 协议族，如果为0或者负数，则默认为PF_INET</div><div class="line">                        SOCK_STREAM, // 套接字类型，如果协议族为PF_INET,则它会默认为SOCK_STREAM,</div><div class="line">                        IPPROTO_TCP, // 套接字协议，如果协议族是PF_INET且协议是0或者负数，它会默认为IPPROTO_TCP</div><div class="line">                        kCFSocketConnectCallBack, // 触发回调函数的socket消息类型，具体见Callback Types</div><div class="line">                        TCPServerConnectCallBack, // 上面情况下触发的回调函数</div><div class="line">                        &amp;context // 一个持有CFSocket结构信息的对象，可以为nil</div><div class="line">                        );</div></pre></td></tr></table></figure>
<p>实现callBack方法</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">static void</div><div class="line">TCPServerConnectCallBack(CFSocketRef s, CFSocketCallBackType type, CFDataRef address, const void *data, void *info) &#123;</div><div class="line">    if ( data != NULL ) &#123;</div><div class="line">        // 当socket为kCFSocketConnectCallBack时，失败时回调失败会返回一个错误代码指针，其他情况返回NULL</div><div class="line">        NSLog(@&quot;连接失败&quot;);</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    UIViewController * vc = (__bridge UIViewController *) info;</div><div class="line">    [vc performSelector:@selector(sendMessage) withObject:nil];</div><div class="line">    [vc performSelector:@selector(readStream) withObject:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ol>
<li>创建服务器地址信息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 创建服务端信息</div><div class="line">   struct sockaddr_in addr4; // IPv4, sockaddr_in6</div><div class="line">   memset(&amp;addr4, 0, sizeof(addr4));</div><div class="line">   addr4.sin_len = sizeof(addr4);</div><div class="line">   addr4.sin_family = AF_INET;</div><div class="line">   addr4.sin_port = htons(18800);</div><div class="line">   addr4.sin_addr.s_addr = inet_addr([localHost UTF8String]);</div><div class="line">   dataRef = CFDataCreate(kCFAllocatorDefault, (UInt8 *)&amp;addr4, sizeof(addr4));</div></pre></td></tr></table></figure>
<ol>
<li>连接</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">if ( socket ) &#123;</div><div class="line">        CFSocketError e = CFSocketConnectToAddress(socket, dataRef, -1);</div><div class="line">        </div><div class="line">        if ( e ) &#123;</div><div class="line">            NSLog(@&quot;Error!&quot;);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        CFRunLoopRef runLoopRef = CFRunLoopGetCurrent();</div><div class="line">        CFRunLoopSourceRef runLoopSourcesRef = CFSocketCreateRunLoopSource(kCFAllocatorDefault, socket, 0);</div><div class="line">        CFRunLoopAddSource(runLoopRef, runLoopSourcesRef, kCFRunLoopCommonModes);</div><div class="line">        CFRelease(runLoopSourcesRef);</div><div class="line">    &#125; else &#123;</div><div class="line">        NSLog(@&quot;连接失败&quot;);</div><div class="line">    &#125;</div></pre></td></tr></table></figure>
<ol>
<li>接收与发送消息</li>
</ol>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">- (void) readStream &#123;</div><div class="line">    char buffer[1024];</div><div class="line">    while (recv(CFSocketGetNative(socket), //与本机关联的Socket 如果已经失效返回－1:INVALID_SOCKET</div><div class="line">                buffer, sizeof(buffer), 0)) &#123;</div><div class="line">        NSLog(@&quot;%@&quot;, [NSString stringWithUTF8String:buffer]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (void)sendMessage &#123;</div><div class="line">    NSString *stringTosend = @&quot;你好&quot;;</div><div class="line">    CFSocketError e = CFSocketSendData(socket, dataRef, CFDataCreate(kCFAllocatorDefault, (UInt8 *)[stringTosend UTF8String], sizeof([stringTosend UTF8String])), 1);</div><div class="line">    if ( e ) &#123;</div><div class="line">        </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">NSString * localHost = @&quot;120.27.139.39&quot;; // 该地址为测试IP地址, 仅供测试连接使用</div></pre></td></tr></table></figure>
<p>以上步骤没问题的话，可以成功的连接到服务器并发送一条消息。</p>
<p><a href="http://www.cnblogs.com/tryingx/articles/3867645.html" target="_blank" rel="external">参考文档</a></p>
<h4 id="CFStream"><a href="#CFStream" class="headerlink" title="CFStream"></a>CFStream</h4><p>尝试对文件的读取，文件直接存在于项目工程目录下，通过NSBundle来加载。</p>
<ul>
<li>创建读入流</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 创建读入流</div><div class="line">   NSString *pdfPath = [[NSBundle mainBundle]</div><div class="line">                        pathForResource:@&quot;File&quot; ofType:@&quot;txt&quot;];</div><div class="line">   NSURL *pdfUrl = [NSURL fileURLWithPath:pdfPath];</div><div class="line">   CFReadStreamRef myReadStream = CFReadStreamCreateWithFile(kCFAllocatorDefault, (CFURLRef)pdfUrl);</div></pre></td></tr></table></figure>
<p>读取文件内容</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">if (!CFReadStreamOpen(myReadStream)) &#123;</div><div class="line">    CFStreamError myErr = CFReadStreamGetError(myReadStream);</div><div class="line">    // 发生了错误</div><div class="line">    if (myErr.domain == kCFStreamErrorDomainPOSIX) &#123;</div><div class="line">        // Interpret myErr.error as a UNIX errno.</div><div class="line">    &#125; else if (myErr.domain == kCFStreamErrorDomainMacOSStatus) &#123;</div><div class="line">        // Interpret myErr.error as a MacOS error code.</div><div class="line">        OSStatus macError = (OSStatus)myErr.error;</div><div class="line">        NSLog(@&quot;%d&quot;, macError);</div><div class="line">    &#125;</div><div class="line">&#125; else &#123;</div><div class="line">    NSLog(@&quot;打开成功&quot;);</div><div class="line">    CFIndex numBytesRead;</div><div class="line">    do &#123;</div><div class="line">        UInt8 buf[1024 * 1024]; // define myReadBufferSize as desired</div><div class="line">        numBytesRead = CFReadStreamRead(myReadStream, buf, sizeof(buf));</div><div class="line">        if( numBytesRead &gt; 0 ) &#123;</div><div class="line">            NSLog(@&quot;%s&quot;, buf);</div><div class="line">        &#125; else if( numBytesRead &lt; 0 ) &#123;</div><div class="line">            CFStreamError error = CFReadStreamGetError(myReadStream);</div><div class="line">            NSLog(@&quot;%ld %d&quot;, error.domain, error.error);</div><div class="line">        &#125; else &#123;</div><div class="line">            NSLog(@&quot;去读结束&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125; while( numBytesRead &gt; 0 );</div><div class="line">    </div><div class="line">    NSLog(@&quot;读取完毕&quot;);</div><div class="line">    CFReadStreamClose(myReadStream);</div><div class="line">    CFRelease(myReadStream);</div><div class="line">    myReadStream = NULL;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>正常执行，会在控制台打印工程目录下File.txt文件的内容。</p>
<ul>
<li>创建写入流</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">NSString * document = NSSearchPathForDirectoriesInDomains(NSLibraryDirectory, NSUserDomainMask, YES).lastObject;</div><div class="line">   NSString * p = [document stringByAppendingPathComponent:@&quot;a.txt&quot;];</div><div class="line">   </div><div class="line">   if ( ![[NSFileManager defaultManager] fileExistsAtPath:p] ) &#123;</div><div class="line">       [[NSFileManager defaultManager] createFileAtPath:p contents:nil attributes:nil];</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   CFWriteStreamRef myWriteStream =</div><div class="line">   CFWriteStreamCreateWithFile(kCFAllocatorDefault, (CFURLRef)[NSURL fileURLWithPath:p]);</div></pre></td></tr></table></figure>
<p>开始写入操作</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">if (!CFWriteStreamOpen(myWriteStream)) &#123;</div><div class="line">     CFStreamError myErr = CFWriteStreamGetError(myWriteStream);</div><div class="line">     // An error has occurred.</div><div class="line">     if (myErr.domain == kCFStreamErrorDomainPOSIX) &#123;</div><div class="line">         // Interpret myErr.error as a UNIX errno.</div><div class="line">     &#125; else if (myErr.domain == kCFStreamErrorDomainMacOSStatus) &#123;</div><div class="line">         // Interpret myErr.error as a MacOS error code.</div><div class="line">         OSStatus macError = (OSStatus)myErr.error;</div><div class="line">         // Check other error domains.</div><div class="line">         NSLog(@&quot;%d&quot;, macError);</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> NSLog(@&quot;%ld&quot;,CFWriteStreamGetStatus(myWriteStream));</div><div class="line"> </div><div class="line"> const char * buf = &quot;World !&quot;;</div><div class="line"> CFIndex bufLen = (CFIndex)strlen(buf);</div><div class="line"> </div><div class="line"> if ( CFWriteStreamCanAcceptBytes(myWriteStream) ) &#123;</div><div class="line">     NSLog(@&quot;可以接受字节&quot;);</div><div class="line">     CFIndex bytesWritten = CFWriteStreamWrite(myWriteStream, (UInt8 *)buf, (CFIndex)bufLen);</div><div class="line">     NSLog(@&quot;%ld&quot;, bytesWritten);</div><div class="line"> &#125; else &#123;</div><div class="line">     NSLog(@&quot;不可以接受字节&quot;);</div><div class="line"> &#125;</div><div class="line"> </div><div class="line"> CFWriteStreamClose(myWriteStream);</div><div class="line"> CFRelease(myWriteStream);</div><div class="line"> myWriteStream = NULL;</div></pre></td></tr></table></figure>
<p>如果正常运行的话, 会在项目本沙箱地址Library中存在a.txt并且内容为World ！</p>
<p><a href="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFStreamTasks/CFStreamTasks.html#//apple_ref/doc/uid/TP30001132-CH6-SW1" target="_blank" rel="external">官方文档</a></p>
<h4 id="CFHTTP-1"><a href="#CFHTTP-1" class="headerlink" title="CFHTTP"></a>CFHTTP</h4><p>创建一个Request</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">CFStringRef bodyString = CFSTR(&quot;Hello&quot;);</div><div class="line"></div><div class="line">CFStringRef headerFieldName = CFSTR(&quot;X-My-Favorite-Field&quot;);</div><div class="line">CFStringRef headerFieldValue = CFSTR(&quot;Dreams&quot;);</div><div class="line"></div><div class="line">CFStringRef url = CFSTR(&quot;http://www.apple.com&quot;);</div><div class="line">CFURLRef myURL = CFURLCreateWithString(kCFAllocatorDefault, url, NULL);</div><div class="line"></div><div class="line">CFStringRef requestMethod = CFSTR(&quot;GET&quot;);</div><div class="line">CFHTTPMessageRef myRequest =</div><div class="line">CFHTTPMessageCreateRequest(kCFAllocatorDefault, requestMethod, myURL,</div><div class="line">                           kCFHTTPVersion1_1);</div><div class="line"></div><div class="line">CFDataRef bodyDataExt = CFStringCreateExternalRepresentation(kCFAllocatorDefault, bodyString, kCFStringEncodingUTF8, 0);</div><div class="line">CFHTTPMessageSetBody(myRequest, bodyDataExt);</div><div class="line">CFHTTPMessageSetHeaderFieldValue(myRequest, headerFieldName, headerFieldValue);</div><div class="line">CFDataRef mySerializedRequest = CFHTTPMessageCopySerializedMessage(myRequest);</div><div class="line"></div><div class="line">CFRelease(myRequest);</div><div class="line">CFRelease(myURL);</div><div class="line">CFRelease(url);</div><div class="line">CFRelease(mySerializedRequest);</div><div class="line">myRequest = NULL;</div><div class="line">mySerializedRequest = NULL;</div></pre></td></tr></table></figure>
<p><code>mySerializedRequest</code>即为序列化后的Request内容。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">(lldb) po [[NSString alloc] initWithData:(NSData *)mySerializedRequest encoding:NSUTF8StringEncoding]</div><div class="line">GET / HTTP/1.1</div><div class="line">X-My-Favorite-Field: Dreams</div><div class="line"></div><div class="line">Hello</div></pre></td></tr></table></figure>
<p>通过lldb打印可以看到内容。</p>
<p>创建请求并发送</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">CFReadStreamRef myReadStream = CFReadStreamCreateForHTTPRequest(kCFAllocatorDefault, myRequest);</div><div class="line">CFReadStreamOpen(myReadStream);</div><div class="line"></div><div class="line">CFHTTPMessageRef myResponse = (CFHTTPMessageRef)CFReadStreamCopyProperty(myReadStream, kCFStreamPropertyHTTPResponseHeader);</div><div class="line">CFStringRef myStatusLine = CFHTTPMessageCopyResponseStatusLine(myResponse);</div><div class="line">UInt32 myErrCode = CFHTTPMessageGetResponseStatusCode(myResponse);</div></pre></td></tr></table></figure>
<p>其中<code>CFReadStreamCreateForHTTPRequest</code>类似的API已经弃用，苹果希望使用NSURLSession。</p>
<p><a href="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPTasks/CFHTTPTasks.html#//apple_ref/doc/uid/TP30001132-CH5-SW2" target="_blank" rel="external">官方文档</a></p>
<h4 id="Communicating-with-Authenticating-HTTP-Servers"><a href="#Communicating-with-Authenticating-HTTP-Servers" class="headerlink" title="Communicating with Authenticating HTTP Servers"></a>Communicating with Authenticating HTTP Servers</h4><p><a href="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFHTTPAuthenticationTasks/CFHTTPAuthenticationTasks.html#//apple_ref/doc/uid/TP30001132-CH8-SW1" target="_blank" rel="external">官方文档</a></p>
<h4 id="CFFTP-1"><a href="#CFFTP-1" class="headerlink" title="CFFTP"></a>CFFTP</h4><p><a href="https://developer.apple.com/library/ios/documentation/Networking/Conceptual/CFNetwork/CFFTPTasks/CFFTPTasks.html#//apple_ref/doc/uid/TP30001132-CH9-SW1" target="_blank" rel="external">官方文档</a></p>
<h4 id="网络诊断"><a href="#网络诊断" class="headerlink" title="网络诊断"></a>网络诊断</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">CFNetDiagnosticDiagnoseProblemInteractively()</div></pre></td></tr></table></figure>
<p>注：文中内容90%来自官方文档。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;CFNetwork&quot;&gt;&lt;a href=&quot;#CFNetwork&quot; class=&quot;headerlink&quot; title=&quot;CFNetwork&quot;&gt;&lt;/a&gt;CFNetwork&lt;/h4&gt;&lt;p&gt;存在于&lt;code&gt;CoreFoundation&lt;/code&gt;中的一个地级别但高性能的网络框架。&lt;a href=&quot;http://blog.csdn.net/blueman2012/article/details/6693605&quot;&gt;BSD套接字&lt;/a&gt;的扩展，&lt;code&gt;CFNetwork&lt;/code&gt;物理上和理论上都基于BSD套接字。有大量的Cocoa框架依赖于&lt;code&gt;CFNetwork&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;CFNetwork&lt;/code&gt;更侧重与网络协议，Foundation则更倾向于API数据请求等，虽然框架也提供了一些操作，但是远不如&lt;code&gt;CFNetwork&lt;/code&gt;丰富。在学习&lt;code&gt;CFNetwork&lt;/code&gt;之前，需要先了解2个基础API框架： &lt;code&gt;CFSocket&lt;/code&gt;、&lt;code&gt;CFStream&lt;/code&gt;。&lt;/p&gt;
&lt;h6 id=&quot;CFSocket-API&quot;&gt;&lt;a href=&quot;#CFSocket-API&quot; class=&quot;headerlink&quot; title=&quot;CFSocket API&quot;&gt;&lt;/a&gt;CFSocket API&lt;/h6&gt;&lt;p&gt;套接字是网络通信的底层，一个套接字类似于电话的插孔，他允许链接到另外一个电话插孔并传输一些信息过去。最常见的套接字是BSD套接字。&lt;code&gt;CFSocket&lt;/code&gt;是BSD套接字的一个抽象概念，在很小开销的情况下，几乎提供了全部BSD套接字的功能，并将套接字集成到一个Loop中。并且，&lt;code&gt;CFSocket&lt;/code&gt;可以处理任何类型的套接字。&lt;/p&gt;
    
    </summary>
    
    
      <category term="CoreFoundation" scheme="https://wilddylan.github.io/tags/CoreFoundation/"/>
    
  </entry>
  
  <entry>
    <title>Launch Arguments &amp; Environment Variables.</title>
    <link href="https://wilddylan.github.io/2016/08/30/Launch-Arguments-Environment-Variables/"/>
    <id>https://wilddylan.github.io/2016/08/30/Launch-Arguments-Environment-Variables/</id>
    <published>2016-08-30T08:16:10.000Z</published>
    <updated>2017-02-04T09:02:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>Walk into any American fast food establishment, and you’ll be greeted with a colorful, back-lit display of specials, set menus, and other a la carte items. But as those in-the-know are quick to point out, larger chains often have a <em>secret</em> menu, passed down by oral tradition between line cook workers and patrons over the generations.</p>
<p>At McDonald’s, one can order a “Poor Man’s Big Mac”, which transforms a double cheeseburger alchemy-like into the chain’s signature sandwich on the cheap.</p>
<p>At Chipotle, there is an unwritten rule that they’ll make anything within the scope of available ingredients. Since Mexican food is a testament to culinary combinatorics, an off-book order for a Quesadilla or Nachos is well within their wheelhouse.</p>
<p>In life, it’s all about knowing what to ask for.</p>
<a id="more"></a>
<p>Which brings us to Xcode Launch Arguments &amp; Environment Variables. There are a number of options that can be passed into a target’s scheme to enable useful debugging behavior, but like a fast food secret menu, they’re obscure and widely unknown.</p>
<p>So this week on NSHipster, we’ll take a look at the hidden world of Xcode runtime configuration, so that you, dear reader, may also saunter up to the great lunch counter of Objective-C and order to your heart’s content.</p>
<p>To enable launch arguments and set environment variables for your app, select your target from the Xcode toolbar and select “Edit Scheme…”</p>
<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-edit-scheme.png" alt=""></p>
<p>On the left side of the panel, select “Run [AppName].app”, and select the “Arguments” segment on the right side. There will be two drop-downs, for “Arguments Passed on Launch” and “Environment Variables”.</p>
<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-edit-scheme-panel.png" alt=""></p>
<p>For the purposes of debugging an app target, launch arguments and environment variables can be thought to be equivalent—both change the runtime behavior by defining certain values. In practice, the main difference between the two is that launch arguments begin with a dash (<code>-</code>) and don’t have a separate field for argument values.</p>
<h2 id="Arguments-Passed-on-Launch"><a href="#Arguments-Passed-on-Launch" class="headerlink" title="Arguments Passed on Launch"></a>Arguments Passed on Launch</h2><p>Any argument passed on launch will override the current value in <code>NSUserDefaults</code> for the duration of execution. While this can be used for domain-specific testing and debugging, the two most widely applicable use cases are for localization and Core Data.</p>
<h6 id="Localization"><a href="#Localization" class="headerlink" title="Localization"></a>Localization</h6><p>Getting localization right is a challenging and time-consuming task in and of itself. Fortunately, there are a few launch arguments that make the process <em>much</em> nicer.</p>
<blockquote>
<p>For more information about localization, check out our article about<a href="http://nshipster.com/nslocalizedstring/" target="_blank" rel="external"><code>NSLocalizedString</code></a>.</p>
</blockquote>
<h6 id="NSDoubleLocalizedStrings"><a href="#NSDoubleLocalizedStrings" class="headerlink" title="NSDoubleLocalizedStrings"></a>NSDoubleLocalizedStrings</h6><p>To simulate German’s UI-breaking <em>götterdämmere Weltanschauung</em> of long-compound-words-unbroken-by-breakable-whitespace, there’s <code>NSDoubleLocalizedStrings</code>.</p>
<p>According to <a href="http://www-01.ibm.com/software/globalization/guidelines/a3.html" target="_blank" rel="external">IBM’s Globalization Guidelines</a>, we can expect translations from English to many European languages to be double or even triple the physical space of the source:</p>
<table>
<thead>
<tr>
<th>Number of Characters in Text</th>
<th>Additional Physical Space Required</th>
</tr>
</thead>
<tbody>
<tr>
<td>≤ 10</td>
<td>100% to 200%</td>
</tr>
<tr>
<td>11 – 20</td>
<td>80% to 100%</td>
</tr>
<tr>
<td>21 – 30</td>
<td>60% to 80%</td>
</tr>
<tr>
<td>31 – 50</td>
<td>40% to 60%</td>
</tr>
<tr>
<td>51 – 70</td>
<td>31% to 40%</td>
</tr>
<tr>
<td>70</td>
<td>30%</td>
</tr>
</tbody>
</table>
<p>While you’re waiting for the first batch of translations to come back, or are merely curious to see how badly your UI breaks under linguistic pressure, specify the following launch argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-NSDoubleLocalizedStrings YES</div></pre></td></tr></table></figure>
<p><img src="http://nshipster.s3.amazonaws.com/launch-arguments-nsdoublelocalizedstrings.png" alt=""></p>
<h6 id="NSShowNonLocalizedStrings"><a href="#NSShowNonLocalizedStrings" class="headerlink" title="NSShowNonLocalizedStrings"></a>NSShowNonLocalizedStrings</h6><p>Project managers screaming at you to get localization finished? Now you can configure your app to scream at you as well!</p>
<p>If you pass the <code>NSShowNonLocalizedStrings</code> launch argument, any unlocalized string will SCREAM AT YOU IN CAPITAL LETTERS. HOW DELIGHTFUL!</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-NSShowNonLocalizedStrings YES</div></pre></td></tr></table></figure>
<h6 id="AppleLanguages"><a href="#AppleLanguages" class="headerlink" title="AppleLanguages"></a>AppleLanguages</h6><p>Perhaps the most useful launch argument of all, however, is <code>AppleLanguages</code>.</p>
<p>Normally, one would have to manually go through Settings &gt; General &gt; International &gt; Language and wait for the Simulator or Device to restart. But the same can be accomplished much more simply with the following launch argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-AppleLanguages (es)</div></pre></td></tr></table></figure>
<blockquote>
<p>The value for <code>AppleLanguages</code> can either be the name of the language (“Spanish”), or its language code (<code>es</code>), but since localization files are keyed by their ISO 639 code, using the code is preferable to the actual name of the language.</p>
</blockquote>
<h6 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h6><p>Of all of the system frameworks, Core Data may be the most in need of debugging. Managed objects passing across contexts and threads, and notifications firing with dazzlingly fervor, there’s too much going on to keep track of yourself. Call in reinforcements with these essential launch arguments:</p>
<h6 id="SQL-Debug"><a href="#SQL-Debug" class="headerlink" title="SQL Debug"></a>SQL Debug</h6><p>Most Core Data stacks use SQLite as a persistent store, so if your app is anything like the majority, you’ll appreciate being able to watch SQL statements and statistics fly by as Core Data works its magic.</p>
<p>Set the following launch argument:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-com.apple.CoreData.SQLDebug 3</div></pre></td></tr></table></figure>
<p>…and let the spice flow.</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">CoreData: sql: pragma cache_size=1000</div><div class="line">CoreData: sql: SELECT Z_VERSION, Z_UUID, Z_PLIST FROM Z_METADATA</div><div class="line">CoreData: sql: SELECT 0, t0.Z_PK, t0.Z_OPT, t0.ZAUTHOR, t0.ZTITLE, t0.ZCOPYRIGHT FROM ZBOOK t0 ORDER BY t0.ZAUTHOR, t0.ZTITLE</div><div class="line">CoreData: annotation: sql connection fetch time: 0.0001s</div><div class="line">CoreData: annotation: total fetch execution time: 0.0010s for 20 rows.</div></pre></td></tr></table></figure>
<p><code>com.apple.CoreData.SQLDebug</code> takes a value between <code>1</code> and <code>3</code>; the higher the value, the more verbose the output. Adjust according to taste.</p>
<h6 id="Migration-Debug"><a href="#Migration-Debug" class="headerlink" title="Migration Debug"></a>Migration Debug</h6><p>In any other persistence layer, migrations are a blessing. Yet, for some reason, Core Data manages to make them into something out of a nightmare. When things go wrong and you have no one to blame except your own ignorant self, unworthy of such an intuitive and well-designed <del>ORM</del> graph persistence framework, then here’s an argument you’ll want to pass at launch:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">-com.apple.CoreData.MigrationDebug</div></pre></td></tr></table></figure>
<h2 id="Environment-Variables"><a href="#Environment-Variables" class="headerlink" title="Environment Variables"></a>Environment Variables</h2><p>Whereas launch arguments are specific to the executable, environment variables have a wider scope, more along the lines of a global variable (but without all of the knee-jerk derision from programmers).</p>
<p>Configure your environment with the following settings to shape the memory management policies to aide in debugging.</p>
<blockquote>
<p>Unless otherwise specified, environment variables are passed <code>YES</code> or <code>NO</code> to enable or disable a particular feature.</p>
</blockquote>
<h6 id="Zombies"><a href="#Zombies" class="headerlink" title="Zombies!"></a>Zombies!</h6><p>Over-played in popular media, under-played in Objective-C, everyone can agree that it pays to know about zombies.</p>
<p>Setting <code>NSZombie</code>-related environment variables allows you to control the <em>BRAAAAINS!</em> of your app. To be more specific, when objects are deallocated, they become “zombified”, able to communicate any messages that are passed after they have been freed. This can be useful for tracing any errant<code>EXC_BAD_ACCESS</code> exceptions you get during execution.</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSZombieEnabled</td>
<td>If set to YES, deallocated objects are ‘zombified’; this allows you to quickly debug problems where you send a message to an object that has already been freed.</td>
</tr>
<tr>
<td>NSDeallocateZombies</td>
<td>If set to YES, the memory for ‘zombified’ objects is actually freed.</td>
</tr>
</tbody>
</table>
<h6 id="Memory-Allocator"><a href="#Memory-Allocator" class="headerlink" title="Memory Allocator"></a>Memory Allocator</h6><p>The memory allocator includes several debugging hooks that can be enabled by environment variables. As explained in Apple’s <a href="https://developer.apple.com/library/mac/documentation/performance/Conceptual/ManagingMemory/Articles/MallocDebug.html" target="_blank" rel="external">Memory Usage Performance Guidelines</a>:</p>
<blockquote>
<p>Guard Malloc is a special version of the malloc library that replaces the standard library during debugging. Guard Malloc uses several techniques to try and crash your application at the specific point where a memory error occurs. For example, it places separate memory allocations on different virtual memory pages and then deletes the entire page when the memory is freed. Subsequent attempts to access the deallocated memory cause an immediate memory exception rather than a blind access into memory that might now hold other data. When the crash occurs, you can then go and inspect the point of failure in the debugger to identify the problem.</p>
</blockquote>
<p>Here are some of the most useful ones:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td>MallocScribble</td>
<td>Fill allocated memory with 0xAA and scribble deallocated memory with 0x55.</td>
</tr>
<tr>
<td>MallocGuardEdges</td>
<td>Add guard pages before and after large allocations.</td>
</tr>
<tr>
<td>MallocStackLogging</td>
<td>Record backtraces for each memory block to assist memory debugging tools; if the block is allocated and then immediately freed, both entries are removed from the log, which helps reduce the size of the log.</td>
</tr>
<tr>
<td>MallocStackLoggingNoCompact</td>
<td>Same as MallocStackLogging but keeps all log entries.</td>
</tr>
</tbody>
</table>
<h6 id="I-O-Buffering"><a href="#I-O-Buffering" class="headerlink" title="I/O Buffering"></a>I/O Buffering</h6><p>Although unlikely, you may come across a situation where you want logging to <code>stdout</code> to be unbuffered (ensuring that the output has been written before continuing). You can set that with the<code>NSUnbufferedIO</code> environment variable:</p>
<table>
<thead>
<tr>
<th>Name</th>
<th>Effect</th>
</tr>
</thead>
<tbody>
<tr>
<td>NSUnbufferedIO</td>
<td>If set to YES, Foundation will use unbuffered I/O for stdout (stderr is unbuffered by default).</td>
</tr>
</tbody>
</table>
<p>Just as secret menus are bound by the implications of Gödel’s Incompleteness Theorem, it is impossible to document all of the secret incantations to get special treatment in Xcode. However, perhaps you can find a few more (and learn a <em>ton</em> about runtime internals) by perusing Apple’s<a href="https://developer.apple.com/library/ios/technotes/tn2239/_index.html" target="_blank" rel="external">Technical Note TN2239: iOS Debugging Magic</a> and <a href="https://developer.apple.com/library/mac/technotes/tn2124/_index.html" target="_blank" rel="external">Technical Note TN2124: OS X Debugging Magic</a>.</p>
<p>Hopefully, though, the secret knowledge you’ve been exposed to in this article will sustain you in your app endeavors. Use them wisely, and pass them onto your coworkers like an urban legend or juicy rumor.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Walk into any American fast food establishment, and you’ll be greeted with a colorful, back-lit display of specials, set menus, and other a la carte items. But as those in-the-know are quick to point out, larger chains often have a &lt;em&gt;secret&lt;/em&gt; menu, passed down by oral tradition between line cook workers and patrons over the generations.&lt;/p&gt;
&lt;p&gt;At McDonald’s, one can order a “Poor Man’s Big Mac”, which transforms a double cheeseburger alchemy-like into the chain’s signature sandwich on the cheap.&lt;/p&gt;
&lt;p&gt;At Chipotle, there is an unwritten rule that they’ll make anything within the scope of available ingredients. Since Mexican food is a testament to culinary combinatorics, an off-book order for a Quesadilla or Nachos is well within their wheelhouse.&lt;/p&gt;
&lt;p&gt;In life, it’s all about knowing what to ask for.&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS新特性" scheme="https://wilddylan.github.io/tags/iOS%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>AddressBook.framework</title>
    <link href="https://wilddylan.github.io/2016/08/22/AddressBook-framework/"/>
    <id>https://wilddylan.github.io/2016/08/22/AddressBook-framework/</id>
    <published>2016-08-22T09:44:14.000Z</published>
    <updated>2017-02-04T09:02:14.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="AddressBook-framework-AddressBookUI-framework"><a href="#AddressBook-framework-AddressBookUI-framework" class="headerlink" title="AddressBook.framework/AddressBookUI.framework"></a>AddressBook.framework/AddressBookUI.framework</h4><p>9.0之后, <code>AddressBook.framework</code>被<code>Contacts.framework</code>代替。但是目前大部分的应用软件起支撑的版本是iOS6.0或7.0, 所以<code>AddressBook</code>还大有用处。之前在简书的文章<a href="http://www.jianshu.com/p/bf895054ed69/comments/3766914#comment-3766914" target="_blank" rel="external">AddressBook, AddressBookUI</a>中有提及, 但是由于是转载, 所以代码不是很清晰, 而且有一些读者希望得到清晰的代码以及详细的功能解释, 所以在这里把<code>AddressBook.framework</code>以及<code>AddressBookUI.framework</code>重新做一下详细的使用方法介绍。</p>
<p>这篇文章先介绍<code>AddressBook.framework</code>。 <code>AddressBookUI</code>以及<code>Contacts.framework</code>也会补上。</p>
<a id="more"></a>
<h4 id="开始使用AdressBook"><a href="#开始使用AdressBook" class="headerlink" title="开始使用AdressBook"></a>开始使用AdressBook</h4><p>首先, 导入我们需要的Framework</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">#import &lt;AddressBook/AddressBook.h&gt;</div></pre></td></tr></table></figure>
<p>经常使用到：</p>
<ul>
<li>ABAddressBookRef: 通讯录引用</li>
<li>ABRecordRef: 记录引用</li>
<li>ABPropertyID: 记录的属性ID</li>
</ul>
<h4 id="获取AddressBook使用权限"><a href="#获取AddressBook使用权限" class="headerlink" title="获取AddressBook使用权限"></a>获取AddressBook使用权限</h4><p>像使用相机、推送一样, 访问AddressBook同样需要获取权限。</p>
<p>在获取权限之前，我们需要创建一个AddressBook的引用，用来做后续操作。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">static ABAddressBookRef r;</div><div class="line"></div><div class="line">static inline ABAddressBookRef getAddressBookRef() &#123;</div><div class="line">    static dispatch_once_t onceToken;</div><div class="line">    dispatch_once(&amp;onceToken, ^&#123;</div><div class="line">        CFErrorRef errorRef;</div><div class="line">        r = ABAddressBookCreateWithOptions(NULL, &amp;errorRef);</div><div class="line">        if ( errorRef ) &#123;</div><div class="line">            ILog(@&quot;%@&quot;, (__bridge NSString *)CFErrorCopyFailureReason(errorRef));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    return r;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>ABAddressBookRef，作为后续使用的通讯录引用，这里写作单例。或者可以写作单例的属性，但只需初始化一次。</p>
<p><code>ABAddressBookCreateWithOptions</code>通过参数创建, options暂时为预留字段，但是AddressBook在9.0被弃用，估计不会被使用了。</p>
<p>在获取到引用之后，我们应先查询AddressBook的访问状态：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">Boolean needRequestAccess() &#123;</div><div class="line">    ABAuthorizationStatus s = ABAddressBookGetAuthorizationStatus();</div><div class="line">    if ( s == kABAuthorizationStatusDenied ||</div><div class="line">        s == kABAuthorizationStatusRestricted ) &#123;</div><div class="line">            alert(@&quot;提示&quot;, @&quot;&quot;);</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">    if ( s != kABAuthorizationStatusAuthorized ) &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">    return false;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>推荐使用switch-case来判断状态。如果结果为<code>kABAuthorizationStatusAuthorized</code>表示可以正常访问。要注意的是，如果用户拒绝了首次的请求，那么需要用户在<code>设置-隐私-通讯录</code>中手动打开App使用通讯录的权限。</p>
<p>如果结果为<code>kABAuthorizationStatusNotDetermined</code>意味着我们需要请求访问权限:</p>
<p><code>Restricted</code>意味着系统决定了访问权限，用户不能修改。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void requestAddressBookAccess (ABAddressBookRequestAccessCompletionHandler handler) &#123;</div><div class="line">    ABAddressBookRequestAccessWithCompletion(getAddressBookRef(), handler);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>综合起来的调用:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">void initAddressBook (void (^shouldAccessAddressBook)(Boolean boo)) &#123;</div><div class="line">    if ( needRequestAccess() ) &#123;</div><div class="line">        requestAddressBookAccess(^(bool granted, CFErrorRef error) &#123;</div><div class="line">            if ( granted ) &#123;</div><div class="line">                shouldAccess = true;</div><div class="line">            &#125;</div><div class="line">            shouldAccessAddressBook(granted);</div><div class="line">        &#125;);</div><div class="line">    &#125; else &#123;</div><div class="line">        shouldAccess = true;</div><div class="line">        shouldAccessAddressBook(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>非常简单的，我们获得了通讯录的访问权限。</p>
<h4 id="用户的查询"><a href="#用户的查询" class="headerlink" title="用户的查询"></a>用户的查询</h4><p>用户的查询非常简单；</p>
<ul>
<li>ABAddressBookGetPersonCount：获取总人数</li>
<li>ABAddressBookGetPersonWithRecordID：通过RecordID获取单个人，recordID可以通过<code>ABRecordGetRecordID</code>获得</li>
<li>ABAddressBookCopyArrayOfAllPeople：获取全部联系人数组</li>
<li>ABAddressBookCopyArrayOfAllPeopleInSource：获取记录引用中所有的练习嗯</li>
<li>ABAddressBookCopyArrayOfAllPeopleInSourceWithSortOrdering：带着排序参数</li>
<li>ABAddressBookCopyPeopleWithName：拷贝符合该名称的联系人</li>
</ul>
<p>获取联系人的数量:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">CFIndex i = ABAddressBookGetPersonCount(getAddressBookRef());</div><div class="line">printf(&quot;AddressBook: has %ld Person&quot;, i);</div></pre></td></tr></table></figure>
<p>获取联系人:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">CFArrayRef ref = ABAddressBookCopyArrayOfAllPeople(getAddressBookRef());</div><div class="line">    </div><div class="line">ABRecordRef pr = CFArrayGetValueAtIndex(ref, 0);</div><div class="line">ILog(@&quot;%@&quot;, ABRecordCopyValue(pr, kABPersonFirstNameProperty));</div></pre></td></tr></table></figure>
<p>获取联系人组使用<code>ABAddressBookCopyArrayOfAllGroups</code>即可。然后通过<code>ABAddressBookCopyArrayOfAllPeopleInSource</code>即可获得组内联系人。</p>
<h4 id="用户信息的修改与删除"><a href="#用户信息的修改与删除" class="headerlink" title="用户信息的修改与删除"></a>用户信息的修改与删除</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">CFArrayRef ref = ABAddressBookCopyArrayOfAllPeople(getAddressBookRef());</div><div class="line">    </div><div class="line">ABRecordRef pr = CFArrayGetValueAtIndex(ref, 0);</div><div class="line">ILog(@&quot;%@&quot;, ABRecordCopyValue(pr, kABPersonFirstNameProperty));</div><div class="line">    </div><div class="line">if ( ABRecordSetValue(pr, kABPersonFirstNameProperty, (__bridge CFStringRef)@&quot;Hello&quot;, nil) ) &#123;</div><div class="line">    if ( ABAddressBookSave(getAddressBookRef(), nil) ) &#123;</div><div class="line">        ILog(@&quot;Succeed!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    </div><div class="line">if ( ABAddressBookRemoveRecord(getAddressBookRef(), pr, nil) ) &#123;</div><div class="line">    if ( ABAddressBookSave(getAddressBookRef(), nil) ) &#123;</div><div class="line">        ILog(@&quot;Remove Succeed!&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><code>ABRecordCopyValue</code>用来通过<code>ABPropertyID</code>获取相应属性的内容, 具体的ID在<code>ABPerson.h</code>中有详细列表。</p>
<p><code>ABRecordSetValue</code>用来通过<code>ABPropertyID</code>设置相应的属性内容，同时返回bool值以供判段。参数中的error已经不在使用。</p>
<p>在修改后，切记保存修改，使用<code>ABAddressBookSave</code>做保存，在这之前，可以使用<code>ABAddressBookHasUnsavedChanges</code>判断是否存在未保存的修改。</p>
<p>使用<code>ABAddressBookRemoveRecord</code>来移除记录。</p>
<h4 id="监听其他应用对AddressBook的修改"><a href="#监听其他应用对AddressBook的修改" class="headerlink" title="监听其他应用对AddressBook的修改"></a>监听其他应用对AddressBook的修改</h4><p>在操作AddressBook的同时，有可能在后台的时候被其他程序所修改，addressBook提供了监听方法:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">void callBack(ABAddressBookRef addressBook, CFDictionaryRef info, void *context)  &#123;</div><div class="line">    ILog(@&quot;AddressBook has changed in another application.&quot;);</div><div class="line">&#125;;</div><div class="line"></div><div class="line">void handleChange() &#123;</div><div class="line">    ABAddressBookRegisterExternalChangeCallback(getAddressBookRef(), callBack, nil);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在收到监听后我们需要做相应的处理，比如： 是否其他改动与我们的改动有重叠等。</p>
<h4 id="注意点"><a href="#注意点" class="headerlink" title="注意点"></a>注意点</h4><ul>
<li>在设置值的时候，可以使用<code>ABMultiValueRef</code>设置多个值，比如说多个电话。</li>
<li>在不使用的时候，要使用<code>ABAddressBookUnregisterExternalChangeCallback</code>取消对AddressBook的监听。</li>
</ul>
<p>Q&amp;A：</p>
<p>Q：如何在删除完联系人的多个电话后，直接删除联系人？</p>
<p>A：通过propertyID获取到电话的信息后，做简单的判断就可以实现。如果仅存这一条电话记录，那么在删除的同时也删除掉联系人即可。</p>
<h4 id="附"><a href="#附" class="headerlink" title="附"></a>附</h4><p>本文全部的代码</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"Ins_AddressBook.h"</span></span></div><div class="line"></div><div class="line"><span class="class"><span class="keyword">@implementation</span> <span class="title">InsAddressBook</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> Boolean shouldAccess;</div><div class="line"><span class="keyword">static</span> ABAddressBookRef r;</div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">inline</span> ABAddressBookRef getAddressBookRef() &#123;</div><div class="line">    <span class="keyword">static</span> <span class="built_in">dispatch_once_t</span> onceToken;</div><div class="line">    <span class="built_in">dispatch_once</span>(&amp;onceToken, ^&#123;</div><div class="line">        <span class="built_in">CFErrorRef</span> errorRef;</div><div class="line">        r = ABAddressBookCreateWithOptions(<span class="literal">NULL</span>, &amp;errorRef);</div><div class="line">        <span class="keyword">if</span> ( errorRef ) &#123;</div><div class="line">            ILog(<span class="string">@"%@"</span>, (__bridge <span class="built_in">NSString</span> *)<span class="built_in">CFErrorCopyFailureReason</span>(errorRef));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    <span class="keyword">return</span> r;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> requestAddressBookAccess (ABAddressBookRequestAccessCompletionHandler handler) &#123;</div><div class="line">    ABAddressBookRequestAccessWithCompletion(getAddressBookRef(), handler);</div><div class="line">&#125;</div><div class="line"></div><div class="line">Boolean needRequestAccess() &#123;</div><div class="line">    ABAuthorizationStatus s = ABAddressBookGetAuthorizationStatus();</div><div class="line">    <span class="keyword">if</span> ( s == kABAuthorizationStatusDenied ||</div><div class="line">        s == kABAuthorizationStatusRestricted ) &#123;</div><div class="line">            alert(<span class="string">@"提示"</span>, <span class="string">@"你之前已经拒绝了程序的访问权限, 请在设置-隐私-通讯录中手动打开, 并重新启动应用。"</span>);</div><div class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> ( s != kABAuthorizationStatusAuthorized ) &#123;</div><div class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> initAddressBook (<span class="keyword">void</span> (^shouldAccessAddressBook)(Boolean boo)) &#123;</div><div class="line">    <span class="keyword">if</span> ( needRequestAccess() ) &#123;</div><div class="line">        requestAddressBookAccess(^(<span class="keyword">bool</span> granted, <span class="built_in">CFErrorRef</span> error) &#123;</div><div class="line">            <span class="keyword">if</span> ( granted ) &#123;</div><div class="line">                shouldAccess = <span class="literal">true</span>;</div><div class="line">            &#125;</div><div class="line">            shouldAccessAddressBook(granted);</div><div class="line">        &#125;);</div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">        shouldAccess = <span class="literal">true</span>;</div><div class="line">        shouldAccessAddressBook(<span class="literal">true</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> callBack(ABAddressBookRef addressBook, <span class="built_in">CFDictionaryRef</span> info, <span class="keyword">void</span> *context)  &#123;</div><div class="line">    ILog(<span class="string">@"AddressBook has changed in another application."</span>);</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">void</span> handleChange() &#123;</div><div class="line">    ABAddressBookRegisterExternalChangeCallback(getAddressBookRef(), callBack, <span class="literal">nil</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> getPerson () &#123;</div><div class="line">    <span class="built_in">CFIndex</span> i = ABAddressBookGetPersonCount(getAddressBookRef());</div><div class="line">    printf(<span class="string">"AddressBook: has %ld Person"</span>, i);</div><div class="line">    <span class="built_in">CFArrayRef</span> ref = ABAddressBookCopyArrayOfAllPeople(getAddressBookRef());</div><div class="line">    </div><div class="line">    ABRecordRef pr = <span class="built_in">CFArrayGetValueAtIndex</span>(ref, <span class="number">0</span>);</div><div class="line">    ILog(<span class="string">@"%@"</span>, ABRecordCopyValue(pr, kABPersonFirstNameProperty));</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( ABRecordSetValue(pr, kABPersonFirstNameProperty, (__bridge <span class="built_in">CFStringRef</span>)<span class="string">@"Hello"</span>, <span class="literal">nil</span>) ) &#123;</div><div class="line">        <span class="keyword">if</span> ( ABAddressBookSave(getAddressBookRef(), <span class="literal">nil</span>) ) &#123;</div><div class="line">            ILog(<span class="string">@"Succeed!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    <span class="keyword">if</span> ( ABAddressBookRemoveRecord(getAddressBookRef(), pr, <span class="literal">nil</span>) ) &#123;</div><div class="line">        <span class="keyword">if</span> ( ABAddressBookSave(getAddressBookRef(), <span class="literal">nil</span>) ) &#123;</div><div class="line">            ILog(<span class="string">@"Remove Succeed!"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">- (<span class="keyword">instancetype</span>)init &#123;</div><div class="line">    <span class="keyword">self</span> = [<span class="keyword">super</span> init];</div><div class="line">    <span class="keyword">if</span> ( <span class="keyword">self</span> ) &#123;</div><div class="line">        initAddressBook(^(Boolean boo)&#123;</div><div class="line">            <span class="keyword">if</span> ( boo ) &#123;</div><div class="line">                ILog(<span class="string">@"Get access to addressBook"</span>)</div><div class="line">                handleChange();</div><div class="line">                getPerson();</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                ILog(<span class="string">@"Without access to addressBook"</span>)</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">self</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line">DEF_SINGLETON_AUTOLOAD(InsAddressBook)</div><div class="line"></div><div class="line"><span class="keyword">@end</span></div></pre></td></tr></table></figure>
<h4 id="AddressBookUI-framework"><a href="#AddressBookUI-framework" class="headerlink" title="AddressBookUI.framework"></a>AddressBookUI.framework</h4><p>相比而言，使用UI则简单的多，直接进入创建一个新的用户：</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ABNewPersonViewController * pv = [[ABNewPersonViewController alloc] init];</div><div class="line">pv.newPersonViewDelegate = <span class="keyword">self</span>;</div><div class="line">[getRootNc() presentViewController:INS_NAV(pv) animated:<span class="literal">YES</span> completion:<span class="literal">nil</span>];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">- (void) newPersonViewController: (ABNewPersonViewController *) newPersonView</div><div class="line">        didCompleteWithNewPerson: (ABRecordRef) person &#123;</div><div class="line">    [newPersonView.navigationController dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>创建界面与其代理方法，当然在<code>ABNewPersonViewController</code>中，有写参数我们可以设置，意义很简单，可以通过我们上边AddressBook.framework中获得的一些引用穿进去，或者在创建用户之前直接设置一个用户的基础信息。这里不做赘述。</p>
<h4 id="选择一个用户"><a href="#选择一个用户" class="headerlink" title="选择一个用户"></a>选择一个用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ABPeoplePickerNavigationController * pv = [[ABPeoplePickerNavigationController alloc] init];</div><div class="line">pv.peoplePickerDelegate = self;</div><div class="line">[getRootNc() presentViewController:pv animated:YES completion:nil];</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">- (void)peoplePickerNavigationController:(ABPeoplePickerNavigationController*)peoplePicker didSelectPerson:(ABRecordRef)person &#123;</div><div class="line">    </div><div class="line">&#125;</div><div class="line"></div><div class="line">// Called after the user has pressed cancel.</div><div class="line">- (void)peoplePickerNavigationControllerDidCancel:(ABPeoplePickerNavigationController *)peoplePicker &#123;</div><div class="line">    [peoplePicker dismissViewControllerAnimated:YES completion:nil];</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<blockquote>
<p>注：这里我没有低版本的测试环境，但是可以看到，选中人的方法在8.0后才被使用，所以低版本的童鞋应该主动尝试原本被弃用的2个方法。</p>
</blockquote>
<h4 id="展示用户"><a href="#展示用户" class="headerlink" title="展示用户"></a>展示用户</h4><p><code>ABPersonViewController</code></p>
<blockquote>
<p>If displayedPerson has been added to an ABAddressBook, then the addressBook property will be updated to use the displayedPerson’s ABAddressBook.</p>
</blockquote>
<p>可以设置的属性包括：允许编辑、允许操作（短信、邮件等），允许展示连接的联系人，设置属性高亮等。也比较方便。</p>
<h4 id="信息的完善"><a href="#信息的完善" class="headerlink" title="信息的完善"></a>信息的完善</h4><p><code>ABUnknownPersonViewController</code></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ABUnknownPersonViewController *un = [[ABUnknownPersonViewController alloc] init];</div><div class="line">un.displayedPerson = person; // 展示的联系人</div><div class="line">un.allowsAddingToAddressBook = YES; // 允许添加到通讯录中</div><div class="line">[getRootNc() presentViewController:INS_NAV(un) animated:YES completion:nil];</div></pre></td></tr></table></figure>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>AddressBook.framework、AdressBookUI.framework还是可以满足一些基本需求，但是由于是c库，并且功能不是很完善，所以在iOS9.0之后苹果使用Contacts.framework来代替AddressBook.framework。ContactsFramework是一整套OC的库，理解起来也很简单。</p>
<p><img src="http://um.devdylan.cn/contactsFramework.png" alt=""></p>
<p>这是ContactsFramework中包含的一些头文件，在使用AddressBook的时候，基本所有的方法都在后边写了使用ContactsFramework中什么方法来代替。</p>
<p><code>CNContact</code>以及<code>CNGroup</code>分别代表了联系人与联系人组，比之前的Record引用清晰了许多。</p>
<p><code>CNContactFetchRequest</code>以及<code>CNSaveRequest</code>方便的提供了查询以及保存等操作。</p>
<p><code>CNSaveRequest</code>则提供了方便直观的方法去保存用户。</p>
<p>然后整个框架都清晰了很多，基本的使用方法如下：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">CNContactStore * c;</div><div class="line">CNAuthorizationStatus s;</div><div class="line">CNContactFetchRequest * f;</div><div class="line">NSError * e;</div><div class="line">    </div><div class="line">s = [CNContactStore authorizationStatusForEntityType:CNEntityTypeContacts];</div><div class="line">c = [[CNContactStore alloc] init];</div><div class="line">    </div><div class="line">if ( s != CNAuthorizationStatusAuthorized ) &#123;</div><div class="line">        ILog(@&quot;Un Authorized !&quot;);</div><div class="line">        </div><div class="line">        [c requestAccessForEntityType:CNEntityTypeContacts completionHandler:^(BOOL granted, NSError * error) &#123;</div><div class="line">            </div><div class="line">        &#125;];</div><div class="line">&#125;</div><div class="line">    </div><div class="line">    // 根据`CNContact`中的属性单独获得，比如 @[CNContactGivenNameKey, CNContactMiddleNameKey, ...]</div><div class="line">f = [[CNContactFetchRequest alloc] initWithKeysToFetch:@[CNContactMiddleNameKey, CNContactEmailAddressesKey, CNContactPhoneNumbersKey]];</div><div class="line">    </div><div class="line">BOOL b = [c enumerateContactsWithFetchRequest:f error:&amp;e usingBlock:^(CNContact * contact, BOOL * stop) &#123;</div><div class="line">        </div><div class="line">        /*</div><div class="line">         &lt;CNContact: 0x7f8f4fb86dc0: identifier=41592D45-CE20-44C8-95C5-C1FE464474A5:ABPerson, givenName=(not fetched), familyName=(not fetched), organizationName=(not fetched), phoneNumbers=(</div><div class="line">         &quot;&lt;CNLabeledValue: 0x7f8f4fb88dc0: identifier=243FA6B4-33AE-43A6-8567-AFE11518BBCC, label=_$!&lt;Home&gt;!$_, value=&lt;CNPhoneNumber: 0x7f8f4fb88ca0: countryCode=us, digits=+8613088488288&gt;&gt;&quot;</div><div class="line">         ), emailAddresses=(</div><div class="line">         &quot;&lt;CNLabeledValue: 0x7f8f4fb87c30: identifier=3B1CADF7-967B-41A0-A575-EB0B7BA1BB5B, label=_$!&lt;Home&gt;!$_, value=dylan@china.com&gt;&quot;</div><div class="line">         ), postalAddresses=(not fetched)&gt;</div><div class="line">         */</div><div class="line">&#125;];</div><div class="line">    </div><div class="line">if ( b ) &#123;</div><div class="line">        ILog(@&quot;Search success.&quot;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>当然不能所有的代码全部我贴出来，关于保存等功能，大家自行探索。</p>
<p>2016-8-23 上午10：00 copyRight@dylan@china.com 欢迎转载。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;AddressBook-framework-AddressBookUI-framework&quot;&gt;&lt;a href=&quot;#AddressBook-framework-AddressBookUI-framework&quot; class=&quot;headerlink&quot; title=&quot;AddressBook.framework/AddressBookUI.framework&quot;&gt;&lt;/a&gt;AddressBook.framework/AddressBookUI.framework&lt;/h4&gt;&lt;p&gt;9.0之后, &lt;code&gt;AddressBook.framework&lt;/code&gt;被&lt;code&gt;Contacts.framework&lt;/code&gt;代替。但是目前大部分的应用软件起支撑的版本是iOS6.0或7.0, 所以&lt;code&gt;AddressBook&lt;/code&gt;还大有用处。之前在简书的文章&lt;a href=&quot;http://www.jianshu.com/p/bf895054ed69/comments/3766914#comment-3766914&quot;&gt;AddressBook, AddressBookUI&lt;/a&gt;中有提及, 但是由于是转载, 所以代码不是很清晰, 而且有一些读者希望得到清晰的代码以及详细的功能解释, 所以在这里把&lt;code&gt;AddressBook.framework&lt;/code&gt;以及&lt;code&gt;AddressBookUI.framework&lt;/code&gt;重新做一下详细的使用方法介绍。&lt;/p&gt;
&lt;p&gt;这篇文章先介绍&lt;code&gt;AddressBook.framework&lt;/code&gt;。 &lt;code&gt;AddressBookUI&lt;/code&gt;以及&lt;code&gt;Contacts.framework&lt;/code&gt;也会补上。&lt;/p&gt;
    
    </summary>
    
    
      <category term="Frameworks" scheme="https://wilddylan.github.io/tags/Frameworks/"/>
    
  </entry>
  
  <entry>
    <title>What’s New in iOS 10</title>
    <link href="https://wilddylan.github.io/2016/08/22/What%E2%80%99s-New-in-iOS-10/"/>
    <id>https://wilddylan.github.io/2016/08/22/What’s-New-in-iOS-10/</id>
    <published>2016-08-22T01:30:09.000Z</published>
    <updated>2017-02-04T09:01:37.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-New-in-iOS-10-0"><a href="#What’s-New-in-iOS-10-0" class="headerlink" title="What’s New in iOS 10.0"></a>What’s New in iOS 10.0</h1><ul>
<li>Table of Contents</li>
</ul>
<ul>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008244-SW1" target="_blank" rel="external">Introduction</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW1" target="_blank" rel="external">iOS 10.0</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_3.html#//apple_ref/doc/uid/TP40016661-SW1" target="_blank" rel="external">iOS 9.3</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_2.html#//apple_ref/doc/uid/TP40016637-SW1" target="_blank" rel="external">iOS 9.2</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_1.html#//apple_ref/doc/uid/TP40016572-SW1" target="_blank" rel="external">iOS 9.1</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-SW1" target="_blank" rel="external">iOS 9.0</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_4.html#//apple_ref/doc/uid/TP40015986-SW1" target="_blank" rel="external">iOS 8.4</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_3.html#//apple_ref/doc/uid/TP40015154-SW1" target="_blank" rel="external">iOS 8.3</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_2.html#//apple_ref/doc/uid/TP40015039-SW1" target="_blank" rel="external">iOS 8.2</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_1.html#//apple_ref/doc/uid/TP40015009-SW1" target="_blank" rel="external">iOS 8.1</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8.html#//apple_ref/doc/uid/TP40014205-SW1" target="_blank" rel="external">iOS 8.0</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS7_1.html#//apple_ref/doc/uid/TP40013916-SW1" target="_blank" rel="external">iOS 7.1</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW1" target="_blank" rel="external">iOS 7.0</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS6_1.html#//apple_ref/doc/uid/TP40012873-SW1" target="_blank" rel="external">iOS 6.1</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS6.html#//apple_ref/doc/uid/TP40011812-SW1" target="_blank" rel="external">iOS 6.0</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS5_1.html#//apple_ref/doc/uid/TP40012663-SW1" target="_blank" rel="external">iOS 5.1</a></li>
<li><a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS5.html#//apple_ref/doc/uid/TP30915195-SW1" target="_blank" rel="external">iOS 5.0</a></li>
</ul>
<h1 id="iOS-10-0"><a href="#iOS-10-0" class="headerlink" title="iOS 10.0"></a>iOS 10.0</h1><p>This article summarizes the key developer-related features introduced in iOS 10, which runs on currently shipping iOS devices. The article also lists the documents that describe new features in more detail.</p>
<p>For late-breaking news and information about known issues, see Release Notes at <a href="https://developer.apple.com/ios/download/" target="_blank" rel="external">https://developer.apple.com/ios/download/</a>. For the complete list of new APIs added in iOS 10, see <em>iOS 10.0 API Diffs</em>. For more information on new devices, see <em>iOS Device Compatibility Reference</em>.</p>
<p>To learn about what’s new in Swift, see <a href="https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/WhatsNewXcode/introduction.html#//apple_ref/doc/uid/TP40004635-SW3" target="_blank" rel="external">Swift Language</a> and <em>The Swift Programming Language (Swift 3)</em>.</p>
<a id="more"></a>
<h2 id="SiriKit"><a href="#SiriKit" class="headerlink" title="SiriKit"></a>SiriKit</h2><p>Apps that provide services in specific domains can use SiriKit to make those services available from Siri on iOS. Making your services available requires creating one or more app extensions using the Intents and Intents UI frameworks. SiriKit supports services in the following domains:</p>
<ul>
<li>Audio or video calling</li>
<li>Messaging</li>
<li>Sending or receiving payments</li>
<li>Searching photos</li>
<li>Booking a ride</li>
<li>Managing workouts</li>
</ul>
<p>When the user makes a request involving your service, SiriKit sends your extension an intent object, which describes the user’s request and provides any data related to that request. You use the intent object to provide an appropriate response object, which includes details of how you can handle the user’s request. Siri typically handles all user interactions, but you can use an extension to provide custom UI that incorporates branding or additional information from your app.</p>
<p>SiriKit also provides a mechanism you can use to tell the system about the interactions and activities that occur within your app.When you tell the system about these interactions, the system can determine if your app can handle the user’s current request and, if it can, pass the request to your app. In addition to the intent, SiriKit defines an interaction object, which combines an intent with information about the intent-handling process, including details such as the start time and duration of a specific occurrence of the process. If your app is registered as capable of handling an activity that has the same name as an intent, the system can launch your app with an interaction object containing that intent even if you don’t provide an Intents app extension.</p>
<p>Ride booking is supported by both Maps and Siri, and users can also make restaurants reservations with Maps. Your Intents extension handles interactions that originate from the Maps app in the same way that it handles requests coming from Siri. If you customize the user interface, your Intents UI extension can also configure itself differently, depending on whether the request came from Siri or Maps.</p>
<p>To learn how to support SiriKit and give users new ways to access your services, read <em>SiriKit Programming Guide</em>. When you’re ready to implement the app extensions that handle various intents, see <em>Intents Framework Reference</em> and <em>Intents UI Framework Reference</em>.</p>
<h2 id="Proactive-Suggestions"><a href="#Proactive-Suggestions" class="headerlink" title="Proactive Suggestions"></a>Proactive Suggestions</h2><p>iOS 10 introduces new ways to increase engagement with your app by helping the system suggest your app to users at appropriate times. If you adopted app search in your iOS 9 app, you gave users access to activities and content deep within your app through Spotlight and Safari search results, Handoff, and Siri suggestions. In iOS 10 and later, you can provide information about what users do in your app, which helps the system promote your app in additional places, such as the keyboard with QuickType suggestions, Maps and CarPlay, the app switcher, Siri interactions, and (for media playing apps) the lock screen. These opportunities for enhanced integration with the system are supported by a collection of technologies, such as <code>NSUserActivity</code>, web markup defined by <a href="http://schema.org/" target="_blank" rel="external">Schema.org</a>, and APIs defined in the Core Spotlight, MapKit, UIKit, and Media Player frameworks.</p>
<p>In iOS 10, the <code>NSUserActivity</code> object includes the <code>mapItem</code> property, which lets you provide location information that can be used in other contexts. For example, if your app displays hotel reviews, you can use the <code>mapItem</code> property to hold the location of the hotel the user is viewing so that when the user switches to a travel planning app, that hotel’s location is automatically available. And if you support app search, you can use the new text-based address component properties in <code>CSSearchableItemAttributeSet</code>, such as <code>thoroughfare</code> and <code>postalCode</code>, to fully specify locations to which the user may want to go. Note that when you use the <code>mapItem</code> property, the system automatically populates the <code>contentAttributeSet</code> property, too.</p>
<p>To share a location with the system, be sure to specify <code>latitude</code> and <code>longitude</code> values, in addition to values for the address component properties in<code>CSSearchableItemAttributeSet</code>. It’s also recommended that you supply a value for the <code>namedLocation</code> property, so that users can view the name of the location, and the<code>phoneNumbers</code> property, so that users can use Siri to initiate a call to the location.</p>
<p>In iOS 9, adding markup to the structured data on your website enriched the content that users see in Spotlight and Safari search results. In iOS 10, you can use location-related vocabulary defined at <a href="http://schema.org/" target="_blank" rel="external">Schema.org</a>, such as <a href="http://schema.org/PostalAddress" target="_blank" rel="external">PostalAddress</a>, to further enhance the user’s experience. For example, if users view a location described on your website, the system can suggest the same location when users switch to Maps. Note that Safari supports both JSON-LD and Microdata encodings of <a href="http://schema.org/" target="_blank" rel="external">Schema.org</a> vocabularies.</p>
<p>UIKit introduces the <code>textContentType</code> property in the <code>UITextInputTraits</code> protocol so that you can specify the semantic meaning of the content you expect users to enter in a text area. When you provide this information, the system can in some cases automatically select an appropriate keyboard and improve keyboard corrections and proactive integration with information supplied from other apps and websites. For example, if you use <code>UITextContentTypeFullStreetAddress</code> to tell the system that you expect users to enter a complete address in a text field, the system can suggest the address of a location the user was recently viewing.</p>
<p>If your app plays media and you use the <code>MPPlayableContentManager</code> APIs, iOS 10 helps you let users view album art and play media through your app on the lock screen.</p>
<p>If your ride-sharing app uses the <code>MKDirectionsRequest</code> API, iOS 10 can display it in the app switcher when the user is likely to want a ride. To register as a ride-share provider, specify the <code>MKDirectionsModeRideShare</code> value for the <a href="https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW33" target="_blank" rel="external">MKDirectionsApplicationSupportedModes</a> key in your <code>Info.plist</code> file. If your app supports only ride sharing, the system suggests your app with text that begins “Get a ride to…”; if your app supports both ride sharing and another routing type (such as Automobile or Bike), the system uses the text “Get directions to…”. Note that the <code>MKMapItem</code> object you receive may not include latitude and longitude information and would require geocoding.</p>
<h2 id="Integrating-with-the-Messages-App"><a href="#Integrating-with-the-Messages-App" class="headerlink" title="Integrating with the Messages App"></a>Integrating with the Messages App</h2><p>In iOS 10, you can create app extensions that interact with the Messages app and let users send text, stickers, media files, and interactive messages. You can also support interactive messages that update as each recipient responds to the message. You can create two types of app extensions:</p>
<ul>
<li><p>A <em>Sticker pack</em> provides a set of stickers that users can add to their Messages content.</p>
</li>
<li><p>An <em>iMessage app</em> lets you present a custom user interface within the Messages app, create a sticker browser, include text, stickers, and media files within a conversation, and create, send, and update interactive messages.</p>
<p>An iMessage app can also help users search images that you host on your app’s related website while they’re in the Messages app.</p>
</li>
</ul>
<p>You can create a Sticker pack without writing any code: Simply drag images into the Sticker Pack folder inside the Stickers asset catalog in Xcode.</p>
<p>To develop an iMessage app, you use the APIs in the Messages framework (<code>Messages.framework</code>). To learn about the Messages framework, see <em>Messages Framework Reference</em>. For general information about creating app extensions, see <em>App Extension Programming Guide</em>.</p>
<p>If your app provides images for sharing in Messages and you want users to be able to use the Spotlight popular image search (that is, “#images”) to search these images without leaving the Messages app, first create an iMessage app. Then follow these steps:</p>
<ul>
<li>Add the <code>com.apple.developer.associated-domains</code> key to your app’s entitlements. Include a list of the web domains that host the images you want to make searchable. For each domain, specify the <code>spotlight-image-search</code> service.</li>
<li>Add an <code>apple-app-site-association</code> file to your website. Add a dictionary for the <code>spotlight-image-search</code> service and include your app ID, which is the team ID or app ID prefix, followed by the bundle ID. You can also specify up to 500 paths and patterns that should be included for indexing by the Spotlight popular image search (for some examples of website paths, see the universal links examples in <a href="https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/AppSearch/UniversalLinks.html#//apple_ref/doc/uid/TP40016308-CH12-SW4" target="_blank" rel="external">Creating and Uploading the Association File</a>).</li>
<li>Allow crawling by Applebot (to learn more, see <a href="https://support.apple.com/en-us/HT204683" target="_blank" rel="external">About Applebot</a>).</li>
</ul>
<h2 id="User-Notifications"><a href="#User-Notifications" class="headerlink" title="User Notifications"></a>User Notifications</h2><p>iOS 10 introduces the User Notifications framework (<code>UserNotifications.framework</code>), which supports the delivery and handling of local and remote notifications. You use the classes of this framework to schedule the delivery of local notifications based on specific conditions, such as time or location. Apps and app extensions can use this framework to receive and potentially modify local and remote notifications when they are delivered to the user’s device.</p>
<p>Also introduced in iOS 10, the User Notifications UI framework (<code>UserNotificationsUI.framework</code>) lets you customize the appearance of local and remote notifications when they appear on the user’s device. You use this framework to define an app extension that receives the notification data and provides the corresponding visual representation. Your extension can also respond to custom actions associated with those notifications.</p>
<h2 id="Speech-Recognition"><a href="#Speech-Recognition" class="headerlink" title="Speech Recognition"></a>Speech Recognition</h2><p>iOS 10 introduces a new API that supports continuous speech recognition and helps you build apps that can recognize speech and transcribe it into text. Using the APIs in the Speech framework (<code>Speech.framework</code>), you can perform speech transcription of both real-time and recorded audio. For example, you can get a speech recognizer and start simple speech recognition using code like this:</p>
<table>
<thead>
<tr>
<th><code>let recognizer = SFSpeechRecognizer()</code></th>
</tr>
</thead>
<tbody>
<tr>
<td><code>let request = SFSpeechURLRecognitionRequest(url: audioFileURL)</code></td>
</tr>
<tr>
<td><code>recognizer?.recognitionTask(with: request, resultHandler: { (result, error) in</code></td>
</tr>
<tr>
<td><code>print (result?.bestTranscription.formattedString)</code></td>
</tr>
<tr>
<td><code>})</code></td>
</tr>
</tbody>
</table>
<p>As with accessing other types of protected data, such as Calendar and Photos data, performing speech recognition requires the user’s permission (for more information about accessing protected data classes, see <a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW3" target="_blank" rel="external">Security and Privacy Enhancements</a>). In the case of speech recognition, permission is required because data is transmitted and temporarily stored on Apple’s servers to increase the accuracy of speech recognition. To request the user’s permission, you must add the <code>NSSpeechRecognitionUsageDescription</code> key to your app’s <code>Info.plist</code> file.</p>
<p>When you adopt speech recognition in your app, be sure to indicate to users that their speech is being recognized, and that they should not make sensitive utterances at that time.</p>
<h2 id="Wide-Color"><a href="#Wide-Color" class="headerlink" title="Wide Color"></a>Wide Color</h2><p>Most graphics frameworks throughout the system, including Core Graphics, Core Image, Metal, and AVFoundation, have substantially improved support for extended-range pixel formats and wide-gamut color spaces. By extending this behavior throughout the entire graphics stack, it is easier than ever to support devices with a wide color display. In addition, UIKit standardizes on working in a new extended sRGB color space, making it easy to mix sRGB colors with colors in other, wider color gamuts without a significant performance penalty.</p>
<p>Here are some best practices to adopt as you start working with Wide Color.</p>
<ul>
<li>In iOS 10, the <code>UIColor</code> class uses the extended sRGB color space and its initializers no longer clamp raw component values to between <code>0.0</code> and <code>1.0</code>. If your app relies on UIKit to clamp component values (whether you’re creating a color or asking a color for its component values), you need to change your app’s behavior when you link against iOS 10.</li>
<li>When performing custom drawing in a <code>UIView</code> on an iPad Pro (9.7 inch), the underlying drawing environment is configured with an extended sRGB color space.</li>
<li>If your app renders custom image objects, use the new <code>UIGraphicsImageRenderer</code> class to control whether the destination bitmap is created using an extended-range or standard-range format.</li>
<li>If you are performing your own image processing on wide-gamut devices using a lower level API, such as Core Graphics or Metal, you should use an extended range color space and a pixel format that supports 16-bit floating-point component values. When clamping of color values is necessary, you should do so explicitly.</li>
<li>Core Graphics, Core Image, and Metal Performance Shaders provide new options for easily converting colors and images between color spaces.</li>
</ul>
<h2 id="Adapting-to-the-True-Tone-Display"><a href="#Adapting-to-the-True-Tone-Display" class="headerlink" title="Adapting to the True Tone Display"></a>Adapting to the True Tone Display</h2><p>The True Tone display uses ambient light sensors to automatically adjust the color and intensity of the display to match the lighting conditions of the current environment. To ensure that your app works well with the standard color shift provided by True Tone, add the new <a href="https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/iPhoneOSKeys.html#//apple_ref/doc/uid/TP40009252-SW31" target="_blank" rel="external">UIWhitePointAdaptivityStyle</a> key to your <code>Info.plist</code> file to describe your app’s primary visual content. For example:</p>
<ul>
<li>If your app is a photo editing app, color fidelity is more important than automatic adjustment to the environmental white point. In this case, you can use the<code>UIWhitePointAdaptivityStylePhoto</code> style to reduce the strength of True Tone shift applied by the system.</li>
<li>If your app is a reading app, conformance with the environmental white point is helpful to users. In this case, you can use the <code>UIWhitePointAdaptivityStyleReading</code>style to increase the strength of True Tone shift applied by the system.</li>
</ul>
<h2 id="App-Search-Enhancements"><a href="#App-Search-Enhancements" class="headerlink" title="App Search Enhancements"></a>App Search Enhancements</h2><p>iOS 10 and the Core Spotlight framework introduce several enhancements to app search:</p>
<ul>
<li>In-app searching</li>
<li>Search continuation</li>
<li>Crowdsourcing deep link popularity with differential privacy</li>
<li>Visualization of validation results</li>
</ul>
<p>The new <code>CSSearchQuery</code> class supports in-app searches of content that you index using existing Core Spotlight APIs. Using this API can eliminate the need to maintain your own separate search index and lets you take advantage of Spotlight’s powerful search technology and matching rules to allow users to search for content without leaving your app, just as they do within Mail, Messages, and Notes.</p>
<p>In iOS 9, using search APIs (such as Core Spotlight, <code>NSUserActivity</code>, and web markup) to index content within your app let users search for that content using the Spotlight and Safari search interfaces. In iOS 10, you can use new Core Spotlight symbols to let users continue a search they began in Spotlight when they open your app. To enable this feature, add the <code>CoreSpotlightContinuation</code> key to your <code>Info.plist</code> file, give it the value <code>YES</code>, and update your code to handle an activity continuation of type<code>CSQueryContinuationActionType</code>. The user info dictionary in the <code>NSUserActivity</code> object that you receive in your<code>application:continueUserActivity:restorationHandler:</code> method includes the <code>CSSearchQueryString</code> key, whose value is a string that represents the user’s query.</p>
<p>iOS 10 introduces a differentially private way to help improve the ranking of your app’s content in search results. iOS submits a subset of differentially private hashes to Apple servers as users use your app and as <code>NSUserActivity</code> objects that include a deep link URL and have their <code>eligibleForPublicIndexing</code> property set to <code>YES</code> are submitted to iOS. The differential privacy of the hashes allows Apple to count the frequency with which popular deep links are visited without ever associating a user with a link.</p>
<p>When you test your website markup and deep links using the App Search API Validation tool, it now displays a visual representation of your results, including supported markup, such as that defined at <a href="http://schema.org/" target="_blank" rel="external">Schema.org</a>. The validation tool can help you see information that the Applebot web crawler has indexed, such as the title, description, URL, and other supported elements. You can access the validation tool here: <a href="https://search.developer.apple.com/appsearch-validation-tool" target="_blank" rel="external">https://search.developer.apple.com/appsearch-validation-tool</a>. To learn more about supporting deep links and adding markup, see <a href="https://developer.apple.com/library/prerelease/content/documentation/General/Conceptual/AppSearch/WebContent.html#//apple_ref/doc/uid/TP40016308-CH8" target="_blank" rel="external">Mark Up Web Content</a>.</p>
<p>To learn how to make your website’s images searchable within the Messages app, see <a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW4" target="_blank" rel="external">Integrating with the Messages App</a>.</p>
<h2 id="Widget-Enhancements"><a href="#Widget-Enhancements" class="headerlink" title="Widget Enhancements"></a>Widget Enhancements</h2><p>iOS 10 introduces a new design for the lock screen, which now displays widgets. To ensure that your widget looks good on any background, you can specify<code>widgetPrimaryVibrancyEffect</code> or <code>widgetSecondaryVibrancyEffect</code>, as appropriate (use these properties instead of the deprecated<code>notificationCenterVibrancyEffect</code> property). In addition, widgets now include the concept of display mode (represented by <code>NCWidgetDisplayMode</code>), which lets you describe how much content is available and allows users to choose a compact or expanded view.</p>
<h2 id="Apple-Pay-Enhancements"><a href="#Apple-Pay-Enhancements" class="headerlink" title="Apple Pay Enhancements"></a>Apple Pay Enhancements</h2><p>In iOS 10, users can make easy and secure payments using Apple Pay from websites and through interaction with Siri and Maps. For developers, iOS 10 introduces new APIs you can use in code that runs in both iOS and watchOS, the ability to support dynamic payment networks, and a new sandbox testing environment.</p>
<p>iOS 10 introduces new APIs that help you incorporate Apple Pay directly into your website. When you support Apple Pay in your website, users browsing with Safari in iOS or OS X can make payments using their cards in Apple Pay on their iPhone or Apple Watch. To learn more, see <em>ApplePay JS Framework Reference</em>.</p>
<p>The PassKit framework (<code>PassKit.framework</code>) introduces APIs that let you support Apple Pay in places where UIKit is not available. Specifically,<code>PKPaymentAuthorizationController</code> and <code>PKPaymentAuthorizationControllerDelegate</code> enable features provided by <code>PKPaymentAuthorizationViewController</code> and its delegate, but don’t require UIKit. Although the new API is required for supporting Apple Pay in watchOS and in certain intents, it’s recommended that you adopt it in all of your code so that you can provide broad Apple Pay support with a single code base. (To learn more about intents and Siri integration, see <a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW5" target="_blank" rel="external">SiriKit</a>.)</p>
<p>The PassKit framework also adds features that let card issuers present their cards from within their apps. Specifically, the <code>PKPaymentButtonTypeInStore</code> button type lets you display an Apple Pay button for a card and the <code>presentPaymentPass:</code> method lets you programmatically display the card (the <code>presentPaymentPass:</code> method is defined in<code>PKPassLibrary</code>).</p>
<p>When a new payment network becomes available, your app can automatically support the new network without requiring you to modify and recompile your app. The<code>availableNetworks</code> method lets you discover the networks that are available on the user’s device at runtime. In addition, the <code>supportedNetworks</code> property is expanded, so that it can take some payment provider names as an argument. Your app then automatically supports any networks that the payment provider supports. To learn more, see<a href="https://developer.apple.com/apple-pay/" target="_blank" rel="external">https://developer.apple.com/apple-pay/</a>.</p>
<p>iOS 10 introduces a new testing environment that lets you provision test cards directly on the device. The test environment returns encrypted test payment data. To use this environment, follow these steps:</p>
<ol>
<li>Create a testing iCloud Account at iTunes Connect.</li>
<li>Log into that account on your device.</li>
<li>Set the desired region for testing.</li>
<li>Use test cards listed at <a href="https://developer.apple.com/apple-pay/" target="_blank" rel="external">https://developer.apple.com/apple-pay/</a>.</li>
</ol>
<p><strong>Note:</strong> When you switch iCloud accounts, the environment switches automatically.You must still test your payments using actual cards in an production environment.</p>
<h2 id="Security-and-Privacy-Enhancements"><a href="#Security-and-Privacy-Enhancements" class="headerlink" title="Security and Privacy Enhancements"></a>Security and Privacy Enhancements</h2><p>iOS 10 introduces several changes and additions that help you improve the security of your code and maintain the privacy of user data. To learn more about these items, see<code>https://developer.apple.com/security/</code>.</p>
<ul>
<li>The new <code>NSAllowsArbitraryLoadsInWebContent</code> key for your <code>Info.plist</code> file gives you a convenient way to allow arbitrary web page loads to work while retaining ATS protections for the rest of your app.</li>
<li>The SecKey API includes improvements for asymmetric key generation. Use the SecKey API instead of the deprecated Common Data Security Architecture (CDSA) APIs.</li>
<li>The RC4 symmetric cipher suite is now disabled by default for all SSL/TLS connections, and SSLv3 is no longer supported in the Secure Transports API. It’s recommended that you stop using the SHA-1 and 3DES cryptographic algorithms as soon as possible.</li>
<li>The <code>UIPasteboard</code> class supports the Clipboard feature, which lets users copy and paste between devices, and includes API you can use to restrict a pasteboard to a specific device and set an expiration timestamp after which the pasteboard is cleared. Additionally, named pasteboards are no longer persistent—instead, you should use shared containers—and the “Find” pasteboard (that is, the pasteboard identified by the <code>UIPasteboardNameFind</code> constant) is unavailable.</li>
<li>You must statically declare your app’s intended use of protected data classes by including the appropriate purpose string keys in your <code>Info.plist</code> file. For example, you must include the <a href="https://developer.apple.com/library/prerelease/content/documentation/General/Reference/InfoPlistKeyReference/Articles/CocoaKeys.html#//apple_ref/doc/uid/TP40009251-SW15" target="_blank" rel="external">NSCalendarsUsageDescription</a> key to access the user’s Calendar data. If you don’t include the relevant purpose string keys, your app exits when it tries to access the data.</li>
</ul>
<h2 id="CallKit"><a href="#CallKit" class="headerlink" title="CallKit"></a>CallKit</h2><p>The CallKit framework (<code>CallKit.framework</code>) lets VoIP apps integrate with the iPhone UI and give users a great experience. Use this framework to let users view and answer incoming VoIP calls on the lock screen and manage contacts from VoIP calls in the Phone app’s Favorites and Recents views.</p>
<p>CallKit also introduces app extensions that enable call blocking and caller identification. You can create an app extension that can associate a phone number with a name or tell the system when a number should be blocked.</p>
<h2 id="News-Publisher-Enhancements"><a href="#News-Publisher-Enhancements" class="headerlink" title="News Publisher Enhancements"></a>News Publisher Enhancements</h2><p>News Publisher makes it easy to deliver beautifully designed news, magazine, and web content to Apple News using the Apple News Format. Anyone can sign up, from major magazines or news organizations to independent publishers and bloggers. To get started or to learn more about recent updates, visit <a href="https://newsresources.apple.com/" target="_blank" rel="external">https://newsresources.apple.com</a>.</p>
<h2 id="Video-Subscriber-Account"><a href="#Video-Subscriber-Account" class="headerlink" title="Video Subscriber Account"></a>Video Subscriber Account</h2><p>iOS 10 introduces the Video Subscriber Account framework (<code>VideoSubscriberAccount.framework</code>) to help apps that support authenticated streaming or authenticated video on demand (also known as TV Everywhere) authenticate with their cable or satellite TV provider. Using the APIs in this framework can help you support a single sign-in experience in which users sign in once to unlock access in all of the streaming video apps that their subscription supports.</p>
<h2 id="App-Extensions"><a href="#App-Extensions" class="headerlink" title="App Extensions"></a>App Extensions</h2><p>iOS 10 introduces several new extension points for which you can create an app extension, such as:</p>
<ul>
<li>Call Directory</li>
<li>Intents</li>
<li>Intents UI</li>
<li>Messages</li>
<li>Notification Content</li>
<li>Notification Service</li>
<li>Sticker Pack</li>
</ul>
<p>In addition, iOS 10 includes the following enhancements for third-party keyboard app extensions:</p>
<ul>
<li>You can automatically detect the input language of a document by using the <code>documentInputMode</code> property of the <code>UITextDocumentProxy</code> class, and change your keyboard extension to align with that language (if supported). When you detect the input language in this way, you can do per-language keyboard switching such as what is built in to Messages.</li>
<li>The new <code>handleInputModeListFromView:withEvent:</code> method lets a keyboard extension display the system’s keyboard picker menu (that is, the globe key menu).</li>
</ul>
<p>A keyboard extension should position the globe key in the same location as the system globe key for each orientation. Also, if you need to provide a custom key—to enable keyboard settings, for example—you should put this key in the same location as the dictation key in the system keyboard.</p>
<p>To learn more about creating app extensions in general, see <em>App Extension Programming Guide</em>.</p>
<h2 id="Additional-Framework-Changes"><a href="#Additional-Framework-Changes" class="headerlink" title="Additional Framework Changes"></a>Additional Framework Changes</h2><p>In addition to the major changes described above, iOS 10 includes many other improvements.</p>
<h3 id="AVFoundation"><a href="#AVFoundation" class="headerlink" title="AVFoundation"></a>AVFoundation</h3><p>The AVFoundation framework (<code>AVFoundation.framework</code>) includes the following enhancements:</p>
<ul>
<li>The new <code>AVCapturePhotoOutput</code> class provides a unified pipeline for all photography workflows, enabling more sophisticated control and monitoring of the entire capture process and including support for new features such as Live Photos and RAW format capture. You should transition to <code>AVCapturePhotoOutput</code> instead of<code>AVCaptureStillImageOutput</code>, which is deprecated in iOS 10.</li>
<li>The Camera Capture pipeline now enables capture in wide-gamut color formats on supported hardware. By default, an <code>AVCaptureSession</code> automatically configures for wide-color capture when appropriate for your capture workflow—for details, see <em>iOS Device Compatibility Reference</em>.</li>
<li>You no longer need to implement different behaviors for <code>AVPlayerItem</code>, depending on whether the content is a movie file or HLS content. In apps that link on or after iOS 10, you simply set the <code>rate</code> property and AVFoundation determines when enough content has been buffered to play without stalling.</li>
<li>The <code>AVPlayerLooper</code> class makes it easier to loop a particular piece of media content during playback.</li>
<li>Use the <code>AVAssetDownloadURLSession</code> and <code>AVAssetDownloadURLSession</code> classes to download an asset, including an HLS stream, to the device and then play it later. When used in conjunction with FairPlay Streaming, you can download an encrypted HLS stream and play the stream securely at a later time.</li>
</ul>
<h3 id="AVKit"><a href="#AVKit" class="headerlink" title="AVKit"></a>AVKit</h3><p>The AVKit framework (<code>AVKit.framework</code>) includes the <code>updatesNowPlayingInfoCenter</code> property, which indicates when the Now Playing Info Center should be updated.</p>
<h3 id="Core-Data"><a href="#Core-Data" class="headerlink" title="Core Data"></a>Core Data</h3><p>The Core Data framework (<code>CoreData.framework</code>) includes the following enhancements:</p>
<ul>
<li><code>NSPersistentStoreCoordinator</code> now maintains a connection pool for SQLite stores. Root <code>NSManagedObjectContext</code> objects (those without parent MOCs) transparently support concurrent fetching and faulting without serializing against each other.</li>
<li><code>NSManagedObjectContext</code> objects with SQLite stores in WAL journal_mode support a new feature called query generations. These allow a MOC to be pinned to a version of the database at a point in time and perform all future fetching and faulting against that version of the database. Pinned MOCs are moved to the most recent transaction with any save, and query generations do not survive the process’s life time.</li>
<li>The new <code>NSPersistentContainer</code> class provides your app with a high-level integration point that maintains references to your <code>NSPersistentStoreCoordinator</code>,<code>NSManagedObjectModel</code>, and other configuration resources.</li>
<li>Core Data now has tighter integration with Xcode and automatically generates and updates your <code>NSManagedObject</code> subclasses.</li>
<li><code>NSManagedObject</code> includes several additional convenience methods, making it easier to fetch and create subclasses. <code>NSManagedObject</code> subclasses that have a 1:1 relationship with an entity now support <code>entity</code>.</li>
<li>Core Data introduces several API adjustments that provide better integration with Swift, including parameterized <code>NSFetchRequest</code> objects.</li>
</ul>
<p>For more information, see <em>Core Data Framework Reference</em>.</p>
<h3 id="Core-Image"><a href="#Core-Image" class="headerlink" title="Core Image"></a>Core Image</h3><p>The Core Image framework (<code>CoreImage.framework</code>) includes several enhancements.</p>
<p>RAW image file support is now available on iOS devices that use the A8 or A9 CPU. Core Image can decode RAW images produced by several third-party cameras as well as images produced by the iSight camera of supported iOS devices (to learn more, see <a href="https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW2" target="_blank" rel="external">AVFoundation</a>). To process RAW images, use <code>filterWithImageData:options:</code> or<code>filterWithImageURL:options:</code> to create a <code>CIFilter</code> object, adjust RAW processing options with the keys listed in RAW Image Options, and read the processed image from the filter’s <code>outputImage</code> property.</p>
<p>You can now insert custom processing into a Core Image filter graph by using the<code>imageWithExtent:processorDescription:argumentDigest:inputFormat:outputFormat:options:roiCallback:processor:</code> method. This method adds a callback block that Core Image invokes in between filters when processing an image for display or output; in the block, you can access the pixel buffers or Metal textures containing the current state of the processed image and apply your own image processing algorithms.</p>
<p>When using a custom processor block or writing filter kernels, you can process images in a color space other than the Core Image context’s working color space. Use the<code>imageByColorMatchingWorkingSpaceToColorSpace:</code> and <code>imageByColorMatchingColorSpaceToWorkingSpace:</code> methods to convert into and out of your color space before and after processing.</p>
<p>Performance is significantly improved for rendering <code>UIImage</code> objects that are backed by Core Image images (such as those created by using the <code>initWithCIImage:</code> initializer) in a <code>UIImageView</code> object. In addition, a Core Image–backed <code>UIImage</code> object that’s tagged with a wide-gamut color profile renders in a <code>UIImageView</code> object that uses wide-gamut color (on capable iOS devices).</p>
<p>Core Image kernel code can now request a specific output pixel format.</p>
<p>Core Image introduces five new filters:</p>
<ul>
<li><code>CINinePartTiled</code></li>
<li><code>CINinePartStretched</code></li>
<li><code>CIHueSaturationValueGradient</code></li>
<li><code>CIEdgePreserveUpsampleFilter</code></li>
<li><code>CIClamp</code></li>
</ul>
<h3 id="Core-Motion"><a href="#Core-Motion" class="headerlink" title="Core Motion"></a>Core Motion</h3><p>The Core Motion framework (<code>CoreMotion.framework</code>) includes pedometer events, which enable apps to receive fast real-time notifications when users pause and resume while running. On supported devices, apps can use <code>CMPedometer</code> APIs to register to receive live pedometer events while running in the foreground or the background.</p>
<h3 id="Foundation"><a href="#Foundation" class="headerlink" title="Foundation"></a>Foundation</h3><p>The Foundation framework (Foundation.framework) contains many enhancements, such as:</p>
<ul>
<li>The new <code>NSDateInterval</code> class defines a programmatic interface for calculating the duration of a time interval and determining whether a date falls within it, as well as comparing date intervals and checking to see whether they intersect.</li>
<li>The <code>NSLocale</code> class defines many new properties that you can use to get information about a locale and how it can be displayed.</li>
<li>The new <code>NSMeasurement</code> class helps you convert measurements into different units, and calculate the sum or difference between two measurements. The new<code>NSMeasurementFormatter</code> class helps you create localized representations of measurements when displaying quantities of units to the user.</li>
<li>The new <code>NSUnit</code> class and concrete <code>NSDimension</code> subclasses help you represent specific units of measure.</li>
</ul>
<h3 id="GameKit"><a href="#GameKit" class="headerlink" title="GameKit"></a>GameKit</h3><p>The GameKit framework (<code>GameKit.framework</code>) includes the following changes and enhancements:</p>
<ul>
<li>The Game Center app has been removed. If your game implements GameKit features, it must also implement the interface behavior necessary for the user to see these features. For example, if your game supports leaderboards, it could present a <code>GKGameCenterViewController</code> object or read the data directly from Game Center to implement a custom user interface.</li>
<li>A new account type, implemented by the <code>GKCloudPlayer</code> class, supports iCloud-only game accounts.</li>
<li>Game Center provides a new generalized solution for managing persistent storage of data on Game Center. A game session (<code>GKGameSession</code>) has a list of players who are the session’s participants. Your game’s implementation defines when and how a participant stores or retrieves data from the server or exchanges data between players. Game sessions can often replace existing turn-based matches, real-time matches, and persistent save games, and also enable other models of interaction between participants.</li>
</ul>
<h3 id="GameplayKit"><a href="#GameplayKit" class="headerlink" title="GameplayKit"></a>GameplayKit</h3><p>The GameplayKit framework (<code>GameplayKit.framework</code>) includes the following changes and enhancements:</p>
<ul>
<li>Procedural noise generation can be used to generate rich game worlds, create sophisticated natural-looking textures, and add realism to camera movement.</li>
<li>Spatial partitioning lets you partition your game world data so that the data in the game world can be searched efficiently.</li>
<li>A new Monte Carlo strategist (<code>GKMonteCarloStrategist</code>) helps you model games where exhaustive computation of possible moves is difficult.</li>
<li>The new decision tree API can enhance your game-building AI when you adopt decision-tree learning to generalize behavior based on data mining of logged player actions. To learn more, see <code>GKDecisionTree</code> and <code>GKDecisionNode</code>.</li>
<li>The <code>GKAgent3D</code> and <code>GKGraphNode3D</code> classes introduce 3D support to existing agent and path-finding behavior.</li>
<li>The new <code>GKMeshGraph</code> class provides a higher performance alternative to <code>GKObstacleGraph</code>, allowing you to produce more natural-looking output at the cost of less mathematically perfect paths.</li>
<li>The new <code>GKScene</code> and <code>GKSKNodeComponent</code> classes, combined with changes in SpriteKit and the Xcode editor, make integrating GameplayKit with SpriteKit easier than ever.</li>
</ul>
<h3 id="HealthKit"><a href="#HealthKit" class="headerlink" title="HealthKit"></a>HealthKit</h3><p>The HealthKit framework (<code>HealthKit.framework</code>) includes the following changes and enhancements:</p>
<ul>
<li>The new <code>HKCDADocument</code> class, which represents a CDA document (that is, a document that follows the Clinical Document Architecture standard).</li>
<li>The new <code>HKWorkoutConfiguration</code> class, which lets you specify the <code>activityType</code> and <code>locationType</code> for a workout.</li>
<li>The new <code>HKWheelchairUseObject</code> characteristic object type and the related <code>HKHealthStore</code> method <code>wheelchairUseWithError:</code>.</li>
<li>New metadata keys that indicate weather types, such as <code>HKWeatherConditionClear</code> and <code>HKWeatherConditionCloudy</code>, and workout types, such as<code>HKWorkoutActivityTypeFlexibility</code> and <code>HKWorkoutActivityTypeWheelchairRunPace</code>.</li>
</ul>
<h3 id="HomeKit"><a href="#HomeKit" class="headerlink" title="HomeKit"></a>HomeKit</h3><p>In iOS 10, iPad can be configured to provide remote access to accessories, run automation triggers, and enable shared user permissions. In addition, the HomeKit framework (<code>HomeKit.framework</code>) adds support for camera and doorbell accessories and introduces many new APIs that help you:</p>
<ul>
<li>View and interact with IP camera accessory profiles, display live streams and snapshots, and control a camera’s settings, speaker, and microphone</li>
<li>Access new services and characteristics</li>
<li>For the primary service, link services and valid values to provide more context and configuration about the accessories</li>
</ul>
<p>You can also add and set up accessories using the Apple accessory setup workflow. To learn more, see <em>HomeKit Framework Reference</em>.</p>
<h3 id="Metal"><a href="#Metal" class="headerlink" title="Metal"></a>Metal</h3><p>In iOS 10, Metal includes several new features and enhancements, such as:</p>
<ul>
<li>Support for tessellation, enabling 3D apps and games to render more detailed scenes by efficiently describing complex geometry to the GPU.</li>
<li>Function Specialization, which makes it easy to create a collection of highly optimized functions to handle all the material and light combinations in a scene.</li>
<li>Resource Heaps and Memoryless Render Targets, which grant even finer-grained control of resource allocation to further optimize the performance of Metal-based apps.</li>
</ul>
<p>To learn more, see <a href="https://developer.apple.com/library/prerelease/content/documentation/Miscellaneous/Conceptual/MetalProgrammingGuide/WhatsNewiniOS10tvOS10andOSX1012/WhatsNewiniOS10tvOS10andOSX1012.html#//apple_ref/doc/uid/TP40014221-CH14" target="_blank" rel="external">What’s New in iOS 10, tvOS 10, and OS X 10.12</a> in <em>Metal Programming Guide</em>.</p>
<h3 id="ModelIO"><a href="#ModelIO" class="headerlink" title="ModelIO"></a>ModelIO</h3><p>The ModelIO framework (<code>ModelIO.framework</code>) includes the following enhancements:</p>
<ul>
<li>The USD file format is now supported.</li>
<li>The new <code>MDLMaterialPropertyGraph</code> class makes it easier to support runtime procedural changes to models.</li>
<li>The <code>MDLVoxelArray</code> class adds support for signed distance fields.</li>
<li>You can add assisted light probe placement by implementing the <code>MDLLightProbeIrradianceDataSource</code> protocol.</li>
</ul>
<h3 id="Photos"><a href="#Photos" class="headerlink" title="Photos"></a>Photos</h3><p>The Photos framework (<code>Photos.framework</code>) makes Live Photo editing available to apps that use Photos framework APIs to access the user’s Photos library and to photo editing app extensions for use in the Photos and Camera apps. Specifically, the new <code>PHLivePhotoEditingContext</code> class lets you apply edits to the video and still photo content of a Live Photo, with an easy-to-use API based on Core Image enhancements. In addition, you can take advantage of the new Core Image processor feature to use other image processing technologies to perform edits. To learn more, see <code>CIImageProcessorInput</code> and <code>CIImageProcessorOutput</code>.</p>
<h3 id="ReplayKit"><a href="#ReplayKit" class="headerlink" title="ReplayKit"></a>ReplayKit</h3><p>The ReplayKit framework (<code>ReplayKit.framework</code>) includes the following enhancements:</p>
<ul>
<li>ReplayKit supports broadcasting services so that a user can broadcast recorded media through a third-party site. You can implement support for this functionality by using the <code>RPScreenRecorder</code>, <code>RPBroadcastActivityViewController</code>, and <code>RPBroadcastController</code> classes.</li>
<li>To participate in ReplayKit broadcast, third-party broadcast services need to implement a pair of app extensions. The Broadcast UI extension provides a UI that lets users sign into the service and set up a broadcast. The Broadcast Upload extension receives movie clips and transmits them to the service.</li>
</ul>
<h3 id="SceneKit"><a href="#SceneKit" class="headerlink" title="SceneKit"></a>SceneKit</h3><p>The SceneKit framework (<code>SceneKit.framework</code>) includes several enhancements.</p>
<p>A new Physically Based Rendering (PBR) system allows you to leverage the latest in 3D graphics research to create more realistic results with simpler asset authoring. Specifically:</p>
<ul>
<li>Use the new <code>SCNLightingModelPhysicallyBased</code> shading model to opt into PBR shading for materials. PBR materials require only three fundamental properties—<code>diffuse</code>,<code>metalness</code>, and <code>roughness</code>—to produce a wide range of realistic shading effects. (The <code>normal</code>, <code>ambientOcclusion</code>, and <code>selfIllumination</code> material properties also remain useful for PBR materials, but you can now ignore the large number of other properties used for traditional materials.)</li>
<li>PBR shading works best with environment-based lighting, which causes even diffuse surfaces to pick up the colors of the scene around them. Use the<code>lightingEnvironment</code> property to assign global image-based lighting to an entire scene, and place light probes in the Xcode scene editor to pick up the local lighting contributions from objects within your scene.</li>
<li>Authors of PBR scene content often prefer working in physically based terms, so you can now define lighting using intensity (in lumens) and color temperature (in degrees Kelvin), and import specifications for real-world light fixtures using the <code>IESProfileURL</code> property.</li>
</ul>
<p>Add even more realism with the new HDR features and effects in the <code>SCNCamera</code> class. With HDR rendering, SceneKit captures a much wider range of brightness and contrast in a scene, then allows you to customize the tone mapping that adapts that scene for the narrower range of a device’s display. Enable exposure adaptation to create automatic effects when, for example, the player in your game moves from a darkened area into sunlight. Or use vignetting, color fringing, and color grading to add a filmic look to your game.</p>
<p>Although linear, more color-accurate rendering is the basis for PBR shading and HDR camera features, it produces better results even for traditional rendering. By default, SceneKit now performs all color calculations in a linear (not gamma-adjusted) color space, and uses the P3 color gamut of devices that include wide-color displays. This feature is enabled automatically for all apps linking against the iOS 10 SDK, and has a few ramifications for content design and asset management:</p>
<ul>
<li>SceneKit color matches all colors. In previous versions, SceneKit would read only the color values from material colors specified as <code>NSColor</code> or <code>UIColor</code> objects, ignoring color profile information and assuming the sRGB color space.</li>
<li>SceneKit interprets color component values specified within shader modifier or custom Metal or OpenGL shader code in linear RGB space.</li>
<li>SceneKit reads and adjusts for color profile information in texture images. Design textures for a linear brightness ramp, and use Asset Catalogs in Xcode to make sure your images use the correct color profile.</li>
<li>If necessary, you can disable linear space rendering with the <code>SCNDisableLinearSpaceRendering</code> key in your app’s <code>Info.plist</code> file, and wide color rendering with the<code>SCNDisableWideGamut</code> key.</li>
</ul>
<p>Geometry can now be loaded from scene files or programmatically defined using arbitrary polygon primitives (<code>SCNGeometryPrimitiveTypePolygon</code>). SceneKit automatically triangulates polygon meshes for rendering, but makes use of the underlying polygon mesh for more accurate surface subdivision (to learn more, see the <code>subdivisionLevel</code>property).</p>
<h3 id="SpriteKit"><a href="#SpriteKit" class="headerlink" title="SpriteKit"></a>SpriteKit</h3><p>The SpriteKit framework (<code>SpriteKit.framework</code>) includes the following enhancements:</p>
<ul>
<li>A new tilemap solution supports square, hexagonal, and isometric tilemaps that make it easy to create 2D, 2.5D, and side-scroller games. The Xcode editor provides comprehensive support for organizing your tiles and creating your tilemap. For more information, see the <code>SKTileMapNode</code>, <code>SKTileGroup</code>, <code>SKTileGroupRule</code>, and<code>SKTileSet</code> classes .</li>
<li>The new <code>SKWarpGeometry</code> class is used to stretch or distort how a <code>SKSpriteNode</code> or <code>SKEffectNode</code> object is rendered. The warp is specified by a set of control points. New<code>SKAction</code> types can be used to animate between different warp effects.</li>
<li>A custom shader can use attributes that can be configured separately by each node that uses the shader. To add an attribute, create an <code>SKAttribute</code> object and attach it to your shader. Then, for each node that uses that shader, attach an <code>SKAttributeValue</code> object.]</li>
<li>The <code>SKView</code> class defines new methods that give you finer control over when and how your scene is rendered.</li>
</ul>
<h3 id="UIKit"><a href="#UIKit" class="headerlink" title="UIKit"></a>UIKit</h3><p>The UIKit framework (<code>UIKit.framework</code>) includes many enhancements, such as:</p>
<ul>
<li>New object-based, fully interactive and interruptible animation support that lets you retain control of your animations and link them with gesture-based interactions. To learn more, see <em>UIViewAnimating Protocol Reference</em>, <em>UIViewPropertyAnimator Class Reference</em>, <em>UITimingCurveProvider Protocol Reference</em>, <em>UICubicTimingParameters Class Reference</em>, and <em>UISpringTimingParameters Class Reference</em>.</li>
<li>The new <code>UIPreviewInteraction</code> class and <code>UIPreviewInteractionDelegate</code> protocol, which let you provide a custom user interface related to the peek and pop experience.</li>
<li>The new <code>UIAccessibilityCustomRotor</code> class and related classes that help you provide custom, context-specific functionality that assistive technologies such as VoiceOver can expose to users. For example, you might create a custom rotor that lets VoiceOver users find misspelled words in a document by repeatedly returning the range of text that contains the next misspelled word.</li>
<li>The <code>UIAccessibilityIsAssistiveTouchRunning</code> and <code>UIAccessibilityAssistiveTouchStatusDidChangeNotification</code> symbols, which let you determine when AssistiveTouch is enabled, and the <code>UIAccessibilityHearingDevicePairedEar</code> and <code>UIAccessibilityHearingDevicePairedEarDidChangeNotification</code> symbols, which give you the pairing status of MFi hearing aids.</li>
<li>New <code>UIPasteboard</code> API that automatically declares compatible content types for common class instances and new options that limit the lifetime of objects on the pasteboard.</li>
<li>New options in <code>UIPasteboard</code></li>
<li>The new <code>preferredFontForTextStyle:compatibleWithTraitCollection:</code> <code>UIFont</code> method, which lets you add support for Dynamic Type in labels, text fields, and other text areas.</li>
<li>The <code>UIContentSizeCategoryAdjusting</code> protocol, which provides the <code>adjustsFontForContentSizeCategory</code> property that you can use to determine if the adopting element should update its font when the device’s <code>UIContentSizeCategory</code> changes.</li>
<li>Additional control over the appearance of the badge on a tab bar item, such as background color and text attributes.</li>
<li>Support for the refresh control in all scroll views and scroll-view subclasses, such as <code>UICollectionView</code>.</li>
<li>The new <code>UIApplication</code> method <code>openURL:options:completionHandler:</code>, which is executed asynchronously and calls the specified completion handler on the main queue (this method replaces <code>openURL:</code>).</li>
<li>The new <code>UICloudSharingController</code> class and <code>UICloudSharingControllerDelegate</code> protocol, which help you initiate a CloudKit sharing operation and display a view controller that lets users view and modify participants and start and stop sharing.</li>
<li>Enhancements to <code>UICollectionView</code> and the new <code>UICollectionViewDataSourcePrefetching</code> protocol, which help you take advantage of automatic prefetching of cells to improve the scrolling experience.</li>
</ul>
<h3 id="WebKit"><a href="#WebKit" class="headerlink" title="WebKit"></a>WebKit</h3><p>The WebKit framework (<code>WebKit.framework</code>) introduces enhanced peek and pop support in <code>WKWebView</code> objects. In iOS 10, you can use the <code>webView:shouldPreviewElement:</code>method to determine if the specified web view should display the preview.</p>
<h2 id="Deprecated-APIs"><a href="#Deprecated-APIs" class="headerlink" title="Deprecated APIs"></a>Deprecated APIs</h2><p>iOS 10 deprecates several APIs, including:</p>
<ul>
<li><p>The CloudKit <code>CKDiscoverAllContactsOperation</code>, <code>CKDiscoveredUserInfo</code>, <code>CKDiscoverUserInfosOperation</code>, <code>CKFetchRecordChangesOperation</code> classes. Instead, use <code>CKDiscoverAllUserIdentitiesOperation</code>, <code>CKUserIdentity</code>, <code>CKDiscoverUserIdentitiesOperation</code>, and <code>CKFetchRecordZoneChangesOperation</code> classes, all of which support record sharing.</p>
<p>Several <code>CKSubscription</code> APIs, such as methods and properties related to zone-based subscriptions (use <code>CKRecordZoneSubscription</code> APIs instead) and to query-based subscriptions (use <code>CKQuerySubscription</code> APIs instead).</p>
</li>
<li><p>Several <code>NSPersistentStoreCoordinator</code> symbols related to ubiquitous content.</p>
</li>
<li><p>The <code>ADBannerView</code> and <code>ADInterstitialAd</code> classes and related symbols in <code>UIViewController</code>.</p>
</li>
<li><p>Several <code>SKUniform</code> symbols related to floating point values. Instead, use methods such as <code>initWithName:vectorFloat2:</code> and <code>uniformWithName:matrixFloat2x2:</code>, as appropriate.</p>
</li>
<li><p>Several UIKit classes related to notifications, such as <code>UILocalNotification</code>, <code>UIMutableUserNotificationAction</code>, <code>UIMutableUserNotificationCategory</code>,<code>UIUserNotificationAction</code>, <code>UIUserNotificationCategory</code>, and <code>UIUserNotificationSettings</code>. Use APIs in the User Notifications framework instead (see <em>User Notifications Framework Reference</em>).</p>
</li>
<li><p>The <code>handleActionWithIdentifier:forLocalNotification:</code>, <code>handleActionWithIdentifier:forRemoteNotification:</code>,<code>didReceiveLocalNotification:withCompletion:</code>, and <code>didReceiveRemoteNotification:withCompletion:</code> WatchKit methods. Use<code>handleActionWithIdentifier:forNotification:</code> and <code>didReceiveNotification:withCompletion:</code> instead.</p>
<p>Also the notification-handling methods in <code>WKExtensionDelegate</code>, such as <code>didReceiveRemoteNotification:</code> and<code>handleActionWithIdentifier:forRemoteNotification:</code>. Instead of using these methods, first create a delegate object that adopts the<code>UNUserNotificationCenterDelegate</code> protocol and implement the appropriate methods. Then assign the delegate object to the <code>delegate</code> property of the singleton<code>UNUserNotificationCenter</code> object.</p>
</li>
</ul>
<p>For a complete list of specific API deprecations, see <em>iOS 10.0 API Diffs</em>.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-New-in-iOS-10-0&quot;&gt;&lt;a href=&quot;#What’s-New-in-iOS-10-0&quot; class=&quot;headerlink&quot; title=&quot;What’s New in iOS 10.0&quot;&gt;&lt;/a&gt;What’s New in iOS 10.0&lt;/h1&gt;&lt;ul&gt;
&lt;li&gt;Table of Contents&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Introduction/Introduction.html#//apple_ref/doc/uid/TP40008244-SW1&quot;&gt;Introduction&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS10.html#//apple_ref/doc/uid/TP40017084-SW1&quot;&gt;iOS 10.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_3.html#//apple_ref/doc/uid/TP40016661-SW1&quot;&gt;iOS 9.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_2.html#//apple_ref/doc/uid/TP40016637-SW1&quot;&gt;iOS 9.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9_1.html#//apple_ref/doc/uid/TP40016572-SW1&quot;&gt;iOS 9.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS9.html#//apple_ref/doc/uid/TP40016198-SW1&quot;&gt;iOS 9.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_4.html#//apple_ref/doc/uid/TP40015986-SW1&quot;&gt;iOS 8.4&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_3.html#//apple_ref/doc/uid/TP40015154-SW1&quot;&gt;iOS 8.3&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_2.html#//apple_ref/doc/uid/TP40015039-SW1&quot;&gt;iOS 8.2&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8_1.html#//apple_ref/doc/uid/TP40015009-SW1&quot;&gt;iOS 8.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS8.html#//apple_ref/doc/uid/TP40014205-SW1&quot;&gt;iOS 8.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS7_1.html#//apple_ref/doc/uid/TP40013916-SW1&quot;&gt;iOS 7.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS7.html#//apple_ref/doc/uid/TP40013162-SW1&quot;&gt;iOS 7.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS6_1.html#//apple_ref/doc/uid/TP40012873-SW1&quot;&gt;iOS 6.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS6.html#//apple_ref/doc/uid/TP40011812-SW1&quot;&gt;iOS 6.0&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS5_1.html#//apple_ref/doc/uid/TP40012663-SW1&quot;&gt;iOS 5.1&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://developer.apple.com/library/prerelease/content/releasenotes/General/WhatsNewIniOS/Articles/iOS5.html#//apple_ref/doc/uid/TP30915195-SW1&quot;&gt;iOS 5.0&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&quot;iOS-10-0&quot;&gt;&lt;a href=&quot;#iOS-10-0&quot; class=&quot;headerlink&quot; title=&quot;iOS 10.0&quot;&gt;&lt;/a&gt;iOS 10.0&lt;/h1&gt;&lt;p&gt;This article summarizes the key developer-related features introduced in iOS 10, which runs on currently shipping iOS devices. The article also lists the documents that describe new features in more detail.&lt;/p&gt;
&lt;p&gt;For late-breaking news and information about known issues, see Release Notes at &lt;a href=&quot;https://developer.apple.com/ios/download/&quot;&gt;https://developer.apple.com/ios/download/&lt;/a&gt;. For the complete list of new APIs added in iOS 10, see &lt;em&gt;iOS 10.0 API Diffs&lt;/em&gt;. For more information on new devices, see &lt;em&gt;iOS Device Compatibility Reference&lt;/em&gt;.&lt;/p&gt;
&lt;p&gt;To learn about what’s new in Swift, see &lt;a href=&quot;https://developer.apple.com/library/prerelease/content/documentation/DeveloperTools/Conceptual/WhatsNewXcode/introduction.html#//apple_ref/doc/uid/TP40004635-SW3&quot;&gt;Swift Language&lt;/a&gt; and &lt;em&gt;The Swift Programming Language (Swift 3)&lt;/em&gt;.&lt;/p&gt;
    
    </summary>
    
    
      <category term="iOS新特性" scheme="https://wilddylan.github.io/tags/iOS%E6%96%B0%E7%89%B9%E6%80%A7/"/>
    
  </entry>
  
  <entry>
    <title>方便的处理在StoryBoard、Xib中的圆角设置</title>
    <link href="https://wilddylan.github.io/2016/08/15/%E6%96%B9%E4%BE%BF%E7%9A%84%E5%A4%84%E7%90%86%E5%9C%A8StoryBoard%E3%80%81Xib%E4%B8%AD%E7%9A%84%E5%9C%86%E8%A7%92%E8%AE%BE%E7%BD%AE/"/>
    <id>https://wilddylan.github.io/2016/08/15/方便的处理在StoryBoard、Xib中的圆角设置/</id>
    <published>2016-08-15T09:57:28.000Z</published>
    <updated>2017-02-04T09:03:08.000Z</updated>
    
    <content type="html"><![CDATA[<p>直奔主题, 怎么能方便的在StoryBoard与Xib中设置圆角呢？</p>
<p>runtime属性？awakeFromNib？</p>
<p>直接使用<em>Catrgory</em>来实现！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">//UIView+O2CornerRadius.h</div><div class="line">@interface UIView (O2CornerRadius)</div><div class="line"> </div><div class="line">@property (nonatomic, assign) IBInspectable CGFloat cornerRadius;</div><div class="line"> </div><div class="line">@end</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">//UIView+O2CornerRadius.m</div><div class="line">@implementation UIView (O2CornerRadius)</div><div class="line"> </div><div class="line">- (void)setCornerRadius:(CGFloat)cornerRadius</div><div class="line">&#123;</div><div class="line">    self.layer.cornerRadius = cornerRadius;</div><div class="line">&#125;</div><div class="line"> </div><div class="line">- (CGFloat)cornerRadius</div><div class="line">&#123;</div><div class="line">    return self.layer.cornerRadius;</div><div class="line">&#125;</div><div class="line">@end</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>导入全局的pch中, 然后你发现, 世界变了。 </p>
<p><img src="http://mark2012.qiniudn.com/corner_radius.png" alt=""></p>
<p>Xcode6之后运行时属性升级到了 <strong>@IBInspectable</strong> ，利用这个我们可以给 UIView 添加一个属性，然后就可以在IB中进行设置</p>
<p>Copy @aotu.io 2016.8.15 By Dylan.</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;直奔主题, 怎么能方便的在StoryBoard与Xib中设置圆角呢？&lt;/p&gt;
&lt;p&gt;runtime属性？awakeFromNib？&lt;/p&gt;
&lt;p&gt;直接使用&lt;em&gt;Catrgory&lt;/em&gt;来实现！&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//UIView+O2CornerRadius.h&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@interface UIView (O2CornerRadius)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@property (nonatomic, assign) IBInspectable CGFloat cornerRadius;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@end&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//UIView+O2CornerRadius.m&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@implementation UIView (O2CornerRadius)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (void)setCornerRadius:(CGFloat)cornerRadius&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    self.layer.cornerRadius = cornerRadius;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;- (CGFloat)cornerRadius&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    return self.layer.cornerRadius;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;@end&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="UIKit" scheme="https://wilddylan.github.io/tags/UIKit/"/>
    
  </entry>
  
  <entry>
    <title>Crash 收集</title>
    <link href="https://wilddylan.github.io/2016/08/05/Crash/"/>
    <id>https://wilddylan.github.io/2016/08/05/Crash/</id>
    <published>2016-08-05T01:30:49.000Z</published>
    <updated>2017-02-04T09:02:09.000Z</updated>
    
    <content type="html"><![CDATA[<p>通常情况下, App中会做崩溃的日志收集, 以便进行问题的追踪。<a href="http://www.blogfshare.com/crash_reporter.html" target="_blank" rel="external">奋斗</a>提供了多个平台日志捕获的代码片断。</p>
<h2 id="崩溃捕获"><a href="#崩溃捕获" class="headerlink" title="崩溃捕获"></a>崩溃捕获</h2><p>在iOS中碰到异常之后, 捕获异常, 在Log的位置做日志记录, 崩溃次数统计, 下次启动可以做日志上传或者应用启动保护。<br>下边的<code>runLoop</code>相关的代码的所用是把当前App的<code>RunLoop</code>跑起来, 让程序可以继续运作, 但是某些功能可能无法使用, 可以避免大部分闪退。这段代码是很久以前学自<code>孙源</code>。</p>
<p>下边的代码可以满足最简单的日志收集。成熟的开源项目有 <code>KSCrash</code>、<code>plcrashreporter</code>、<code>CrashKit</code>等。如果想自己的做的更全面就要涉及到更多的知识了, 这篇文章可以帮到你<a href="http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;mid=208483273&amp;idx=1&amp;sn=37ee88e06e7426f59f3074c536370317&amp;scene=21" target="_blank" rel="external">漫谈iOS Crash收集</a>, 如果细读的话, 请注意<code>多个 Crash 日志收集服务共存的坑</code>。</p>
<a id="more"></a>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">-(<span class="built_in">BOOL</span>)install&#123;</div><div class="line">    <span class="built_in">NSSetUncaughtExceptionHandler</span>(&amp;UncaughtExceptionHandler);</div><div class="line">    <span class="keyword">return</span> <span class="literal">YES</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">void</span> UncaughtExceptionHandler(<span class="built_in">NSException</span> *exception) &#123;</div><div class="line">  <span class="built_in">NSArray</span> *callStack = [exception callStackSymbols];</div><div class="line">    <span class="built_in">NSString</span> *reason = [exception reason];</div><div class="line">    <span class="built_in">NSString</span> *name = [exception name];</div><div class="line">    <span class="built_in">NSString</span> *content = [<span class="built_in">NSString</span> stringWithFormat:<span class="string">@"\n异常错误报告\nname:%@\nreason:\n%@\ncallStackSymbols:\n%@"</span>,name,reason,[callStack componentsJoinedByString:<span class="string">@"\n"</span>]];</div><div class="line">    DLogOut(<span class="string">@"%@"</span>, content);</div><div class="line">    <span class="built_in">CFRunLoopRef</span> runLoop = <span class="built_in">CFRunLoopGetCurrent</span>();</div><div class="line">    <span class="built_in">NSArray</span> * modes = <span class="built_in">CFBridgingRelease</span>(<span class="built_in">CFRunLoopCopyAllModes</span>(runLoop));</div><div class="line">    <span class="keyword">while</span> (<span class="number">1</span>) &#123;</div><div class="line">        <span class="keyword">for</span> (<span class="built_in">NSString</span> * mode <span class="keyword">in</span> modes) &#123;</div><div class="line">            <span class="built_in">CFRunLoopRunInMode</span>((<span class="built_in">CFStringRef</span>)mode, <span class="number">0.001</span>, <span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="信息上传"><a href="#信息上传" class="headerlink" title="信息上传"></a>信息上传</h2><p>收集到错误信息后, 在第二次启动的时候自然要上传用户的崩溃信息。<br>一般来说, 部分程序提供了关闭日志与错误搜集这个功能的开关。但是大部分程序都是默认开启这项功能, 包括苹果一直在默默的收集Crash日志。</p>
<p>主要的流程：<code>-ApplicationDidFinishLaunch</code>之后首先检查用户是否开启了错误收集与反馈, 进而决定是否上传错误日志。 判断本地是否存在未上报的错误日志文件, 如果符合条件, 上报当前的崩溃日志, 清空本地日志。一个简单的网络请求而已, 这里不做代码的展示。 当然, App也可以合理的提供一些BUG反馈的界面, 如果没有提供可以使用<code>友盟</code>、<code>蒲公英</code>类似的摇一摇反馈等。</p>
<h2 id="程序崩溃保护"><a href="#程序崩溃保护" class="headerlink" title="程序崩溃保护"></a>程序崩溃保护</h2><ul>
<li>启动崩溃</li>
</ul>
<p>程序有可能在启动的时候就崩溃了, 这怎么办呢？微信读书给出了很好的方案, 原文在这里<a href="http://wereadteam.github.io/2016/05/23/GYBootingProtection/" target="_blank" rel="external">启动连续闪退保护</a>。原理其实很简单, 捕获到程序在一定时间内没有退出的话, 为正常启动。否则清零计数, 当错误计数达到了设置的最大次数时候, 调用Block进行用户自己的一些处理（文中一处有思路问题：程序启动用户就滑掉了, 其实不会影响的, 只要在AppDelegate-程序退入后台的方法中做一些手脚就好了, 滑掉应用也是要先退入后台）。 总体来说框架思路还是很直接的, 程序启动嘛, 5s差不多用户已经进去了, 所以代码达到了作者的初始思路。光是启动保护其实并没有什么大的用处, 可以在自己做的时候加入一些更好的处理方式。启动崩溃使用上边提到的框架可以解决部分问题。</p>
<ul>
<li>使用中崩溃</li>
</ul>
<p>在使用中崩溃, 在调试的时候, 有很多次实际是崩溃到了<code>main</code>函数中, 在我们打开全局断电以及僵尸模式等调试设置后, 大部分的崩溃还是会定位到出错的位置, 但是我们在不调试的时候怎么知道某一个用户是崩溃到什么位置呢？因为什么崩溃？还是要牵扯到最开始提到的Crash捕获, 在这里我们就要做错误的分析。通常的崩溃的<code>callstack</code>中我们可以得到部分想要的信息, 然后就是联合判断。</p>
<p>实际我们做的, 所有的Model都继承基类, 会有自己的标识, 被持有的对象标识等, 其他视图的基类也有对应的标识。建议大家这么做, 任何时候都有好处。</p>
<p>核心的思路是, 获取到Window当前的VC, 然后运行时取出这个VC相关的信息, 进行定位与分析。</p>
<p>这个方法可以准确的定位到80%的错误发生, 可以直接定位到具体的VC, 然后结合<code>callStack</code>中的一些信息就可以方便的定位到错误。这样, 我们定位错误的能力提升到80%, 在加上我们对应用的数据打点以及用户的行为追踪, 定位错误的能力提升了更多！。</p>
<p>这里提供一片关于BUG信息分析的文章<a href="http://blog.csdn.net/cuiweijie3/article/details/8778198/" target="_blank" rel="external">iOS崩溃日志解密</a>。当然为了懒, 你也可以使用念茜提到的<code>Crashlytics</code>, <code>Hockeyapp</code>这样一体的解决方案。</p>
<hr>
<h4 id="文章到此结束-下边是本周干货"><a href="#文章到此结束-下边是本周干货" class="headerlink" title="文章到此结束, 下边是本周干货"></a>文章到此结束, 下边是本周干货</h4><hr>
<h2 id="杀死野指针（MRC老项目细看）"><a href="#杀死野指针（MRC老项目细看）" class="headerlink" title="杀死野指针（MRC老项目细看）"></a>杀死野指针（MRC老项目细看）</h2><ul>
<li>开发期间</li>
</ul>
<p>开发中我们发现, 哎呦, 我们自己测试的没有问题, 为什么别人一用就有问题, 或者是偶尔出现问题？这就是已经被释放的对象在搞鬼。有些对象被release了, 但是他占用的那一块内存保存完好, 有可能不Crash, 访问了不可访问的数据, 肯定会Crash。对象释放后内存被改动过，写上了可以访问的数据，但是再次访问的时候执行的代码把别的数据写坏了，遇到这种Crash只能哭了（随机Crash，难度大，概率低）, 对象释放后再次release（几乎是必现Crash，但也有例外，很常见）。</p>
<ol>
<li>加入全局断点</li>
<li>做下边的配置</li>
</ol>
<p><img src="http://um.devdylan.cn/blog-8-5-1.png" alt=""></p>
<p>在调试中, 看看就知道, 总之我知道最常见的野指针是会出来见你的。</p>
<p>但是这是你插着调试, 如果打包内测就没有办法了, 所以这里我们还提供另一种方法, HOOK, 涉及到的方法一般是dealloc,object_dispose,free。这里我们直接选择去<code>hook</code>C语言的free方法, 这里用到了<a href="https://github.com/facebook/fishhook" target="_blank" rel="external">facebook·fishhook</a>, 在Main函数中直接进行Hook。</p>
<figure class="highlight objc"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="meta">#import <span class="meta-string">"fishhook.h"</span></span></div><div class="line"><span class="meta">#import <span class="meta-string">&lt;malloc/malloc.h&gt;</span></span></div><div class="line"></div><div class="line"><span class="keyword">static</span> <span class="keyword">void</span> (*origin_free)(<span class="keyword">void</span> *);</div><div class="line"></div><div class="line"><span class="keyword">void</span> hook_free(<span class="keyword">void</span> * p) &#123;</div><div class="line">    size_t memSiziee = malloc_size(p);</div><div class="line">    memset(p, <span class="number">0x55</span>, memSiziee);</div><div class="line"></div><div class="line">    printf(<span class="string">"call origin free"</span>);</div><div class="line">    origin_free(p);</div><div class="line">    <span class="keyword">return</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">int</span> main(<span class="keyword">int</span> argc, <span class="keyword">char</span> * argv[]) &#123;</div><div class="line">    <span class="keyword">@autoreleasepool</span> &#123;</div><div class="line"></div><div class="line">        <span class="comment">// Hook free method.</span></div><div class="line">        rebind_symbols((<span class="keyword">struct</span> rebinding[<span class="number">1</span>])&#123;&#123;<span class="string">"free"</span>, hook_free, (<span class="keyword">void</span> *)&amp;origin_free&#125;&#125;, <span class="number">1</span>);</div><div class="line"></div><div class="line">        <span class="keyword">return</span></div><div class="line">        <span class="built_in">UIApplicationMain</span>(argc, argv, <span class="literal">nil</span>, <span class="built_in">NSStringFromClass</span>([INSApp <span class="keyword">class</span>]));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这个时候运行程序发现调用了我们的hook-free方法, 这里为什么把已经被free的内容覆盖为0x55呢？</p>
<blockquote>
<p>实际上填写数据的关键在于填写数据后其地址指向不可读的内存。而填写0x55，和出现异常情况的对象地址0x555555连接起来被当成指针使用的话，就会被识别为0x55555555，而CPU访问这个地址就会抛出异常。另外一点，就是方便区分野指针，例如在Xcode启用Enable Scribble时，指定alloc之后填写的地址为0xaa，防止内存初始化就使用，也是为了方便和free之后的内存做区分。</p>
</blockquote>
<p>下边的文章自行细读, 我就不在这里扯了 ~</p>
<p><a href="http://bugly.qq.com/bbs/forum.php?mod=viewthread&amp;tid=31&amp;highlight=%E5%85%88%E6%8F%90%E9%AB%98%E9%87%8E%E6%8C%87%E9%92%88" target="_blank" rel="external">调试时候让Crash随机成必现1</a></p>
<p><a href="http://blog.csdn.net/tencent_bugly/article/details/46374401" target="_blank" rel="external">调试时候让Crash随机成比现2</a></p>
<p><a href="http://blog.csdn.net/tencent_bugly/article/details/46545155" target="_blank" rel="external">让野指针自报家门</a></p>
<h2 id="HTTPS"><a href="#HTTPS" class="headerlink" title="HTTPS"></a>HTTPS</h2><p><a href="http://blog.csdn.net/tencent_bugly/article/details/51540300" target="_blank" rel="external">HTTPS 安全在哪里呢?</a></p>
<h2 id="逆向工程（你想自动拆红包？-lt-老文章了-gt-）"><a href="#逆向工程（你想自动拆红包？-lt-老文章了-gt-）" class="headerlink" title="逆向工程（你想自动拆红包？&lt;老文章了&gt;）"></a>逆向工程（你想自动拆红包？&lt;老文章了&gt;）</h2><p><a href="http://blog.csdn.net/tencent_bugly/article/details/52058093" target="_blank" rel="external">揭秘1</a></p>
<p><a href="http://blog.csdn.net/tencent_bugly/article/details/51878332" target="_blank" rel="external">揭秘2</a></p>
<h2 id="动画渲染机制"><a href="#动画渲染机制" class="headerlink" title="动画渲染机制"></a>动画渲染机制</h2><p><a href="http://blog.csdn.net/tencent_bugly/article/details/50350743" target="_blank" rel="external">动画渲染机制</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;通常情况下, App中会做崩溃的日志收集, 以便进行问题的追踪。&lt;a href=&quot;http://www.blogfshare.com/crash_reporter.html&quot;&gt;奋斗&lt;/a&gt;提供了多个平台日志捕获的代码片断。&lt;/p&gt;
&lt;h2 id=&quot;崩溃捕获&quot;&gt;&lt;a href=&quot;#崩溃捕获&quot; class=&quot;headerlink&quot; title=&quot;崩溃捕获&quot;&gt;&lt;/a&gt;崩溃捕获&lt;/h2&gt;&lt;p&gt;在iOS中碰到异常之后, 捕获异常, 在Log的位置做日志记录, 崩溃次数统计, 下次启动可以做日志上传或者应用启动保护。&lt;br&gt;下边的&lt;code&gt;runLoop&lt;/code&gt;相关的代码的所用是把当前App的&lt;code&gt;RunLoop&lt;/code&gt;跑起来, 让程序可以继续运作, 但是某些功能可能无法使用, 可以避免大部分闪退。这段代码是很久以前学自&lt;code&gt;孙源&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;下边的代码可以满足最简单的日志收集。成熟的开源项目有 &lt;code&gt;KSCrash&lt;/code&gt;、&lt;code&gt;plcrashreporter&lt;/code&gt;、&lt;code&gt;CrashKit&lt;/code&gt;等。如果想自己的做的更全面就要涉及到更多的知识了, 这篇文章可以帮到你&lt;a href=&quot;http://mp.weixin.qq.com/s?__biz=MjM5NTIyNTUyMQ==&amp;amp;mid=208483273&amp;amp;idx=1&amp;amp;sn=37ee88e06e7426f59f3074c536370317&amp;amp;scene=21&quot;&gt;漫谈iOS Crash收集&lt;/a&gt;, 如果细读的话, 请注意&lt;code&gt;多个 Crash 日志收集服务共存的坑&lt;/code&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="崩溃日志" scheme="https://wilddylan.github.io/tags/%E5%B4%A9%E6%BA%83%E6%97%A5%E5%BF%97/"/>
    
  </entry>
  
</feed>
